==================
module decl - simple
==================

module Test =
  type T = { x : Int64; y : Int64}

---

(source_file
  (module_decl
    (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (type_decl
        (keyword) (type_identifier) (symbol)
        (type_decl_def
          (type_decl_def_record
            (symbol)
            (type_decl_def_record_fields
              (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
              (symbol)
              (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
            )
            (symbol)
          )
        )
      )
    )
    (dedent)
  )
)


==================
module decl - nested module
==================

module Test =
  module Nested =
    type T = { x : Int64 }

---

(source_file
  (module_decl
    (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (module_decl
        (keyword) (module_identifier) (symbol)
        (indent)
        (module_content
          (type_decl
            (keyword) (type_identifier) (symbol)
            (type_decl_def
              (type_decl_def_record
                (symbol)
                (type_decl_def_record_fields
                  (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
                )
                (symbol)
              )
            )
          )
        )
      (dedent)
      )
    )
    (dedent)
  )
)


==================
module decl - with newlines
==================
module Test =
  val x = 1L

  type T = { x : Int64 }

  let helloWorld (i: Int64): String = "Hello world"

---

(source_file
  (module_decl
    (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (val_decl
        (keyword) (value_identifier) (symbol)
        (simple_expression
          (int64_literal (digits (positive_digits)) (symbol)))
      )
    )
    (module_content
      (type_decl
        (keyword) (type_identifier)  (symbol)
        (type_decl_def
          (type_decl_def_record
            (symbol)
            (type_decl_def_record_fields
              (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
            )
            (symbol)
          )
        )
      )
    )
    (module_content
      (fn_decl
        (keyword)
        (fn_identifier)
        (fn_decl_params
          (fn_decl_param (symbol) (variable_identifier) (symbol)  (type_reference (builtin_type)) (symbol))
        )
        (symbol)
        (type_reference (builtin_type))
        (symbol)
        (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
      )
    )
    (dedent)
  )
)


==================
module decl - no newlines
==================
module Test =
  val x = 1L
  type T = { x : Int64 }
  let helloWorld (i: Int64): String = "Hello world"

---

(source_file
  (module_decl
    (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (val_decl
        (keyword) (value_identifier) (symbol)
        (simple_expression
          (int64_literal (digits (positive_digits)) (symbol)))
      )
    )
    (module_content
      (type_decl
        (keyword) (type_identifier) (symbol)
        (type_decl_def
          (type_decl_def_record
            (symbol)
            (type_decl_def_record_fields (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type))))
            (symbol)
          )
        )
      )
    )
    (module_content
      (fn_decl
        (keyword)
        (fn_identifier)
        (fn_decl_params (fn_decl_param (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol)))
        (symbol)
        (type_reference (builtin_type))
        (symbol)
        (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
      )
    )
    (dedent)
  )
)


==================
module decl - nested modules
==================

module Test =
  module Nested1 =
    val x = 1L

  module Nested2 =
    val x = true

---

(source_file
  (module_decl (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (module_decl
        (keyword) (module_identifier) (symbol)
        (indent)
        (module_content
          (val_decl
            (keyword) (value_identifier) (symbol)
            (simple_expression
          (int64_literal (digits (positive_digits)) (symbol)))
          )
        )
        (dedent)
      )
    )
    (module_content
      (module_decl
        (keyword) (module_identifier) (symbol)
        (indent)
        (module_content
          (val_decl
            (keyword) (value_identifier) (symbol)
            (simple_expression
              (bool_literal))
          )
        )
        (dedent)
      )
    )
    (dedent)
  )
)


==================
module decl - with functions
==================

module Darklang =
  let returnsOptionNone () : Stdlib.Option.Option<'a> =
    Stdlib.Option.Option.None

  let returnsResultOk () : Stdlib.Result.Result<Int64, String> =
    Stdlib.Result.Result.Ok 5L


---

(source_file
  (module_decl
    (keyword) (module_identifier) (symbol)
    (indent)
    (module_content
      (fn_decl
        (keyword) (fn_identifier) (fn_decl_params (unit)) (symbol)
        (type_reference
          (qualified_type_name
            (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)
            (type_args
              (symbol)
              (type_args_items
                (type_reference
                  (builtin_type (variable_type_reference  (symbol) (variable_identifier)))
                )
              )
              (symbol)
            )
          )
        )
        (symbol)
        (indent)
        (expression
          (simple_expression
            (enum_literal
              (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
              (symbol)
              (enum_case_identifier)
            )
          )
        )
        (dedent)
      )
    )
    (module_content
      (fn_decl
        (keyword) (fn_identifier) (fn_decl_params (unit)) (symbol)
        (type_reference
          (qualified_type_name
            (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)
            (type_args
              (symbol)
              (type_args_items (type_reference (builtin_type)) (symbol) (type_reference (builtin_type)))
              (symbol)
            )
          )
        )
        (symbol)
        (indent)
        (expression
          (simple_expression
            (enum_literal
              (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
              (symbol)
              (enum_case_identifier)
              (enum_fields
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              )
            )
          )
        )
        (dedent)
      )
    )
    (dedent)
  )
)