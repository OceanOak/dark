==================
Enum - no args
==================

MyEnum.NoArgs

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier))
      (symbol)
      (enum_case_identifier)
    )
  )
)


==================
Enum - with one arg
==================

MyEnum.OneArg 1L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier))
      (symbol)
      (enum_case_identifier)
      (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
    )
  )
)


==================
Enum - with two args
==================

MyEnum.TwoArgs(1L, 2L)

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier))
      (symbol)
      (enum_case_identifier)
      (enum_fields
        (expression
          (simple_expression
            (tuple_literal
              (symbol)
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              (symbol)
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              (symbol)
            )
          )
        )
      )
    )
  )
)


==================
Enum - with two args no parens
==================

MyEnum.TwoArgs 1L 2L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
      (enum_fields
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      )
    )
  )
)



==================
Enum - fully qualified
==================

Stdlib.Option.Option.None

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name
        (module_identifier)
        (symbol)
        (module_identifier)
        (symbol)
        (type_identifier)
      )
      (symbol)
      (enum_case_identifier)
    )
  )
)


==================
Enum - fully qualified with args
==================

Stdlib.Option.Option.Some 1L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
      (symbol)
      (enum_case_identifier)
      (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
    )
  )
)

==================
Enum - fully qualified with indented args
==================

Stdlib.Option.Option.Some
  1L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
      (symbol)
      (enum_case_identifier)
      (indent)
      (enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
      (dedent)
    )
  )
)



==================
Enum - with two args no parens and indented
==================

MyEnum.TwoArgs
  1L
  2L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
      (indent)
      (enum_fields
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      )
      (dedent)
    )
  )
)


==================
test
==================

MyEnum.OneArg 1L
2L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (type_identifier))
      (symbol)
      (enum_case_identifier)
      (enum_fields
        (expression
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
        )
      )
    )
  )
  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
)


==================
an enum followed by an expression
==================

Option.Option.None
1L

---

(source_file
  (expression
    (enum_literal
      (qualified_type_name (module_identifier) (symbol) (type_identifier))
      (symbol)
      (enum_case_identifier)
    )
  )
  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
)