==================
pipe expression - function call
==================

1L |> Stdlib.Int64.toString

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_fn_call
            (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
          )
        )
      )
    )
  )
)


==================
pipe expression - function call with arguments
==================

1L |> Stdlib.Int64.add 2L

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_fn_call
            (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
        )
      )
    )
  )
)


==================
pipe expression - function call with type arguments
==================

"true" |> Builtin.jsonParse<Bool>

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_fn_call
            (qualified_fn_name
              (module_identifier)
              (symbol)
              (fn_identifier)
              (type_args (symbol) (type_args_items (type_reference (builtin_type))) (symbol))
            )
          )
        )
      )
    )
  )
)


==================
pipe expression - variable
==================

5L |> x

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs (symbol) (pipe_expr (pipe_fn_call (qualified_fn_name (fn_identifier)))))
    )
  )
)


==================
pipe expression - let pattern + variable
==================

let fn = (fun x -> x + 1L)
1L |> fn

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (expression
        (paren_expression
          (symbol)
          (expression
            (lambda_expression
              (keyword)
              (lambda_pats (let_pattern (variable_identifier)))
              (symbol)
              (expression
                (infix_operation
                  (expression (simple_expression (variable_identifier)))
                  (operator)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
              )
            )
          )
          (symbol)
        )
      )
      (expression
        (pipe_expression
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (pipe_exprs (symbol) (pipe_expr (pipe_fn_call (qualified_fn_name (fn_identifier)))))
        )
      )
    )
  )
)


==================
pipe expression - infix
==================

1L |> (+) 2L

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_infix
            (symbol) (operator) (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          )
        )
      )
    )
  )
)


==================
pipe expression - enum
==================

3L |> Stdlib.Result.Result.Ok

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_enum
            (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)) (symbol) (enum_case_identifier)
          )
        )
      )
    )
  )
)


==================
pipe expression - enum with two fields
==================

33L |> MyEnum.A 21L

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_enum
            (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
            (pipe_enum_fields (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
          )
        )
      )
    )
  )
)


==================
pipe expression - enum with three fields
==================

33L |> MyEnum.B 21L 12L

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_enum
            (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
            (pipe_enum_fields
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
            )
          )
        )
      )
    )
  )
)


==================
pipe expression - enum with tuple
==================

33L |> MyEnum.C(21L, 12L)

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_enum
            (qualified_type_name (type_identifier))
            (symbol)
            (enum_case_identifier)
            (pipe_enum_fields
              (expression
                (simple_expression
                  (tuple_literal
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)


==================
pipe expression - lambda without parens
==================

1L |> fun x -> x + 1L

---

(source_file
  (expression
    (pipe_expression
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_lambda
            (lambda_expression
              (keyword)
              (lambda_pats (let_pattern (variable_identifier)))
              (symbol)
              (expression
                (infix_operation
                  (expression (simple_expression (variable_identifier)))
                  (operator)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
              )
            )
          )
        )
      )
    )
  )
)


==================
pipe expression - lambda with parens
==================

1L |> (fun x -> x + 1L)

---

(source_file
  (expression
    (pipe_expression
      (expression
        (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
      )
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_lambda
            (symbol)
              (lambda_expression
                (keyword)
                (lambda_pats (let_pattern (variable_identifier)))
                (symbol)
                (expression
                  (infix_operation
                    (expression (simple_expression (variable_identifier)))
                    (operator)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  )
                )
              )
            (symbol)
          )
        )
      )
    )
  )
)


==================
pipe expression - pipe a function call into another function call
==================

Stdlib.Int64.add 1L 2L |> Stdlib.Int64.add 1L

---

(source_file
  (expression
    (pipe_expression
      (expression
        (apply
          (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
        )
      )
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_fn_call
            (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
        )
      )
    )
  )
)


==================
pipe expression - multiple pipe expressions
==================

[1L; 2L]
|> Stdlib.List.last
|> Builtin.unwrap

---

(source_file
  (expression
    (pipe_expression
      (expression
        (pipe_expression
          (expression
            (simple_expression
              (list_literal
                (symbol)
                (list_content
                  (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                  (symbol)
                  (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                )
                (symbol)
              )
            )
          )
          (pipe_exprs
            (symbol)
            (pipe_expr (pipe_fn_call (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))))
          )
        )
      )
      (pipe_exprs
        (symbol)
        (pipe_expr (pipe_fn_call (qualified_fn_name (module_identifier) (symbol) (fn_identifier))))
      )
    )
  )
)


==================
pipe expression - multiple pipe expressions with infix
==================

1L
|> (+) 2L
|> (*) 3L
|> (>) 4L

---

(source_file
  (expression
    (pipe_expression
      (expression
        (pipe_expression
          (expression
            (pipe_expression
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              (pipe_exprs
                (symbol)
                (pipe_expr
                  (pipe_infix
                    (symbol)
                    (operator)
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  )
                )
              )
            )
          )
          (pipe_exprs
            (symbol)
            (pipe_expr
              (pipe_infix
                (symbol)
                (operator)
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              )
            )
          )
        )
      )
      (pipe_exprs
        (symbol)
        (pipe_expr
          (pipe_infix
            (symbol)
            (operator)
            (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          )
        )
      )
    )
  )
)