==================
empty list
==================

[]

---

(source_file (expression (simple_expression (list_literal (symbol) (symbol)))))


==================
Single-item list
==================

["hello"]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol))))))
        (symbol)
      )
    )
  )
)


==================
Two-item list
==================

[1L; 2L]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
        )
        (symbol)
      )
    )
  )
)


==================
Multiple-item list
==================

[true; false; true; false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (bool_literal)))
          (symbol)
          (expression (simple_expression (bool_literal)))
          (symbol)
          (expression (simple_expression (bool_literal)))
          (symbol)
          (expression (simple_expression (bool_literal)))
        )
        (symbol)
      )
    )
  )
)



==================
Nested list
==================

[[true; false]; [true; false]]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression
            (simple_expression
              (list_literal
                (symbol)
                (list_content
                  (expression (simple_expression (bool_literal)))
                  (symbol)
                  (expression (simple_expression (bool_literal)))
                )
                (symbol)
              )
            )
          )
          (symbol)
          (expression
            (simple_expression
              (list_literal
                (symbol)
                (list_content
                  (expression (simple_expression (bool_literal)))
                  (symbol)
                  (expression (simple_expression (bool_literal))))
                (symbol)
              )
            )
          )
        )
        (symbol)
      )
    )
  )
)


==================
List with trailing semicolon
==================

[true; false;]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (bool_literal)))
          (symbol)
          (expression (simple_expression (bool_literal)))
          (symbol)
        )
        (symbol)
      )
    )
  )
)


==================
List starting with semicolon
==================

[; true; false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (ERROR
          (symbol))
        (list_content
          (expression (simple_expression (bool_literal)))
          (symbol)
          (expression (simple_expression (bool_literal)))
        )
        (symbol)
      )
    )
  )
)


==================
List with missing semicolon
==================

[true false]

---

(source_file
  (expression
    (simple_expression (list_literal
      (symbol)
      (list_content
        (expression
          (statement
            (expression
              (simple_expression
                (bool_literal)))
            (expression
              (simple_expression
                (bool_literal))))))
      (symbol))
    )
  )
)


==================
List with missing item
==================

[true; ; false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (bool_literal)))
          (ERROR
            (symbol))
          (symbol)
          (expression (simple_expression (bool_literal))))
        (symbol)
      )
    )
  )
)


==================
List with just a semicolon
==================

[;]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (ERROR (symbol))
        (symbol)
      )
    )
  )
)


==================
List with newlines
==================

[true
 false
 true
 false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (bool_literal)))
          (newline)
          (expression (simple_expression (bool_literal)))
          (newline)
          (expression (simple_expression (bool_literal)))
          (newline)
          (expression (simple_expression (bool_literal)))
        )
        (symbol)
      )
    )
  )
)


==================
Enum List
==================

[
  ErrorSegment.ErrorSegment.String(
    "RTETODO typeChecker.toSegments"
  )
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (indent)
          (expression
            (simple_expression
              (enum_literal
                (qualified_type_name (module_identifier) (symbol) (type_identifier))
                (symbol)
                (enum_case_identifier)
                (symbol)
                (enum_fields
                  (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
                )
                (symbol)
              )
            )
          )
          (dedent)
        )
        (symbol)
      )
    )
  )
)


==================
List of vars
==================

[intVar
floatVar
stringVar
boolVar]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
        )
        (symbol)
      )
    )
  )
)


==================
List of vars
==================

[
  intVar
  floatVar
  stringVar
  boolVar
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (indent)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (dedent)
        )
        (symbol)
      )
    )
  )
)

==================
List of Enums
==================

[
  Stdlib.Option.Option.Some 1L
  Stdlib.Option.Option.None
  Stdlib.Option.Option.Some(1L, 2L, 3L)
  Stdlib.Option.Option.Some(1L, 2L)
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (indent)
          (expression
            (simple_expression
              (enum_literal
                (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)) (symbol) (enum_case_identifier)
                (enum_fields
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))))))
          (newline)
          (expression (simple_expression
            (enum_literal (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)) (symbol) (enum_case_identifier))))
          (newline)
          (expression
            (simple_expression
              (enum_literal (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)) (symbol) (enum_case_identifier)
                (symbol)
                (enum_fields
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
                (symbol)
              )
            )
          )
          (newline)
          (expression
            (simple_expression
              (enum_literal
                (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)) (symbol) (enum_case_identifier)
                (symbol)
                (enum_fields
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
                (symbol)
              )
            )
          )
          (dedent)
        )
        (symbol)
      )
    )
  )
)


==================
List of fn calls
==================

[
  Stdlib.Tuple2.second (4L, 5L)
  Stdlib.Int64.add 1L 2L
  Stdlib.List.head [1L; 2L]
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (indent)
          (expression
            (apply
              (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression
                (tuple_literal
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                )
              )
            )
          )
          (newline)
          (expression
            (apply
              (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
            )
          )
          (newline)
          (expression
            (apply
              (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression
                (list_literal
                  (symbol)
                  (list_content
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  )
                  (symbol)
                )
              )
            )
          )
          (dedent)
        )
        (symbol)
      )
    )
  )
)


==================
List of fn calls
==================

[ (Stdlib.Int64.add
    1L
    2L)
  Stdlib.Tuple2.second (4L, 5L)
  Stdlib.List.head [1L; 2L] ]
---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression
            (simple_expression
              (paren_expression
                (symbol)
                (expression
                  (apply
                    (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                    (indent)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (dedent)
                  )
                )
                (symbol)
              )
            )
          )
          (newline)
          (expression
            (apply
              (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression
                (tuple_literal
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (symbol)
                )
              )
            )
          )
          (newline)
          (expression
            (apply
              (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression
                (list_literal
                  (symbol)
                  (list_content
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  )
                  (symbol)
                )
              )
            )
          )
        )
        (symbol)
      )
    )
  )
)


==================
List of vars
==================

[
  intVars
  floatVars
  stringVars
  boolVars
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (indent)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (newline)
          (expression (simple_expression (variable_identifier)))
          (dedent)
        )
        (symbol)
      )
    )
  )
)