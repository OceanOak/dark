==================
empty list
==================

[]

---

(source_file
  (expression
    (simple_expression (list_literal
      (symbol)
      (symbol)))))


==================
Single-item list
==================

["hello"]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
        (symbol)
      )
    )
  )
)


==================
Two-item list
==================

[1L; 2L]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          (symbol)
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
        )
        (symbol)
      )
    )
  )
)


==================
Multiple-item list
==================

[true; false; true; false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression (bool_literal))
          (symbol)
          (simple_expression (bool_literal))
          (symbol)
          (simple_expression (bool_literal))
          (symbol)
          (simple_expression (bool_literal)))
        (symbol)
      )
    )
  )
)



==================
Nested list
==================

[[true; false]; [true; false]]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression
            (list_literal
              (symbol)
              (list_content
                (simple_expression (bool_literal))
                (symbol)
                (simple_expression (bool_literal))
              )
              (symbol)
            )
          )
          (symbol)
            (simple_expression (list_literal
              (symbol)
              (list_content
                (simple_expression (bool_literal))
                (symbol)
                (simple_expression (bool_literal)))
              (symbol))))
        (symbol)
      )
    )
  )
)


==================
List with trailing semicolon
==================

[true; false;]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression (bool_literal))
          (symbol)
          (simple_expression (bool_literal))
          (symbol)
        )
        (symbol)
      )
    )
  )
)


==================
List starting with semicolon
==================

[; true; false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (ERROR
          (symbol))
        (list_content
          (simple_expression (bool_literal))
          (symbol)
          (simple_expression (bool_literal))
        )
        (symbol)
      )
    )
  )
)


==================
List with missing semicolon
==================

[true false]

---

(source_file
  (expression
    (simple_expression (list_literal
      (symbol)
      (list_content
        (simple_expression (bool_literal)))
      (ERROR)
      (symbol))
    )
  )
)


==================
List with missing item
==================

[true; ; false]

---

(source_file
  (expression
    (simple_expression (list_literal
      (symbol)
      (list_content
        (simple_expression (bool_literal))
        (ERROR
          (symbol))
        (symbol)
        (simple_expression (bool_literal)))
      (symbol)))))


==================
List with just a semicolon
==================

[;]

---

(source_file
  (expression
    (simple_expression (list_literal
      (symbol)
      (ERROR
        (symbol))
      (symbol)))))


==================
List with newlines
==================

[true
 false
 true
 false]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (simple_expression (bool_literal))
          (newline)
          (simple_expression (bool_literal))
          (newline)
          (simple_expression (bool_literal))
          (newline)
          (simple_expression (bool_literal)))
        (symbol)
      )
    )
  )
)


==================
Enum List
==================

[
  (ErrorSegment.ErrorSegment.String
    "RTETODO typeChecker.toSegments"
  )
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (paren_expression
            (symbol)
            (expression
              (enum_literal
                (qualified_type_name (module_identifier) (symbol) (type_identifier))
                (symbol)
                (enum_case_identifier)
                (indent)
                (enum_fields
                  (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
                )
                (dedent)
              )
            )
            (symbol)
          )
          (newline)
        )
        (symbol)
      )
    )
  )
)



==================
enum list 2
==================

[
  (MyEnum.OneArg 1L)
  (MyEnum.TwoArgs 1L 2L)
]

---

(source_file
  (expression
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (paren_expression
            (symbol)
            (expression
              (enum_literal
                (qualified_type_name (type_identifier))
                (symbol)
                (enum_case_identifier)
                (enum_fields
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
              )
            )
            (symbol)
          )
          (newline)
          (paren_expression
            (symbol)
            (expression
              (enum_literal
                (qualified_type_name (type_identifier))
                (symbol)
                (enum_case_identifier)
                (enum_fields
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
              )
            )
            (symbol))
          (newline))
        (symbol)
      )
    )
  )
)