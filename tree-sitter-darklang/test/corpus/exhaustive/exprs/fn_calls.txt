==================
basic infix operation parsing
==================

a + b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
infix + is left associative
i.e. `a + b + c` should be parsed as `(a + b) + c`
==================

a + b + c

---

(source_file
  (expression
    (infix_operation
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
infix * has higher precedence than infix +
i.e `a + b * c` should be parsed as `a + (b * c)`
==================

a + b * c

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
    )
  )
)


==================
infix ^ has higher precedence than infix *
i.e. `a * b ^ c` should be parsed as `a * (b ^ c)`
==================

a * b ^ c

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
    )
  )
)



==================
comparison operator >
==================

a > b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator <
==================

a < b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator >=
==================

a >= b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator <=
==================

a <= b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator ==
==================

a == b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator !=
==================

a != b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
exponent operator ^
==================

a ^ b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)

==================
string concatenation operator ++
==================

a ++ b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
basic function call
==================

Bool.and true false

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (simple_expression (bool_literal))
      (simple_expression (bool_literal))
      (newline)
    )
  )
)


==================
function call with function call as argument
==================

Bool.and (Bool.and true false) false

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression
        (symbol)
        (expression
          (apply
            (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
            (simple_expression (bool_literal))
            (simple_expression (bool_literal))
          )
        )
        (symbol)
      )
      (simple_expression (bool_literal))
      (newline)
    )
  )
)


==================
function call - with a function call as argument followed by an expression
==================

Builtin.printLine (getTitle curiousGeorgeBookId)

0L

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression
        (symbol)
        (expression
          (apply (qualified_fn_name (fn_identifier)) (simple_expression (variable_identifier))))
        (symbol)
      )
      (newline)
    )
  )
  (expression
    (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
  )
)


==================
function call - with a record as argument
==================

Builtin.printLine Person { name = "Alice" }

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (simple_expression
        (record_literal
          (qualified_type_name (type_identifier))
          (symbol)
          (record_content
            (record_pair
              (variable_identifier)
              (symbol)
              (expression
                (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol))))
              )
            )
          )
          (symbol)
        )
      )
      (newline)
    )
  )
)




==================
function call - with an enum as argument
==================

Builtin.printLine Stdlib.Option.Option.Some 1L

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (simple_expression
        (enum_literal
          (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
          (symbol)
          (enum_case_identifier)
          (enum_fields
            (expression
              (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
            )
          )
        )
      )
    )
  )
)


==================
function call - with a dict as argument
==================

Builtin.printLine Dict {a = 1L}

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (simple_expression
        (dict_literal
          (keyword)
          (symbol)
          (dict_content
            (dict_pair
              (variable_identifier)
              (symbol)
              (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
            )
          )
          (symbol)
        )
      )
      (newline)
    )
  )
)

==================
function call - with type arguments
==================

Builtin.jsonParse<Bool> "true"

---

(source_file
  (expression
    (apply
      (qualified_fn_name
        (module_identifier) (symbol) (fn_identifier)
        (type_args (symbol) (type_args_items (type_reference (builtin_type))) (symbol))
      )
      (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol))))
      (newline)
    )
  )
)


==================
function call - with a field_access as argument
==================

PACKAGE.Darklang.Stdlib.Http.response request.body 200L

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
      (simple_expression (field_access (variable_identifier) (symbol) (variable_identifier)))
      (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
      (newline)
    )
  )
)

==================
fn_call - indented args
==================

Stdlib.Tuple3.mapAllThree
  (fun x -> Stdlib.String.toUppercase x)
  (fun x -> x - 2L)
  (fun x -> Stdlib.String.toUppercase x)
  ("one", 2L, "pi")


---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
      (indent)
      (expression
        (paren_expression
          (symbol)
          (expression
            (lambda_expression
              (keyword)
              (lambda_pats (let_pattern (variable_identifier)))
              (symbol)
              (expression
                (apply
                  (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                  (simple_expression (variable_identifier))
                )
              )
            )
          )
          (symbol)
        )
      )
      (expression
        (paren_expression
          (symbol)
          (expression
            (lambda_expression
              (keyword)
              (lambda_pats (let_pattern (variable_identifier)))
              (symbol)
              (expression
                (infix_operation
                  (expression (simple_expression (variable_identifier)))
                  (operator)
                  (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                )
              )
            )
          )
          (symbol)
        )
      )
      (expression
        (paren_expression
          (symbol)
          (expression
            (lambda_expression
              (keyword)
              (lambda_pats (let_pattern (variable_identifier)))
              (symbol)
              (expression
                (apply
                  (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                  (simple_expression (variable_identifier))
                )
              )
            )
          )
          (symbol)
        )
      )
      (expression
        (simple_expression
          (tuple_literal
            (symbol)
            (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
            (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
            (tuple_literal_the_rest
              (symbol)
              (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
            )
            (symbol)
          )
        )
      )
      (dedent)
    )
  )
)


==================
test
==================

let fn = Stdlib.Int64.add
fn 3L 4L

---

(source_file
  (expression
    (let_expression
      (keyword)
      (let_pattern (variable_identifier))
      (symbol)
      (expression
        (simple_expression
          (qualified_const_name
            (module_identifier)
            (symbol)
            (module_identifier)
            (symbol)
            (constant_identifier))))
      (expression
        (apply
          (qualified_fn_name
            (fn_identifier))
          (simple_expression
            (int64_literal
              (digits
                (positive_digits))
              (symbol)))
          (simple_expression
            (int64_literal
              (digits
                (positive_digits))
              (symbol)))
          (newline))))))