==================
val declaration - int8
==================

val waterBoilingPointCelsius = 100y

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (int8_literal (digits (positive_digits)) (symbol)))
  )
)


==================
val declaration - uint8
==================

val maxPlayers = 20uy

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (uint8_literal (positive_digits) (symbol)))
  )
)


==================
val declaration - int16
==================

val maxSeatsInPlane = 800s

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (int16_literal (digits (positive_digits)) (symbol)))
  )
)


==================
val declaration - uint16
==================

val maxDaysInAYear = 365us

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (uint16_literal (positive_digits) (symbol)))
  )
)


==================
val declaration - int32
==================

val stadiumCapacity = 80000l

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (int32_literal (digits (positive_digits)) (symbol)))
  )
)


==================
val declaration - uint32
==================

val marathonDistance = 42195ul

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (uint32_literal (positive_digits) (symbol)))
  )
)


==================
val declaration - int64
==================

val secondsInAYear = 31536000L

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (int64_literal (digits (positive_digits)) (symbol)))
  )
)


==================
val declaration - uint64
==================

val millisecondsInYear = 31536000000UL

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (uint64_literal (positive_digits) (symbol)))
  )
)


==================
val declaration - int128
==================

val millisecondsInDay = 86400000Q

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (int128_literal (digits (positive_digits)) (symbol)))
  )
)


==================
val declaration - uint128
==================

val millisecondsInCentury = 3155695200000Z

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (uint128_literal (positive_digits) (symbol)))
  )
)


==================
val declaration - float
==================

val pi = 3.14159

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (float_literal))
  )
)


==================
val declaration - string
==================

val message = "Hello, World!"

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (string_segment
        (string_literal (symbol) (string_content) (symbol))))
  )
)


==================
val declaration - char
==================

val letter = 'A'

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (char_literal (symbol) (character) (symbol)))
  )
)


==================
val declaration - boolean
==================

val isTrue = true

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (bool_literal))
  )
)


==================
val declaration - list
==================

val numbers = [1L; 2L; 3L]

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (list_literal
        (symbol)
        (list_content
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - tuple
==================

val dimensionsOfRoom = (5L, 10L, 3L)

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (tuple_literal
        (symbol)
        (expression
          (simple_expression
            (int64_literal (digits (positive_digits)) (symbol))))
        (symbol)
        (expression
          (simple_expression
            (int64_literal (digits (positive_digits)) (symbol))))
        (tuple_literal_the_rest
          (symbol)
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - dictionary
==================

val emptyDict = Dict{}

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (dict_literal (keyword) (symbol) (symbol))
    )
  )
)


==================
val declaration - dictionary with key-value pairs
==================

val myDict = Dict{one = 1L; two = 2L}

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (dict_literal
        (keyword)
        (symbol)
        (dict_content
          (dict_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (int64_literal (digits (positive_digits)) (symbol))))
          )
          (symbol)
          (dict_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (int64_literal (digits (positive_digits)) (symbol))))
          )
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - enum
==================

val colorRed = Color.Red

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (enum_case_identifier)
      )
    )
  )
)


==================
val declaration - enum with one field
==================

val someOne = Stdlib.Option.Option.Some 1L

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (enum_literal
        (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
        (symbol)
        (enum_case_identifier)
        (enum_fields
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol)))))
      )
    )
  )
)


==================
val declaration - enum with multiple fields
==================

val myEnum = MyEnum.MyCase(1L, 2L)

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
        (symbol)
        (enum_fields
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
          (symbol)
          (expression
            (simple_expression
              (int64_literal (digits (positive_digits)) (symbol))))
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - enum with tuple field
==================

val myEnum = MyEnum.MyCase((1L, 2L))

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (enum_literal
        (qualified_type_name (type_identifier)) (symbol) (enum_case_identifier)
        (symbol)
        (enum_fields
          (expression
            (simple_expression
              (tuple_literal
                (symbol)
                (expression
                  (simple_expression
                    (int64_literal (digits (positive_digits)) (symbol))))
                (symbol)
                (expression
                  (simple_expression
                    (int64_literal (digits (positive_digits)) (symbol))))
                (symbol)
              )
            )
          )
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - record
==================

val myPerson = Person { name = "Alice"; age = 30L }

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (record_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (record_content
          (record_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (string_segment
                  (string_literal (symbol) (string_content) (symbol)))))
          )
          (symbol)
          (record_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (int64_literal (digits (positive_digits)) (symbol))))
          )
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - qualified record
==================

val myPoint = Geometry.Point { x = 1.0; y = 2.0 }

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (record_literal
        (qualified_type_name (module_identifier) (symbol) (type_identifier))
        (symbol)
        (record_content
          (record_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (float_literal)))
          )
          (symbol)
          (record_pair
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (float_literal)))
          )
        )
        (symbol)
      )
    )
  )
)


==================
val declaration - unit
==================

val unitValue = ()

---

(source_file
  (val_decl
    (keyword)
    (value_identifier)
    (symbol)
    (simple_expression
      (unit))
  )
)




