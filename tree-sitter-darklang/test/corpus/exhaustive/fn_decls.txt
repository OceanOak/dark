==================
fn decl with single param
==================

let helloWorld (i: Int64): String = "Hello world"

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference (builtin_type))
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
    (newline)
  )
)


==================
fn decl with single unit param
==================

let emptyString (): String = ""

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params (unit))
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (expression (simple_expression (string_segment (string_literal (symbol) (symbol)))))
    (newline)
  )
)


==================
fn decl with multiple params
==================

let isHigher (a: Int64) (b: Int64): Bool =
  Int64.isGreaterThan a b

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (indent)
    (expression
      (apply
        (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
        (simple_expression (variable_identifier))
        (simple_expression (variable_identifier))
      )
    )
    (dedent)
  )
)


==================
fn decl with type parameters
==================

let myFn<'a> (param: 'a): Unit = ()

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (type_params (symbol) (type_params_items (variable_type_reference (symbol) (variable_identifier))) (symbol))
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference
          (builtin_type (variable_type_reference  (symbol) (variable_identifier)))
        )
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (expression (simple_expression (unit)))
    (newline)
  )
)


==================
fn decl with two type parameters
==================

let myFn<'a, 'b> (param: 'a): 'b = param

---
(source_file
  (fn_decl
    (keyword) (fn_identifier)
    (type_params
      (symbol)
      (type_params_items (variable_type_reference (symbol) (variable_identifier))
      (symbol)
      (variable_type_reference (symbol) (variable_identifier)))
      (symbol))
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
    (symbol)
    (expression (simple_expression (variable_identifier)))
    (newline)
  )
)



==================
fn decl - with printLine call
==================

let helloworld () : Int64 =
  let _ =
    Builtin.printLine "Hello, World!"
  0L

---

(source_file
  (fn_decl
    (keyword) (fn_identifier) (fn_decl_params (unit)) (symbol)
    (type_reference (builtin_type)) (symbol)
    (indent)
    (expression
      (let_expression
        (keyword)
        (let_pattern (variable_identifier))
        (symbol)
        (indent)
        (expression
          (apply
            (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
            (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol))))
          )
        )
        (dedent)
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
      )
    (dedent)
  )
)


==================
fn decl - nested match expression as body
==================

let processItem (item: Item) : Result<Items.Item, Error.ProcessingError> =
  match item.typ with
  | "items" ->
    match item.subItems with
    | [ singleItem ] ->
      processItem singleItem
    | _ -> createError item
  | _ -> createError item

---
(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier) (symbol)
        (type_reference (qualified_type_name (type_identifier)))
        (symbol)
      )
    )
    (symbol)
    (type_reference
      (qualified_type_name
        (type_identifier)
        (type_args
          (symbol)
          (type_args_items
            (type_reference (qualified_type_name (module_identifier) (symbol) (type_identifier)))
            (symbol)
            (type_reference (qualified_type_name (module_identifier) (symbol) (type_identifier)))
          )
          (symbol)
        )
      )
    )
    (symbol)
    (indent)
    (expression
      (match_expression
        (keyword)
        (expression (simple_expression (field_access (variable_identifier) (symbol) (variable_identifier))))
        (keyword)
        (match_case
          (patterns
            (symbol)
            (match_pattern (string (symbol) (string_content) (symbol)))
          )
          (symbol)
          (indent)
          (expression
            (match_expression
              (keyword)
              (expression (simple_expression (field_access (variable_identifier) (symbol) (variable_identifier))))
              (keyword)
              (match_case
                (patterns
                  (symbol)
                  (match_pattern (list (symbol) (mp_list_content (match_pattern (variable))) (symbol)))
                )
                (symbol)
                (indent)
                (expression
                  (apply
                    (qualified_fn_name (fn_identifier))
                    (simple_expression (variable_identifier))
                  )
                )
                (dedent)
              )
              (match_case
                (patterns
                  (symbol)
                  (match_pattern (variable))
                )
                (symbol)
                (expression
                  (apply
                    (qualified_fn_name (fn_identifier))
                    (simple_expression (variable_identifier))
                  )
                )
              )
            )
          )
          (dedent)
        )
        (match_case
          (patterns
            (symbol)
            (match_pattern (variable))
          )
          (symbol)
          (expression
            (apply
              (qualified_fn_name (fn_identifier))
              (simple_expression (variable_identifier))
            )
          )
        )
      )
    )
    (dedent)
  )
)



==================
fn decl - fn_params on new lines
==================


let myFn
  (a: String)
  (b: Int64)
  (c: Bool)
  : Bool =
  true

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (indent) (expression (simple_expression (bool_literal))) (dedent)
  )
)


==================
fn decl - fn_params on new lines 2
==================

let myFn
  (a: String) (b: Int64) (c: Bool)
  : Bool =
  true

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param
        (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (indent)
    (expression (simple_expression (bool_literal)))
    (dedent)
  )
)