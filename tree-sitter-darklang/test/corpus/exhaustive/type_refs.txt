==================
all builtin type references
==================

type MyUnit = Unit
type MyBool = Bool
type MyInt8 = Int8
type MyInt16 = Int16
type MyInt32 = Int32
type MyInt64 = Int64
type MyInt128 = Int128
type MyUInt8 = UInt8
type MyUInt16 = UInt16
type MyUInt32 = UInt32
type MyUInt64 = UInt64
type MyUInt128 = UInt128
type MyFloat = Float
type MyChar = Char
type MyString = String
type MyList = List<String>
type MyTuple2 = (Int64 * String)
type MyTuple3 = (Int64 * String * Bool)
type MyTuple = (Int64 * String * Bool * Float * Char * Unit)
type MyDict = Dict<Int64>
type MyDateTime = DateTime
type MyUUID = Uuid

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type (list_type_reference (keyword) (symbol) (type_reference (builtin_type)) (symbol)))))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type (tuple_type_reference (symbol) (type_reference (builtin_type)) (symbol) (type_reference (builtin_type)) (symbol)))))))
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (tuple_type_reference
              (symbol)
              (type_reference (builtin_type))
              (symbol)
              (type_reference (builtin_type))
              (type_reference_tuple_the_rest (symbol) (type_reference (builtin_type)))
              (symbol)))))))
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (tuple_type_reference
              (symbol)
              (type_reference (builtin_type))
              (symbol)
              (type_reference (builtin_type))
              (type_reference_tuple_the_rest
                (symbol)
                (type_reference (builtin_type))
                (symbol)
                (type_reference (builtin_type))
                (symbol)
                (type_reference (builtin_type))
                (symbol)
                (type_reference (builtin_type)))
              (symbol)))))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type (dict_type_reference (keyword) (symbol) (type_reference (builtin_type)) (symbol)))))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
)


==================
(simple) qualified type identifier
==================

type ID = Test

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias (type_reference (qualified_type_name (type_identifier))))
    )
  )
)


==================
multi-part qualified type identifier
==================

type ID = Darklang.Stdlib.Option.Option

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (qualified_type_name
            (module_identifier)
            (symbol)
            (module_identifier)
            (symbol)
            (module_identifier)
            (symbol)
            (type_identifier)
          )
        )
      )
    )
  )
)


==================
type reference - variable
==================

type MyVar = 'a

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
      )
    )
  )
)


==================
type reference - fn
==================

type MyFn = 'a -> String

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (fn_type_reference
              (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
              (symbol)
              (type_reference (builtin_type))
            )
          )
        )
      )
    )
  )
)


==================
type reference - fn with two args
==================

type MyFn = 'a -> 'b -> String

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (fn_type_reference
              (type_reference
                (builtin_type
                  (fn_type_reference
                    (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
                    (symbol)
                    (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
                  )
                )
              )
              (symbol)
              (type_reference (builtin_type))
            )
          )
        )
      )
    )
  )
)



==================
type reference - fn with multiple args
==================

type MyFn = 'a -> 'b -> 'c -> String

---

(source_file
  (type_decl
    (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (fn_type_reference
              (type_reference
                (builtin_type
                  (fn_type_reference
                    (type_reference
                      (builtin_type
                        (fn_type_reference
                          (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
                          (symbol)
                          (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
                        )
                      )
                    )
                    (symbol)
                    (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
                  )
                )
              )
              (symbol)
              (type_reference (builtin_type))
            )
          )
        )
      )
    )
  )
)


==================
type reference - DB -simple
==================

type MyDB = DB<'a>

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type (db_type_reference (keyword) (symbol) (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier)))) (symbol)))
        )
      )
    )
  )
)


==================
type reference - DB with a variable record type
==================

type MyRecord = {x: String}
type MyDB = DB<MyRecord>

---
(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
        (type_decl_def_record_fields (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type))))
        (symbol)
      )
    )
  )
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (db_type_reference
              (keyword)
              (symbol)
              (type_reference (qualified_type_name (type_identifier)))
              (symbol)
            )
          )
        )
      )
    )
  )
)


==================
type reference - DB
==================

type Generic<'a> = { x: 'a }

type GenericDB = DB<Generic<String>>

---

(source_file
  (type_decl
    (keyword) (type_identifier)
    (type_params (symbol) (type_params_items (variable_type_reference (symbol) (variable_identifier))) (symbol))
    (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
        (type_decl_def_record_fields
          (type_decl_def_record_field
            (variable_identifier)
            (symbol)
            (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
          )
        )
        (symbol)
      )
    )
  )

  (type_decl
    (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (builtin_type
            (db_type_reference
              (keyword)
              (symbol)
              (type_reference (qualified_type_name (type_identifier) (type_args (symbol) (type_args_items (type_reference (builtin_type))) (symbol))))
              (symbol)
            )
          )
        )
      )
    )
  )
)