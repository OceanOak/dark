==================
type decl alias of builtin
==================

type ID = Int64

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias (type_reference (builtin_type)))
    )
  )
)


==================
type decl alias of package type
==================

type MyID = PACKAGE.Darklang.LanguageTools.Test

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (type_reference
          (qualified_type_name
            (module_identifier)
            (symbol)
            (module_identifier)
            (symbol)
            (module_identifier)
            (symbol)
            (type_identifier)
          )
        )
      )
    )
  )
)

==================
type def alias of local type
==================

type MyID = Test

---

(source_file
  (type_decl
    keyword_type: (keyword)
    name: (type_identifier)
    symbol_equals: (symbol)
    typ: (type_decl_def
          (type_decl_def_alias
            (type_reference (qualified_type_name type_identifier: (type_identifier)))
          )
        )
  )
)


==================
type def alias with indent
==================

type Json =
  PACKAGE.Darklang.Stdlib.AltJson.Json

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_alias
        (indent)
        (type_reference
          (qualified_type_name
            (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)
          )
        )
        (dedent)
      )
    )
  )
)


==================
type def Record
==================

type Cols2 = { col1: Int64; col2: Int64 }

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
          (type_decl_def_record_fields
            (type_decl_def_record_field
              (variable_identifier) (symbol) (type_reference (builtin_type))
            )
            (symbol)
            (type_decl_def_record_field
              (variable_identifier) (symbol) (type_reference (builtin_type))
            )
          )
        (symbol)
      )
    )
  )
)


==================
type def Record with package type
==================

type Cols2 = { col1: PACKAGE.Darklang.LanguageTools.Test; col2: Int64 }

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
          (type_decl_def_record_fields
            (type_decl_def_record_field
              (variable_identifier) (symbol) (type_reference
                (qualified_type_name
                  (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)
                )
              )
            )
            (symbol)
            (type_decl_def_record_field
              (variable_identifier) (symbol) (type_reference (builtin_type))
            )
          )
        (symbol)
      )
    )
  )
)


==================
type def Record - newlines as separators
==================

type Test =
  { name : String
    lineNumber : Int64
    actual: LanguageTools.WrittenTypes.Expr
    expected: LanguageTools.WrittenTypes.Expr }

---

(source_file
  (type_decl
    (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_record
        (indent)
        (symbol)
        (type_decl_def_record_fields
          (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
          (newline)
          (type_decl_def_record_field (variable_identifier) (symbol) (type_reference (builtin_type)))
          (newline)
          (type_decl_def_record_field
            (variable_identifier) (symbol)
            (type_reference (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)))
          )
          (newline)
          (type_decl_def_record_field
            (variable_identifier) (symbol)
            (type_reference (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier)))
          )
        )
        (symbol)
        (dedent)
      )
    )
  )
)


==================
type def Record - with one type parameter
==================

type Test<'a> = { name: 'a }

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (type_params
      (symbol)
      (type_params_items (variable_type_reference (symbol) (variable_identifier)))
      (symbol)
    )
    (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
        (type_decl_def_record_fields
          (type_decl_def_record_field
            (variable_identifier)
            (symbol)
            (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
          )
        )
        (symbol)
      )
    )
  )
)


==================
type def Record - with multiple type parameters
==================

type Test<'a, 'b> = { name: 'a; age: 'b }

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (type_params
      (symbol)
      (type_params_items
        (variable_type_reference (symbol) (variable_identifier))
        (symbol)
        (variable_type_reference (symbol) (variable_identifier))
      )
      (symbol)
    )
    (symbol)
    (type_decl_def
      (type_decl_def_record
        (symbol)
        (type_decl_def_record_fields
          (type_decl_def_record_field
            (variable_identifier)
            (symbol)
            (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
          )
          (symbol)
          (type_decl_def_record_field
            (variable_identifier)
            (symbol)
            (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
          )
        )
        (symbol)
      )
    )
  )
)


==================
type def Enum - one case, no fields
==================

type MyEnum =
  | A

---

(source_file
  (type_decl
    (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier))
          (dedent)
        )
      )
    )
  )
)


==================
type def Enum - multiple cases, no fields
==================

type MyEnum =
  | A
  | B
  | C

---

(source_file
  (type_decl
    (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (dedent)
        )
      )
    )
  )
)




==================
type def Enum - one case, one field
==================

type MyEnum = | A of Int64

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_single_line
          (type_decl_enum_case
            (symbol) (enum_case_identifier) (keyword) (type_decl_enum_field (type_reference (builtin_type)))
          )
        )
      )
    )
  )
)


==================
type def Enum - multiple cases, one field
==================

type MyEnum =
  | A of Int64
  | B of String
  | C

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field
              (type_reference (builtin_type))
            )
          )
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field
              (type_reference (builtin_type))
            )
          )
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (dedent)
        )
      )
    )
  )
)


==================
type def Enum - multiple cases, no fields, single line
==================

type MyEnum = | A | B | C

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_single_line
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (type_decl_enum_case (symbol) (enum_case_identifier))
        )
      )
    )
  )
)


==================
type def Enum - multiple cases, one field with label
==================

 type MyEnum =
  | A of x: Int64
  | B of y: String
  | C of z: (Int64 * Bool)

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)

          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field
              (variable_identifier)
              (symbol)
              (type_reference (builtin_type))
            )
          )

          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field
              (variable_identifier)
              (symbol)
              (type_reference (builtin_type))
            )
          )

          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field
              (variable_identifier)
              (symbol)
              (type_reference
                (builtin_type
                  (tuple_type_reference
                    (symbol)
                    (type_reference (builtin_type))
                    (symbol)
                    (type_reference (builtin_type))
                    (symbol)
                  )
                )
              )
            )
          )
          (dedent)
        )
      )
    )
  )
)


==================
type def Enum - multiple cases, two field
==================

type MyEnum =
  | A of Int64 * Bool

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field (type_reference (builtin_type)))
            (symbol)
            (type_decl_enum_field (type_reference (builtin_type))))
          (dedent)
        )
      )
    )
  )
)


==================
type def Enum - with one type parameter
==================

type MyEnum<'a> =
  | A of 'a
  | B

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (type_params
      (symbol)
      (type_params_items (variable_type_reference (symbol) (variable_identifier)))
      (symbol)
    )
    (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier)))))
          )
          (type_decl_enum_case (symbol) (enum_case_identifier))
          (dedent)
        )
      )
    )
  )
)


==================
type def Enum - with multiple type parameters
==================

type MyEnum<'a, 'b> =
  | A of 'a
  | B of 'b

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (type_params
      (symbol)
      (type_params_items
        (variable_type_reference (symbol) (variable_identifier))
        (symbol)
        (variable_type_reference (symbol) (variable_identifier))
      )
      (symbol)
    )
    (symbol)
    (type_decl_def
      (type_decl_def_enum
        (type_decl_enum_multi_line
          (indent)
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier)))))
          )
          (type_decl_enum_case
            (symbol)
            (enum_case_identifier)
            (keyword)
            (type_decl_enum_field (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier)))))
          )
          (dedent)
        )
      )
    )
  )
)