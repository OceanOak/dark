[<HttpHandler("GET", "/ping")>]
let _handler _req =
  Stdlib.Http.response (Stdlib.String.toBytes "pong") 200L


// expose some metadata to quickly check if things seem to be working and populated
[<HttpHandler("GET", "/stats")>]
let _handler _req =
  let stats = Builtin.packageManagerGetStats ()

  let body =
    $"Package stats:
- types: {stats.types |> Builtin.int64ToString}
- fns: {stats.fns |> Builtin.int64ToString}
- values: {stats.values |> Builtin.int64ToString}"
    |> Stdlib.String.toBytes

  Stdlib.Http.response body 200L



// fetch types
// (JSON representation of PT.PackageType)
[<HttpHandler("GET", "/type/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindType name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/type/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetType id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageType.PackageType> f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


// fetch values
// (JSON representation of PT.PackageValues)
[<HttpHandler("GET", "/value/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindValue name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/value/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetValue id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageValue.PackageValue>
        f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


// fetch functions
// (JSON representation of PT.PackageFn)
[<HttpHandler("GET", "/function/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindFn name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/function/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetFn id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageFn.PackageFn> f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


[<HttpHandler("GET", "/search")>]
let _handler _req =
  let currentModule =
    (Stdlib.Http.Request.queryParams request)
    |> Stdlib.List.filterMap (fun pair ->
      match pair with
      | (k, v) ->
        if k == "modules" then
          Stdlib.Option.Option.Some v
        else
          Stdlib.Option.Option.None
      | _ -> Stdlib.Option.Option.None)

    |> Stdlib.List.head
    |> Builtin.unwrap
    |> Stdlib.String.split "."

  let text =
    (Stdlib.Http.Request.queryParams request)
    |> Stdlib.List.filterMap (fun pair ->
      match pair with
      | (k, v) ->
        if k == "text" then
          Stdlib.Option.Option.Some v
        else
          Stdlib.Option.Option.None
      | _ -> Stdlib.Option.Option.None)
    |> fun text ->
      match text with
      | [] -> ""
      | _ ->
        (Stdlib.List.head text)
        |> Builtin.unwrap

  let searchDepth =
    (Stdlib.Http.Request.queryParams request)
    |> Stdlib.List.filterMap (fun pair ->
      match pair with
      | (k, v) ->
        if k == "searchDepth" then
          Stdlib.Option.Option.Some v
        else
          Stdlib.Option.Option.None
      | _ -> Stdlib.Option.Option.None)
    |> Stdlib.List.head
    |> Builtin.unwrap
    |> fun depth ->
      match depth with
      | "direct" ->
        LanguageTools.ProgramTypes.Search.SearchDepth.OnlyDirectDescendants

  let entityTypes =
    (Stdlib.Http.Request.queryParams request)
    |> Stdlib.List.filterMap (fun pair ->
      match pair with
      | (k, v) ->
        if k == "entityTypes" then
          Stdlib.Option.Option.Some v
        else
          Stdlib.Option.Option.None
      | _ -> Stdlib.Option.Option.None)
    |> Stdlib.List.head
    |> Builtin.unwrap
    |> Stdlib.String.split ","
    |> Stdlib.List.map (fun entityType ->
      match entityType with
      | "type" -> LanguageTools.ProgramTypes.Search.EntityType.Type
      | "value" -> LanguageTools.ProgramTypes.Search.EntityType.Value
      | "function" -> LanguageTools.ProgramTypes.Search.EntityType.Fn
      | "module" -> LanguageTools.ProgramTypes.Search.EntityType.Module)

    |> Stdlib.List.unique


  let query =
    LanguageTools.ProgramTypes.Search.SearchQuery
      { currentModule = currentModule
        text = text
        searchDepth = searchDepth
        entityTypes = entityTypes }


  let results = Builtin.packageManagerSearch query

  let json = Builtin.jsonSerialize<LanguageTools.ProgramTypes.Search.SearchResults> results

  Stdlib.Http.response (Stdlib.String.toBytes json) 200L