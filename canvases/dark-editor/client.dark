// TODO: let ignore (z: ): Unit

let log (s: String) : Unit =
  let _ = WASM.Editor.callJSFunction "console.log" [ s ]
  ()

let logErr (s: String) : Unit =
  let _ = WASM.Editor.callJSFunction "console.error" [ s ]
  ()

let rUnwrap (result: Result<'a, 'b>) : 'a =
  match result with
  | Ok s -> s
  | Error e ->
    // TODO: handle non-string errors with Json.serialize<'b>, or using RuntimeTypes somehow
    // match Json.serialize<'b> e with
    // | Ok serializedError ->
    //   logErr (
    //     "Couldn't unwrap Result - instead of an OK, got this Error: "
    //     ++ serializedError
    //   )
    // | Error err -> logErr ("couldn't serialize error to log: " ++ err)

    logErr ("Couldn't unwrap Result - instead of an OK, got this Error: " ++ e)

// todo: throw this stuff into an OpenAI module?
type OpenAIChatCompletionRequestMessage = { role: String; content: String }

type OpenAIChatCompletionRequest =
  { model: String
    max_tokens: Int
    temperature: Float
    messages: List<OpenAIChatCompletionRequestMessage> }

type OpenAIChatCompletionResponseChoiceMessage = { content: String }

type OpenAIChatCompletionResponseChoice =
  { message: OpenAIChatCompletionResponseChoiceMessage }

type OpenAIChatCompletionResponse =
  { choices: List<OpenAIChatCompletionResponseChoice> }

let openAIcompletion (prompt: String) : Result<String, String> =
  let apiKey =
    let url = "http://dark-editor.dlio.localhost:11003/openai-apikey-yikes"

    match WASM.HttpClient.request "get" url [] Bytes.empty with
    | Ok response -> response.body |> String.fromBytes

  let openAIRequest =
    OpenAIChatCompletionRequest
      { model = "gpt-3.5-turbo"
        max_tokens = 700
        temperature = 0.7
        messages =
          [ OpenAIChatCompletionRequestMessage { role = "user"; content = prompt } ] }

  match Json.serialize<OpenAIChatCompletionRequest> openAIRequest with
  | Ok reqBody ->
    let headers =
      [ ("authorization", "Bearer " ++ apiKey)
        ("content-type", "application/json") ]

    let openAIResponse =
      WASM.HttpClient.request
        "POST"
        "https://api.openai.com/v1/chat/completions"
        headers
        (String.toBytes reqBody)

    match openAIResponse with
    | Ok r ->
      match Json.parse<OpenAIChatCompletionResponse> (String.fromBytes r.body) with
      | Ok r ->
        match List.head r.choices with
        | Just c -> Ok c.message.content

        | Nothing -> Error("No choices returned")
      | Error err -> Error("Couldn't parse open ai completino response - " ++ err)
    | Error e -> Error("OpenAI API request failed\n" ++ e)
  | Error e -> Error("Couldn't serialize request" ++ e)


let parseAndSerializeProgram (userProgram: String) : Result<String, String> =
  let response =
    WASM.HttpClient.request
      "POST"
      "http://dark-editor.dlio.localhost:11003/get-program-json"
      []
      (String.toBytes userProgram)

  let statusCode = response |> rUnwrap |> (fun r -> r.statusCode)

  match statusCode with
  | 200 -> Ok(response |> rUnwrap |> (fun r -> r.body) |> String.fromBytes)
  | 400 -> Error(response |> rUnwrap |> (fun r -> r.body) |> String.fromBytes)
  | _ -> Error("Unexpected response code: " ++ Int.toString statusCode)


// TODO: in the prompt, include something like
// "all code snippets returned must be executable without any other context needed"

// Model
type Fn = { name: String; body: String }

type Status =
  | Todo
  | InProgress
  | Done

type Task =
  { id: String
    description: String
    status: Status }

type Action =
  { id: String
    description: String
    status: Status }

type BotResponseItem =
  | Text of text: String
  | CodeSnippet of id: String
  | Tasks of tasks: List<Task>
  | Actions of actions: List<Action>

type ChatHistoryItem =
  | UserPrompt of id: String * prompt: String
  | BotResponse of id: String * items: List<BotResponseItem> // todo: add promptId to tie together with relevant UserPrompt

type CodeSnippet =
  { id: String
    code: String
    eval: Option<String> }

type Model =
  { isLoading: Bool
    systemPrompt: String
    chatHistory: List<ChatHistoryItem>
    codeSnippets: List<CodeSnippet>
    tasks: List<Task>
    actions: List<Action>
    fnList: List<String> }


// Update
type Msg =
  | LoadSystemPrompt
  | UserGavePrompt of prompt: String
  | UserRequestedCodeEval of id: String * codeSnippet: String
  | GetFnBody
  | SaveFnList of fn: String


let sendError (model: Model) (codeSnippet: String) (err: String) : Model =
  let errMsg =
    "update the code snippet to fix "
    ++ "\n"
    ++ err
    ++ "\n"
    ++ "```"
    ++ codeSnippet
    ++ "```"

  update model (Msg.UserGavePrompt errMsg)


let update (model: Model) (msg: Msg) : Model =
  match msg with
  | LoadSystemPrompt ->
    let systemPrompt =
      WASM.HttpClient.request
        "get"
        "http://dark-editor.dlio.localhost:11003/system-prompt"
        []
        Bytes.empty

    match systemPrompt with
    | Ok response ->
      Model
        { isLoading = model.isLoading
          chatHistory = model.chatHistory
          codeSnippets = model.codeSnippets
          tasks = model.tasks
          actions = model.actions
          fnList = model.fnList

          // CLEANUP: update this syntax to { model with systemPrompt = systemPrompt } when we can
          systemPrompt = response.body |> String.fromBytes }
    | Error err -> logErr "Couldn't load system prompt"

  | GetFnBody ->
    let fnBody =
      WASM.HttpClient.request
        "get"
        "http://dark-editor.dlio.localhost:11003/get-fns-name-and-body"
        []
        Bytes.empty

    match fnBody with
    | Ok response ->
      match Json.parse<List<Fn>> (response.body |> String.fromBytes) with
      | Ok fnList ->
        log "success"
        fnList

        Model
          { isLoading = model.isLoading
            chatHistory = model.chatHistory
            codeSnippets = model.codeSnippets
            tasks = model.tasks
            actions = model.actions
            fnList = fnList |> List.map (fun fn -> fn.body)
            systemPrompt = model.systemPrompt }
      | Error err -> logErr "Couldn't parse fnList2"
    | Error err -> logErr "Couldn't load fn body"

  | SaveFnList fn ->
    let fnList =
      WASM.HttpClient.request
        "POST"
        "http://dark-editor.dlio.localhost:11003/save-fns-list"
        []
        (String.toBytes fn)

    match fnList with
    | Ok response ->
      log "success"

      Model
        { isLoading = model.isLoading
          chatHistory = model.chatHistory
          codeSnippets = model.codeSnippets
          tasks = model.tasks
          actions = model.actions
          fnList = model.fnList
          systemPrompt = model.systemPrompt }
    // match Json.parse<List<Fn>> (response.body |> String.fromBytes) with
    // | Ok fnList ->
    //   log "success"
    //   fnList

    //   Model
    //     { isLoading = model.isLoading
    //       chatHistory = model.chatHistory
    //       codeSnippets = model.codeSnippets
    //       tasks = model.tasks
    //       actions = model.actions
    //       fnList = fnList |> List.map (fun fn -> fn.body)
    //       systemPrompt = model.systemPrompt }
    | Error err -> logErr "Couldn't parse fnList2"



  | UserGavePrompt userPrompt ->
    let newModel =
      Model
        { isLoading = true
          systemPrompt = model.systemPrompt
          chatHistory =
            List.append
              model.chatHistory
              [ ChatHistoryItem.UserPrompt (rUnwrap (String.random 5)) userPrompt ]
          codeSnippets = model.codeSnippets
          tasks = model.tasks
          actions = model.actions
          fnList = model.fnList }

    updateStateInJS newModel

    let getTasksPrompt =
      (WASM.HttpClient.request
        "get"
        "http://dark-editor.dlio.localhost:11003/task-creation-prompt"
        []
        Bytes.empty)
      |> rUnwrap
      |> (fun r -> r.body)
      |> String.fromBytes
      |> String.append $"\n\n {userPrompt}"

    // I guess, until we have cmds or something,
    // we have to deal with http calls and such in-line, like here
    let fullPrompt = model.systemPrompt ++ userPrompt

    match openAIcompletion getTasksPrompt, openAIcompletion fullPrompt with
    | Ok apiResponseTasks, Ok apiResponse ->
      let taskIndex = String.indexOf_v0 apiResponseTasks "Tasks:"

      let newtasks =
        match taskIndex with
        | Nothing -> []
        | Just taskIndex ->
          apiResponseTasks
          |> String.slice_v0 taskIndex (String.length apiResponseTasks)
          |> String.split "\n"
          |> List.map (fun line ->
            Task
              { id = (String.random 5) |> rUnwrap
                description = line
                status = Status.Todo })

      let (newCodeSnippets, botResponseParts) =
        (String.split (" " ++ apiResponse) "```")
        |> List.indexedMap (fun i text -> (i, text))
        |> List.fold ([], []) (fun acc curr ->
          let (codeSnippets, responseParts) = acc
          let (i, text) = curr
          let text = String.trim text

          if text == "" then
            acc
          else if i % 2 == 1 then
            let snippetId = rUnwrap (String.random 5)

            let updatedCodeSnippets =
              List.append
                codeSnippets
                [ CodeSnippet
                    { id = snippetId
                      code = text
                      eval = Nothing } ]

            let updatedResponseParts =
              List.append responseParts [ BotResponseItem.CodeSnippet snippetId ]

            (updatedCodeSnippets, updatedResponseParts)
          else
            codeSnippets, (List.append responseParts [ BotResponseItem.Text text ]))

      let newChatItemsItems =
        [ ChatHistoryItem.UserPrompt (rUnwrap (String.random 5)) userPrompt
          ChatHistoryItem.BotResponse (rUnwrap (String.random 5)) botResponseParts ]

      Model
        { isLoading = false
          systemPrompt = model.systemPrompt
          chatHistory = List.append model.chatHistory newChatItemsItems
          codeSnippets = List.append model.codeSnippets newCodeSnippets
          tasks = List.append model.tasks newtasks
          actions = model.actions
          fnList = model.fnList }

    | Error err, _ -> log "error getting tasks " ++ err
    | _, Error err -> log "error getting response " ++ err
    | Error err1, Error err2 ->
      log "error getting tasks and response " ++ err1 ++ " " ++ err2


  | UserRequestedCodeEval id codeSnippet ->
    // split this into 2 groups - the one we're updating, and the rest
    let (snippetToUpdate, otherSnippets) =
      model.codeSnippets |> List.partition (fun cs -> cs.id == id)

    match List.head snippetToUpdate with
    | Nothing -> log "couldn't find snippet"
    | Just snippetToUpdate ->
      let parsedAndSerialized = parseAndSerializeProgram codeSnippet

      match parsedAndSerialized with
      | Ok parsedAndSerialized ->
        let evalPgm = (WASM.Editor.evalUserProgram parsedAndSerialized)

        match evalPgm with
        | Ok evalPgm ->
          evalPgm

          let updatedCodeSnippets =
            List.append
              [ CodeSnippet
                  { id = snippetToUpdate.id
                    code = codeSnippet
                    eval = Just evalPgm } ]
              otherSnippets

          Model
            { isLoading = false
              systemPrompt = model.systemPrompt
              chatHistory = model.chatHistory
              codeSnippets = updatedCodeSnippets
              tasks = model.tasks
              actions = model.actions
              fnList = model.fnList }

        | Error err -> sendError model codeSnippet err

      | Error err -> sendError model codeSnippet err


/// Single point of communicating to JS host
///
/// Let the JS host know that the state has been updated,
/// so that it can update the UI accordingly.
let updateStateInJS (newState: Model) : Result<Unit, String> =
  match Json.serialize<Model> newState with
  | Ok serialized ->
    let _ = WASM.Editor.callJSFunction "self.receiveEvalResult" [ serialized ]
    Ok()
  | Error err ->
    let _ =
      WASM.Editor.callJSFunction "console.warn" [ "Couldn't serialize - " ++ err ]

    Error "Couldn't serialize updated state"


/// Single point of communication from JS host
///
/// Listen for events from the JS host, and update the state accordingly.
let handleEvent (evt: String) : Result<String, String> =
  match Json.parse<Msg> evt with
  | Ok msg ->
    match WASM.Editor.getState<Model> () with
    | Ok currentState ->
      let newState = update currentState msg

      // returns result, but let's assume it worked...
      let _ = WASM.Editor.setState<Model> newState

      updateStateInJS newState

    | Error err ->
      log ("Couldn't get current state:  " ++ err)
      Error "Couldn't get current state"

  | Error err ->
    log ("Couldn't get current state: " ++ err)
    Error("Couldn't parse raw msg: " ++ err)


// Init
let init () : Model =
  let initState =
    let demoSnippet =
      CodeSnippet
        { id = (String.random 5) |> rUnwrap
          code = "let incr (i: Int): Int = i + 1\n\nincr 5"
          eval = Nothing }

    let demoAction =
      [ Action
          { id = (String.random 5) |> rUnwrap
            description = "Demo action"
            status = Status.InProgress } ]

    let chatHistory =
      [ ChatHistoryItem.UserPrompt
          (rUnwrap (String.random 5))
          "Hello, I want a function that increments an integer!"

        ChatHistoryItem.BotResponse
          (rUnwrap (String.random 5))
          [ BotResponseItem.Text "OK - here's some code:"
            BotResponseItem.CodeSnippet demoSnippet.id
            BotResponseItem.Actions demoAction ] ]


    let getFnList =
      let response =
        WASM.HttpClient.request
          "GET"
          "http://dark-editor.dlio.localhost:11003/get-fns-list"
          []
          Bytes.empty

      match response with
      | Ok response ->
        let smth = response.body |> String.fromBytes
        // let test = "\"\"\"[" ++ smth ++ "]\"\"\""
        // log test

        match Json.parse<List<Fn>> smth with
        | Ok fnList ->
          log "success111"
          fnList |> List.map (fun fn -> fn.name)
        | Error err -> logErr "Couldn't parse fnList"
      | Error err -> logErr "Couldn't load fn body"

    Model
      { isLoading = false
        systemPrompt = "Loading..."
        chatHistory = chatHistory
        codeSnippets = [ demoSnippet ]
        tasks = []
        actions = demoAction
        fnList = getFnList }

  updateStateInJS initState

  initState





// // Models to interop with JS host
// // (TODO: wrap this in `module JS = `)
// type BotResponseJS

// type ChatHistoryItemJS =
//   | BotResponse of { author : string; body : String  }

// type ModelForJS =
//   // should be 1:1 with Model, but nice and serializeable
//   { systemPrompt : string
//     state : string
//     code: String
//     chatHistory: List<ChatHistoryItemJS> }

// // TODO: result
// let stateForJS (state: Model) : ModelForJS =
//   { systemPrompt = state.systemPrompt
//     state = match state.State with
//             | WaitingForFirstInput -> "WaitingForFirstInput"
//             | WaitingForUserInput -> "WaitingForUserInput"
//             | BotIsThinking -> "BotIsThinking"
//     chatHistory =
//       state.chatHistory
//       |> List.map (fun item ->
//            { author = match item.author with User -> "User" | Bot -> "Bot"
//              prompt = item.text }) }

// // TODO: result
// let modelFromJS (model: ModelForJS) : Model =
//   { SystemPrompt = Prompt model.systemPrompt
//     State =
//       match model.state with
//       | "WaitingForFirstInput" -> WaitingForFirstInput
//       | "WaitingForUserInput" -> WaitingForUserInput
//       | "BotIsThinking" -> BotIsThinking
//     ChatHistory =
//       model.chatHistory
//       |> List.map (fun item ->
//            { Author = match item.author with "User" -> User | "Bot" -> Bot
//              Prompt = item.text }) }


// type EventJS = { eventName: String; data: String }

// let msgOfJS (msg: EventJS) : Msg =
//   match msg.eventName with
//   | "userGavePrompt" -> UserGavePrompt (Prompt msg.data)
//   | "botResponded" -> BotResponded (Prompt msg.data)
//   | _ -> failwith "Couldn't parse event name"

// let msgToJS (msg: Msg) : EventJS =
//   match msg with
//   | UserGavePrompt prompt ->
//     { eventName = "userGavePrompt"
//       data = match prompt with Prompt p -> p }
//   | BotResponded prompt ->
//     { eventName = "botResponded"
//       data = match prompt with Prompt p -> p }