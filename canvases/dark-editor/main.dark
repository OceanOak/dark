[<HttpHandler("GET", "/get-prompt")>]
let _handler _req =
  let filePath = "/home/dark/app/canvases/dark-editor/prompt.txt"
  let prompt = File.read filePath

  let respBody =
    match prompt with
    | Ok p ->  p
    | Error _ -> Bytes.empty

  Http.response respBody 200



[<HttpHandler("POST", "/save-prompt")>]
let _handler _req =
  let filePath = "/home/dark/app/canvases/dark-editor/prompt.txt"
  let contents =  request.body
  let result = File.write filePath contents

  match result with
  | Ok r ->   Http.response r 200
  | Error e ->  Http.response e 400



type OpenAICompletionRequest = {
  model: String
  max_tokens: Int
  temperature: Float
  prompt : String
}

[<HttpHandler("POST", "/api/gpt4")>]
let _handler _req =
  let apiKey = OPENAI_API_KEY

  let reqBody =
    let prompt = request.body |> String.fromBytes
    let serialized =
      { model= "text-davinci-003"
        max_tokens= 300
        temperature= 0.7
        prompt= prompt}
      |> Json.serialize<OpenAICompletionRequest>
    match serialized with
    | Ok r -> r |> String.toBytes
    | Error e -> Bytes.empty

  let headers =
    [
      ("Authorization", "Bearer " ++ apiKey)
      ("Content-Type", "application/json")
    ]

  let response = HttpClient.request "POST" "https://api.openai.com/v1/completions" headers reqBody

  match response with
  | Ok r -> Http.response r.body 200
  | Error e -> Http.response e 400



[<HttpHandler("GET", "/")>]
let _handler _req =
  let body =
    """
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dark Editor - GPT-4 API</title>
    <style>
      * {
        box-sizing: border-box;
      }
      body,
      html {
        margin: 0;
        height: 100%;
        background-color: #151515;
      }
      .split-container {
        display: flex;
        height: 97%;
        position:relative;
      }
      .logo{
        height: 3rem;
      }
      .left-half,
      .right-half {
        height: 100%;
        flex: 1;
        padding: 20px;
      }
      .left-half {
        background-color: #1B1B1B;
      }
      .right-half {
        background-color: #151515;
      }
      .code-container{
        position: relative;
        margin-top: 40px;
        height: 55%;
      }
      textarea {
        width: 100%;
        height: 80%;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        resize: none;
        background-color: #363738;
        color: white;
         border: none;
      }
      textarea:focus {
        outline: none;
      }
      #output{
        background-color: #282828;
        height: 100%;
      }
      #dark-prompt{
        height: 30%;
        color: #959595;
      }
      #dark-prompt:focus{
        color: #FFFFFF;
      }
      input[type="submit"],
      #save-prompt, #vars-btn, #feedback-btn, #fill-var-btn{
        padding: 8px;
        margin-bottom: 10px;
        font-size: 14px;
        border-radius: 5px;
        border: none;
      }
      #save-prompt, #vars-btn, #feedback-btn {
        width: auto;
      }

      #feedback-btn{
        position: absolute;
        top: 14px;
        right: 22px;
        background-color: #C56AE4;
        color: white;
        cursor: pointer
      }

      #send-btn, #fill-var-btn{
        width:100%;
        background-color: #C56AE4;
        color: white;
        cursor: pointer;
      }
	    #send-btn{
        margin-top: 5px;
      }
      .btns-container{
        position: absolute;
        display: flex;
        top: 14px;
        right: 22px;
      }
      #run-code-btn, #copy-code-btn, #edit-code-btn {
        border: none;
        background-color: transparent;
        cursor: pointer
      }
      form{
        height:60%;
        color: white;
        margin-top: 10px;
      }
      form input {
        width: 100%;
        padding: 10px 0;
        font-size: 16px;
        color: #fff;
        margin-bottom: 30px;
        border: none;
        border-bottom: 1px solid #fff;
        outline: none;
        background: transparent;
      }
      #var-form{
        height:auto;
      }
      p{
        color: #FFFFFF;
      }
      .purple-text{
        color: #ba9bff;
      }
      .privacy-policy{
        background-color: #151515;
        margin:0;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      #privacy-policy-link{
        margin-top: 8px;
        margin-bottom: 8px;
        font-size: 12px;
        color: #888888;
        text-decoration: underline;
        cursor: pointer;
      }
      /* Hide the privacy policy container by default */
      #privacy-policy-container {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 80%;
        max-width: 600px;
        padding: 20px;
        border: none;
        border-radius: 5px;
        background-color: #454545;
        z-index: 9999;
      }
      /* Style the close button */
      .close-btn {
        position: absolute;
        top: 10px;
        right: 20px;
        font-size: 20px;
        font-weight: bold;
        color: #C56AE4;
        cursor: pointer;
      }
      .title{
        color: #C56AE4;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    </style>
  </head>

  <body>
    <div id="container" class="split-container">
      <div class="left-half">
        <form id="gpt4-form">
          <img class="logo" src="https://darklang.com/img/wordmark-dark-transparent.png" alt="Darklang logo">
          <p class="purple-text"> Dark-prompt </p>
          <textarea id="dark-prompt" name="dark-prompt"> </textarea>
          <p class="purple-text"> User-prompt </p>
          <textarea name="prompt" placeholder="Insert prompt here"></textarea>
          <input id="send-btn" type="submit" value="Send" />
        </form>
      </div>
      <div class="right-half">
        <button id="feedback-btn">Feedback</button>
        <div class="code-container">
          <div class="btns-container">
            <button id="copy-code-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 16 16" id="copy"><path fill="#888888" d="M4.00029246,4.08524952 L4,10.5 C4,11.8254834 5.03153594,12.9100387 6.33562431,12.9946823 L6.5,13 L10.9143985,13.000703 C10.7082819,13.5829319 10.1528467,14 9.5,14 L6,14 C4.34314575,14 3,12.6568542 3,11 L3,5.5 C3,4.84678131 3.41754351,4.29108512 4.00029246,4.08524952 Z M11.5,2 C12.3284271,2 13,2.67157288 13,3.5 L13,10.5 C13,11.3284271 12.3284271,12 11.5,12 L6.5,12 C5.67157288,12 5,11.3284271 5,10.5 L5,3.5 C5,2.67157288 5.67157288,2 6.5,2 L11.5,2 Z M11.5,3 L6.5,3 C6.22385763,3 6,3.22385763 6,3.5 L6,10.5 C6,10.7761424 6.22385763,11 6.5,11 L11.5,11 C11.7761424,11 12,10.7761424 12,10.5 L12,3.5 C12,3.22385763 11.7761424,3 11.5,3 Z"></path></svg>
            </button>
            <button id="edit-code-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="#888888" id="edit"><path d="M18.2 24H3.8C1.7 24 0 22.3 0 20.2V5.8C0 3.7 1.7 2 3.8 2H11c.6 0 1 .4 1 1s-.4 1-1 1H3.8C2.8 4 2 4.8 2 5.8v14.3c0 1 .8 1.8 1.8 1.8h14.3c1 0 1.8-.8 1.8-1.8V13c0-.6.4-1 1-1s1 .4 1 1v7.2c.1 2.1-1.6 3.8-3.7 3.8z"></path><path d="M6 19c-.3 0-.5-.1-.7-.3-.2-.2-.3-.6-.3-.9l1-5c0-.2.1-.4.3-.5l12-12c.4-.4 1-.4 1.4 0l4 4c.4.4.4 1 0 1.4l-12 12c-.1.1-.3.2-.5.3l-5 1H6zm1.9-5.5l-.6 3.2 3.2-.6L21.6 5 19 2.4 7.9 13.5z"></path></svg>
            </button>
            <button id="run-code-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="#4caf50" viewBox="0 0 24 24" id="play"><path d="M8 6.82v10.36c0 .79.87 1.27 1.54.84l8.14-5.18c.62-.39.62-1.29 0-1.69L9.54 5.98C8.87 5.55 8 6.03 8 6.82z"></path></svg>
            </button>
          </div>
          <textarea id="output" disabled> </textarea>

        </div>
        <form id="var-form"> </form>
      </div>
    </div>

     <!-- Privacy policy container -->
  <div id="privacy-policy-container">
    <span class="close-btn">&times;</span>
    <span class="title"> Privacy Policy </span>
    <p>
    At experiment1.darklang.com, we take your privacy seriously. We want to be transparent about what data we collect and how we use it.
    We do not look at the variables or output that you submit to our site. We respect your privacy and believe that your data belongs to you.
    However, we do collect and analyze the user prompt and generated code to improve our service and provide better suggestions. This data is only used for the purpose of improving our service, and we do not share it with any third parties.
    By using our site, you agree to the terms of this privacy policy.
  </p>
  </div>
    <div class="privacy-policy">
        <p id="privacy-policy-link">Privacy Policy</p>
    <div>
    <script>
    // Load dark prompt
      window.addEventListener("load", async (event) => {
        try {
            const response = await fetch('/get-prompt');
            const data = await response.text();
            const textarea = document.getElementById("dark-prompt");
            textarea.value = data;
        } catch (error) {
            console.error(error);
        }
    });

      //gpt-call
      document.getElementById("gpt4-form")
        .addEventListener("submit", async event => {
          event.preventDefault();
          const formData = new FormData(event.target);
          const prompt = formData.get("prompt");
          const darkPrompt = formData.get("dark-prompt");
          console.log(darkPrompt + prompt);
          const response = await fetch("/api/gpt4", {
            method: "POST",
            headers: { "Content-Type": "text/plain" },
            body: darkPrompt + prompt,
          });

          if (response.ok) {
            const data = await response.json();
            document.getElementById("output").value = data.choices[0].text;
             const variables = output.value.match(/variables:\n([\s\S]*)/)[1].trim().split('\n').filter(Boolean);
            const form = document.getElementById("var-form");
            form.innerHTML = ''; // Remove existing form elements
            const submitButton = document.createElement('button');
            submitButton.type = 'submit';
            submitButton.textContent = 'Submit';
            submitButton.id = 'fill-var-btn';
            for (let i = 0; i < variables.length; i++) {
              const label = document.createElement('label');
              label.textContent = variables[i];
              const input = document.createElement('input');
              input.name = variables[i];
              form.appendChild(label);
              form.appendChild(input);
            }
            form.appendChild(submitButton);
            form.addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(form);
            for (let pair of formData.entries()) {
              console.log(pair[1]);
            }
          });
          } else {
            window.response = response;
            let text = await response.text();
            document.getElementById("output").value =
              "Error calling the GPT-4 API: " + response.status + " " + response.statusText + " " + text;
          }
        });

        const executeCodeBtn = document.getElementById("run-code-btn");
        executeCodeBtn.addEventListener("click", async () => {
          let userCode = document.getElementById("output");
          console.log("not actually using user code because it's probably invalid")
          userCode = `HttpClient.request "GET" "https://example.com" [] Bytes.empty`
          const requestBody = JSON.stringify({
            userCode: userCode,
            userInput: {} // TODO, untested, untried
          });
          const response = await fetch("/execute-code", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: requestBody,
          });

          if (response.ok) { // check status code
            const evalResponse = await response.text();
            console.log(evalResponse);
          } else {
            const errorMessage = await response.text();
            console.error(errorMessage);
          }
        });
        const copyBtn = document.getElementById("copy-code-btn");
        copyBtn.addEventListener("click", () => {
          const output = document.getElementById("output");
          navigator.clipboard.writeText(output.value).then(() => {
          console.log("Text copied to clipboard");
          }).catch((error) => {
            console.error('Error copying text to clipboard:', error);
          });
        });

        const privacyPolicyLink = document.getElementById('privacy-policy-link');
        const privacyPolicyContainer = document.getElementById('privacy-policy-container');
        const closeBtn = document.querySelector('.close-btn');

        privacyPolicyLink.addEventListener('click', (event) => {
          event.preventDefault();
          const body = document.getElementById("container");
          privacyPolicyContainer.style.display = 'block';
           body.style.filter = 'blur(5px)';
        });

        closeBtn.addEventListener('click', () => {
          const body = document.getElementById("container");
          body.style.filter = 'none';
          privacyPolicyContainer.style.display = 'none';
        });

    </script>
  </body>
</html>
  """

  Http.responseWithHeaders (String.toBytes body) (Dict.fromListOverwritingDuplicates [("Content-Type", "text/html")]) 200




type ExecuteUserCodeRequest =
  { userCode: String; userInput: Dict<String> }

[<HttpHandler("POST", "/execute-code")>]
let _handler _request =
  let parsedReq =
    request.body
    |> String.fromBytes
    |> Json.parse<ExecuteUserCodeRequest>

  match parsedReq with
  | Ok req ->
    // note: this returns a Result<String, String>
    // (upon success, the dval result is serialized into a "dev-friendly representation" string)
    let evalResponse =
      Experiments.parseAndExecuteExpr req.userCode req.userInput

    match evalResponse with
    | Ok resp ->
      Http.responseWithText (String.toBytes resp) 200
    | Error err ->
      let errMessage ="Failed to either parse or eval Dark code: " ++ err
      Http.responseWithText (String.toBytes errMessage) 500
  | Error _ ->
    Http.responseWithText "Failed to parse request" 400