[<HttpHandler("POST", "/get-expr-json")>]
let _handler _req =
  let requestCode = String.fromBytes request.body
  let exprJson = Experiments.parseAndSerializeExpr requestCode

  match exprJson with
  | Ok exprJson -> Http.response (String.toBytes exprJson) 200
  | Err err -> Http.response (String.toBytes err) 500


[<HttpHandler("GET", "/")>]
let _handler _req =
  let body =
    """
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dark WASM demo</title>
    <style>
      body, html { height: 100%; margin: 0; font-family: Arial, sans-serif; }
      .container { display: flex; height: 100%; }
      .left-side, .right-side { flex: 1; padding: 10px; }
      .textarea { width: 100%; height: 90%; resize: none; }
      .submit-button { width: 100%; height: 10%; background-color: #4CAF50; color: white; font-size: 20px; border: none; cursor: pointer; }
      .submit-button:hover { background-color: #45a049; }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="left-side">
        <textarea id="input-textarea" class="textarea">(
  let a = 1 + 2
  List.repeat 10 a
)
</textarea>
        <button id="submit-button" class="submit-button">Submit</button>
      </div>
      <div class="right-side">
        <textarea id="output-textarea" class="textarea" disabled></textarea>
      </div>
    </div>

    <script src="http://dark-serve-blazor-assets.dlio.localhost:11003/blazor.webassembly.js" autostart="false"></script>
    <script>
      function setOutput (message) {
        document.getElementById("output-textarea").value = message;
      }

      // fns exposed for use by WASM'd Dark (Wasm.fsproj)
      function handleDarkResult (message) {
        console.log("handleDarkResult", message);
        setOutput(message);
      }

      // set up Blazor
      Blazor.start({
        loadBootResource: function (type, name, defaultUri, integrity) {
          return `http://dark-serve-blazor-assets.dlio.localhost:11003/${name}`;
        }
      }).then(() => {
        DotNet.invokeMethod("Wasm", "InitializeDarkRuntime");
      });


      document.getElementById("submit-button").addEventListener("click", async () => {
        try {
          const response = await fetch("/get-expr-json", {
            method: "POST",
            body: document.getElementById("input-textarea").value,
          });

          if (!response.ok) {
            throw new Error("Error in parsing the expr and serializing it as JSON");
          }

          const exprJson = await response.text();
          DotNet.invokeMethod("Wasm", "LoadExpr", exprJson);
          DotNet.invokeMethod("Wasm", "EvalExpr");
        } catch (error) {
          setOutput("Error" + error);
          console.error("Error:", error);
        }
      });
    </script>
  </body>
</html>
  """

  Http.responseWithHeaders (String.toBytes body) (Dict.fromListOverwritingDuplicates [("Content-Type", "text/html")]) 200