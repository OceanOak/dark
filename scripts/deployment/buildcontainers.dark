//#!/usr/bin/env darklang

type DockerImageID = { imageID: String }

type DirectoryContents = { files: List<String> }

type DockerBuildResponse = { id: String }

let unwrap (result: Darklang.Stdlib.Result.Result<String, 'a>) : String =
  match result with
  | Ok value -> value
  | Error error -> ()

let main () : Int64 =

  let dockerfiles =
    (Builtin.directoryList "containers")
    |> Darklang.Stdlib.List.map (fun directory ->
      Builtin.directoryList directory)
    |> Darklang.Stdlib.List.flatten
    |> Darklang.Stdlib.List.filter (fun filePath ->
      Darklang.Stdlib.String.endsWith filePath "Dockerfile")

  let imageIds =
    dockerfiles
    |> Darklang.Stdlib.List.map (fun dockerfile ->
      let buildCommand = $"docker build -q -f {dockerfile} ."
      let response = Posix.runCommandWithOutput buildCommand
      let parsedResponse = Builtin.jsonParse<DockerBuildResponse> (response)
      DockerImageID { imageID = parsedResponse.id })

  let jsonImageIds = Builtin.jsonSerialize<List<DockerImageId>> imageIds

  let _ =
    Builtin.fileWrite
      (Darklang.Stdlib.String.toBytes jsonImageIds)
      "ids.json"

  let _ = Builtin.printLine "done"

  6

main ()