#!/bin/bash

# Consolidated VHS Setup Script
# Installs ffmpeg, ttyd, and VHS for terminal recording

set -euo pipefail

echo "🎬 Setting up VHS (Video Home System) for terminal recording"
echo "==========================================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check current status
echo -e "${BLUE}📋 Checking current installation status...${NC}"

# Check VHS
if command -v vhs &> /dev/null; then
    echo -e "${GREEN}✓${NC} VHS is installed: $(vhs --version)"
    VHS_INSTALLED=true
else
    echo -e "${RED}✗${NC} VHS is not installed"
    VHS_INSTALLED=false
fi

# Check ffmpeg
if command -v ffmpeg &> /dev/null; then
    echo -e "${GREEN}✓${NC} ffmpeg is installed: $(ffmpeg -version | head -1)"
    FFMPEG_INSTALLED=true
else
    echo -e "${RED}✗${NC} ffmpeg is not installed"
    FFMPEG_INSTALLED=false
fi

# Check ttyd
if command -v ttyd &> /dev/null; then
    echo -e "${GREEN}✓${NC} ttyd is installed: $(ttyd --version)"
    TTYD_INSTALLED=true
else
    echo -e "${YELLOW}⚠${NC}  ttyd is not installed (optional, but recommended)"
    TTYD_INSTALLED=false
fi

echo ""

# If everything is installed, exit early
if [ "$VHS_INSTALLED" = true ] && [ "$FFMPEG_INSTALLED" = true ] && [ "$TTYD_INSTALLED" = true ]; then
    echo -e "${GREEN}🎉 All components are already installed!${NC}"
    echo ""
    echo -e "${BLUE}📖 Quick start:${NC}"
    echo "  vhs < example.tape"
    echo "  Documentation: https://github.com/charmbracelet/vhs"
    exit 0
fi

# Detect OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
    VERSION_ID=${VERSION_ID:-""}
else
    echo -e "${RED}❌ Cannot detect Linux distribution${NC}"
    exit 1
fi

echo -e "${BLUE}🔧 Detected OS: $OS${NC}"
echo ""

# Function to install ffmpeg
install_ffmpeg() {
    echo -e "${BLUE}📦 Installing ffmpeg...${NC}"
    
    case $OS in
        ubuntu|debian)
            echo "Installing ffmpeg on Ubuntu/Debian..."
            sudo apt update
            sudo apt install -y ffmpeg
            ;;
        fedora)
            echo "Installing ffmpeg on Fedora..."
            sudo dnf install -y ffmpeg
            ;;
        centos|rhel)
            echo "Installing ffmpeg on CentOS/RHEL..."
            sudo yum install -y epel-release
            sudo yum install -y ffmpeg
            ;;
        arch)
            echo "Installing ffmpeg on Arch Linux..."
            sudo pacman -S ffmpeg
            ;;
        alpine)
            echo "Installing ffmpeg on Alpine Linux..."
            sudo apk add ffmpeg
            ;;
        *)
            echo -e "${RED}❌ Unsupported distribution: $OS${NC}"
            echo "Please install ffmpeg manually from: http://ffmpeg.org"
            return 1
            ;;
    esac
    
    if command -v ffmpeg &> /dev/null; then
        echo -e "${GREEN}✓ ffmpeg installed successfully!${NC}"
        return 0
    else
        echo -e "${RED}❌ ffmpeg installation failed${NC}"
        return 1
    fi
}

# Function to install ttyd
install_ttyd() {
    echo -e "${BLUE}📦 Installing ttyd...${NC}"
    
    case $OS in
        ubuntu|debian)
            echo "Installing ttyd on Ubuntu/Debian..."
            sudo apt update
            sudo apt install -y ttyd
            ;;
        fedora)
            echo "Installing ttyd on Fedora..."
            sudo dnf install -y ttyd
            ;;
        centos|rhel)
            echo "Installing ttyd on CentOS/RHEL..."
            sudo yum install -y epel-release
            sudo yum install -y ttyd || {
                echo "ttyd not available in repos, skipping..."
                return 0
            }
            ;;
        arch)
            echo "Installing ttyd on Arch Linux..."
            sudo pacman -S ttyd
            ;;
        alpine)
            echo "Installing ttyd on Alpine Linux..."
            sudo apk add ttyd
            ;;
        *)
            echo -e "${YELLOW}⚠${NC}  Unsupported distribution for ttyd: $OS"
            echo "Skipping ttyd installation (optional component)"
            return 0
            ;;
    esac
    
    if command -v ttyd &> /dev/null; then
        echo -e "${GREEN}✓ ttyd installed successfully!${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠${NC}  ttyd installation failed (non-critical)"
        return 0
    fi
}

# Function to install VHS
install_vhs() {
    echo -e "${BLUE}📦 Installing VHS...${NC}"
    
    # Try different installation methods
    if command -v brew &> /dev/null; then
        echo "Installing VHS via Homebrew..."
        brew install vhs
    elif command -v go &> /dev/null; then
        echo "Installing VHS via Go..."
        go install github.com/charmbracelet/vhs@latest
    else
        echo "Installing VHS via direct download..."
        
        # Determine architecture
        case $(uname -m) in
            arm64|aarch64) ARCH="arm64";;
            x86_64) ARCH="amd64";;
            *) 
                echo -e "${RED}❌ Unsupported architecture: $(uname -m)${NC}"
                return 1
                ;;
        esac
        
        # Get latest version
        echo "Getting latest VHS release..."
        LATEST_VERSION=$(curl -s https://api.github.com/repos/charmbracelet/vhs/releases/latest | grep -o '"tag_name": "[^"]*' | grep -o '[^"]*$')
        
        if [ -z "$LATEST_VERSION" ]; then
            echo -e "${RED}❌ Could not fetch latest VHS version${NC}"
            return 1
        fi
        
        # Download and install
        URL="https://github.com/charmbracelet/vhs/releases/download/${LATEST_VERSION}/vhs_${LATEST_VERSION:1}_$(uname -s)_${ARCH}.tar.gz"
        
        echo "Downloading VHS from $URL"
        if command -v wget &> /dev/null; then
            wget -O vhs.tar.gz "$URL"
        elif command -v curl &> /dev/null; then
            curl -L -o vhs.tar.gz "$URL"
        else
            echo -e "${RED}❌ Neither wget nor curl found${NC}"
            return 1
        fi
        
        tar -xzf vhs.tar.gz
        
        # Find and install VHS binary
        if [ -f vhs ]; then
            sudo mv vhs /usr/local/bin/
            sudo chmod +x /usr/local/bin/vhs
        else
            echo -e "${RED}❌ VHS binary not found in download${NC}"
            return 1
        fi
        
        rm -f vhs.tar.gz
    fi
    
    if command -v vhs &> /dev/null; then
        echo -e "${GREEN}✓ VHS installed successfully!${NC}"
        return 0
    else
        echo -e "${RED}❌ VHS installation failed${NC}"
        return 1
    fi
}

# Install missing components
if [ "$FFMPEG_INSTALLED" = false ]; then
    if ! install_ffmpeg; then
        echo -e "${RED}❌ Failed to install ffmpeg - VHS requires this dependency${NC}"
        exit 1
    fi
    echo ""
fi

if [ "$TTYD_INSTALLED" = false ]; then
    install_ttyd
    echo ""
fi

if [ "$VHS_INSTALLED" = false ]; then
    if ! install_vhs; then
        echo -e "${RED}❌ Failed to install VHS${NC}"
        exit 1
    fi
    echo ""
fi

# Final verification
echo -e "${BLUE}🔍 Final verification...${NC}"

# Verify VHS
if command -v vhs &> /dev/null; then
    echo -e "${GREEN}✅ VHS: $(vhs --version)${NC}"
else
    echo -e "${RED}❌ VHS installation verification failed${NC}"
    exit 1
fi

# Verify ffmpeg
if command -v ffmpeg &> /dev/null; then
    echo -e "${GREEN}✅ ffmpeg: $(ffmpeg -version | head -1)${NC}"
else
    echo -e "${RED}❌ ffmpeg verification failed${NC}"
    exit 1
fi

# Check ttyd (optional)
if command -v ttyd &> /dev/null; then
    echo -e "${GREEN}✅ ttyd: $(ttyd --version)${NC}"
else
    echo -e "${YELLOW}⚠${NC}  ttyd not available (optional)"
fi

echo ""
echo -e "${GREEN}🎉 VHS setup complete!${NC}"
echo ""
echo -e "${BLUE}📖 Quick start:${NC}"
echo "  Create a tape file (example.tape):"
echo "  vhs < example.tape"
echo ""
echo "  Run CLI integration tests:"
echo "  ./tests/integration/cli/run-integration-tests.sh"
echo ""
echo -e "${BLUE}📚 Documentation:${NC}"
echo "  https://github.com/charmbracelet/vhs"
echo ""
echo -e "${BLUE}🎬 Your VHS environment is ready for terminal recording!${NC}"
