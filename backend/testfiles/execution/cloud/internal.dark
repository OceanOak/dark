// ---------------
// Misc
// ---------------
module Documentation =
  (Stdlib.List.length_v0 (Builtin.languageToolsAllBuiltinFns ()) > 100L) = true

  ((Builtin.languageToolsAllBuiltinFns ())
   |> Stdlib.List.findFirst (fun f -> f.name.name == "int64Add")
   |> Builtin.unwrap
   |> (fun f -> f.parameters)) =
     [ PACKAGE.Darklang.LanguageTools.BuiltinFunctionParameter { name = "a"; ``type`` = PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeReference.TInt64 }
       PACKAGE.Darklang.LanguageTools.BuiltinFunctionParameter { name = "b"; ``type`` = PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeReference.TInt64 } ]


module Infra =
  // correct number of tables
  Stdlib.Dict.size_v0 (Builtin.darkInternalInfraGetAndLogTableSizes_v0 ()) = 15L


  // server build hash
  (match Builtin.darkInternalInfraServerBuildHash_v0 () with
   // in local dev, the value is "dev"
   | "dev" -> true

   // in ci, "circleci"
   | "circleci" -> true

   // otherwise it's the first 7 chars of the git hash
   | hash -> (Stdlib.String.length hash) == 7L) = true


module Canvas =
  // Test creating a new canvas - just check it we can call `owner` on it
  (let owner = (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasOwner
   let newID = Builtin.darkInternalCanvasCreate owner "test"
   Builtin.darkInternalCanvasOwner newID == owner) = true


module Domains =
  module Roundtrip =
    ((Builtin.testGetCanvasID ())
     |> Builtin.darkInternalCanvasDomainGet
     |> Stdlib.List.head
     |> Builtin.unwrap
     |> Builtin.darkInternalCanvasDomainToCanvasID) =
      Stdlib.Result.Result.Ok(Builtin.testGetCanvasID ())

  module Errors =
    Builtin.darkInternalCanvasDomainGet (
      (Stdlib.Uuid.parse_v0 "7d9e5495-b068-4364-a2cc-3633ab4d13e6") |> Builtin.unwrap
    ) = []

    Builtin.darkInternalCanvasDomainToCanvasID "not-a-real-domain" =
      Stdlib.Result.Result.Error "Canvas not found"


module Secrets =
  // getAll empty
  (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasSecretGetAll = []

  // insert
  (let _ = (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasSecretInsert "SECRET" "VALUE" 0
   (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasSecretGetAll) =
     [ PACKAGE.Darklang.Internal.Canvas.Secret
         { name = "SECRET"; value = "VALUE"; version = 0 } ]

  // insert twice
  (let _ =
    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasSecretInsert "SECRET" "VALUE" 1
   // Does not work
   Builtin.darkInternalCanvasSecretInsert
     (Builtin.testGetCanvasID ())
     "SECRET"
     "OTHERVALUE"
     1
  ) = Stdlib.Result.Result.Error "Error inserting secret"

  // delete
  Builtin.darkInternalCanvasSecretDelete (Builtin.testGetCanvasID ()) "SECRET" 2 = ()

  // delete
  (let canvasID = Builtin.testGetCanvasID ()
   let _ = Builtin.darkInternalCanvasSecretInsert canvasID "SECRET" "VALUE" 3
   let _ = Builtin.darkInternalCanvasSecretDelete canvasID "SECRET" 3
   Builtin.darkInternalCanvasSecretGetAll canvasID) = []


module F404s =
  1L = 1L
  // TODO
  // DarkInternal.Canvas.F404.recent (Test.getCanvasID ()) = []
  // DarkInternal.Canvas.F404.delete (Test.getCanvasID ()) "" "" "" = ()


module Toplevels =
  module WithDB =
    type X = { x: String }

    [<DB>]
    type TLXDB = X

    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDBUnlocked
    |> Stdlib.List.length = 1L

  module NoDB =
    (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked = []

    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDeleteToplevelForever 1UL = false


module UnlockedDB =
  // none
  (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked = []

  module WithDB =
    type X = { x: String }

    [<DB>]
    type UXDB = X
    // one
    (Builtin.testGetCanvasID ())
    |> Builtin.darkInternalCanvasDBUnlocked
    |> Stdlib.List.length = 1L

    // one but locked
    (let _ = Builtin.dbSet (X { x = "str" }) "test" UXDB
     (Builtin.testGetCanvasID ()) |> Builtin.darkInternalCanvasDBUnlocked) = []

module Queue =
  // TODO: DarkInternal.Canvas.Queue.count
  // TODO: DarkInternal.Canvas.Queue.SchedulingRule.list
  // TODO: DarkInternal.Infra.SchedulingRule.Block.insert
  // TODO: DarkInternal.Infra.SchedulingRule.Block.delete
  // TODO: DarkInternal.Infra.SchedulingRule.list
  [] = []