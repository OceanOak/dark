Stdlib.Int64.absoluteValue_v0 -5L = 5L
Stdlib.Int64.absoluteValue_v0 5L = 5L

Stdlib.Int64.max_v0 5L 6L = 6L
Stdlib.Int64.max_v0 10L 1L = 10L
Stdlib.Int64.max_v0 -5L 6L = 6L
Stdlib.Int64.max_v0 -100L -20000L = -100L
Stdlib.Int64.max_v0 250L -26L = 250L

Stdlib.Int64.min_v0 5L 6L = 5L
Stdlib.Int64.min_v0 50L -10L = -10L
Stdlib.Int64.min_v0 -5L 6L = -5L
Stdlib.Int64.min_v0 -100L -20000L = -20000L
Stdlib.Int64.min_v0 250L -26L = -26L

Stdlib.Int64.clamp_v0 -5L -2L 5L = -2L // in bounds
Stdlib.Int64.clamp_v0 -3L -2L 1L = -2L // below min
Stdlib.Int64.clamp_v0 -5L 1L 1L = 1L // at limit
Stdlib.Int64.clamp_v0 1L 2L 1L = 1L // above max
Stdlib.Int64.clamp_v0 3L 0L 2L = 2L //  below in
Stdlib.Int64.clamp_v0 -100L 0L 0L = 0L
Stdlib.Int64.clamp_v0 100L 0L 0L = 0L
Stdlib.Int64.clamp_v0 -100L 0L -1L = -1L
Stdlib.Int64.clamp_v0 100L 0L -1L = 0L
Stdlib.Int64.clamp_v0 -100L -1L 0L = -1L
Stdlib.Int64.clamp_v0 100L -1L 0L = 0L
Stdlib.Int64.clamp_v0 -100L 1L 0L = 0L
Stdlib.Int64.clamp_v0 100L 1L 0L = 1L
Stdlib.Int64.clamp_v0 -2147483647L 250L -26L = -26L
Stdlib.Int64.clamp_v0 2147483647L 250L -26L = 250L

Stdlib.Int64.negate_v0 -5L = 5L
Stdlib.Int64.negate_v0 5L = -5L
Stdlib.Int64.negate_v0 0L = 0L
Stdlib.Int64.negate_v0 -0L = 0L

Stdlib.Int64.remainder_v0 15L 6L = Stdlib.Result.Result.Ok 3L
Stdlib.Int64.remainder_v0 20L 8L = Stdlib.Result.Result.Ok 4L
Stdlib.Int64.remainder_v0 -20L 8L = Stdlib.Result.Result.Ok -4L
Stdlib.Int64.remainder_v0 -20L -8L = Stdlib.Result.Result.Ok -4L
Stdlib.Int64.remainder_v0 -15L 6L = Stdlib.Result.Result.Ok -3L
Stdlib.Int64.remainder_v0 5L 0L = Builtin.testDerrorMessage "Cannot divide by 0"

(Stdlib.List.map_v0
  (Stdlib.List.range_v0 -5L 5L)
  (fun v -> Stdlib.Int64.remainder_v0 v -4L)
 ) =  [ Stdlib.Result.Result.Ok -1L
        Stdlib.Result.Result.Ok 0L
        Stdlib.Result.Result.Ok -3L
        Stdlib.Result.Result.Ok -2L
        Stdlib.Result.Result.Ok -1L
        Stdlib.Result.Result.Ok 0L
        Stdlib.Result.Result.Ok 1L
        Stdlib.Result.Result.Ok 2L
        Stdlib.Result.Result.Ok 3L
        Stdlib.Result.Result.Ok 0L
        Stdlib.Result.Result.Ok 1L ]

Stdlib.List.map_v0 (Stdlib.List.range_v0 -5L 5L) (fun v ->
  Stdlib.Int64.remainder_v0 v 4L) = [ Stdlib.Result.Result.Ok -1L
                                      Stdlib.Result.Result.Ok 0L
                                      Stdlib.Result.Result.Ok -3L
                                      Stdlib.Result.Result.Ok -2L
                                      Stdlib.Result.Result.Ok -1L
                                      Stdlib.Result.Result.Ok 0L
                                      Stdlib.Result.Result.Ok 1L
                                      Stdlib.Result.Result.Ok 2L
                                      Stdlib.Result.Result.Ok 3L
                                      Stdlib.Result.Result.Ok 0L
                                      Stdlib.Result.Result.Ok 1L ]

Stdlib.Int64.mod_v0 15L 5L = 0L
Stdlib.Int64.mod_v0 15L 6L = 3L
Stdlib.Int64.mod_v0 0L 15L = 0L
Stdlib.Int64.mod_v0 -1L 2L = 1L
Stdlib.Int64.mod_v0 -754L 53L = 41L
Stdlib.Int64.mod_v0 9999999999998L 3L = 2L

Stdlib.Int64.mod_v0 5L 0L = Builtin.testDerrorMessage "Cannot evaluate modulus against 0"

Stdlib.Int64.mod_v0 5L -5L = Builtin.testDerrorMessage "Cannot evaluate modulus against a negative number"

Stdlib.List.map_v0 (Stdlib.List.range_v0 -5L 5L) (fun v ->
 Stdlib.Int64.mod_v0 v 4L) = [ 3L; 0L; 1L; 2L; 3L; 0L; 1L; 2L; 3L; 0L; 1L ]

15L % 5L = 0L
5L % 0L = Builtin.testDerrorMessage "Cannot evaluate modulus against 0"
5L % -5L = Builtin.testDerrorMessage "Cannot evaluate modulus against a negative number"

Stdlib.List.map_v0 (Stdlib.List.range_v0 -5L 5L) (fun v -> v % 4L) =
  [ 3L; 0L; 1L; 2L; 3L; 0L; 1L; 2L; 3L; 0L; 1L ]

Stdlib.Int64.power_v0 8L 5L = 32768L
Stdlib.Int64.power_v0 0L 1L = 0L
Stdlib.Int64.power_v0 0L 0L = 1L
Stdlib.Int64.power_v0 1L 0L = 1L
Stdlib.Int64.power_v0 1000L 0L = 1L
Stdlib.Int64.power_v0 -8L 5L = -32768L
Stdlib.Int64.power_v0 200L 20L = Builtin.testDerrorMessage "Encountered out-of-range value for type of Int"
Stdlib.Int64.power_v0 200L 7L = 12800000000000000L
Stdlib.Int64.power_v0 1L 2147483649L = 1L
Stdlib.Int64.power_v0 -1L 2147483649L = -1L
Stdlib.Int64.power_v0 2L -3L = Builtin.testDerrorMessage "Cannot raise integer to a negative exponent"

5L ^ 2L = 25L
-8L ^ 5L = -32768L
50L ^ 2L = 2500L

Stdlib.Int64.greaterThan_v0 20L 1L = true
20L > 1L = true

0L >= 1L = false
1L >= 0L = true
6L >= 1L = true
6L >= 8L = false
-5L >= -20L = true
-20L >= -1L = false
-20L >= -20L = true

Stdlib.Int64.greaterThanOrEqualTo_v0 0L 1L = false
Stdlib.Int64.greaterThanOrEqualTo_v0 1L 0L = true
Stdlib.Int64.greaterThanOrEqualTo_v0 6L 1L = true
Stdlib.Int64.greaterThanOrEqualTo_v0 6L 8L = false
Stdlib.Int64.greaterThanOrEqualTo_v0 -5L -20L = true
Stdlib.Int64.greaterThanOrEqualTo_v0 -20L -1L = false
Stdlib.Int64.greaterThanOrEqualTo_v0 -20L -20L = true

6L <= 8L = true
10L <= 1L = false
0L <= 1L = true
1L <= 0L = false
-100L <= 22544L = true
-999L <= -9999L = false
-8888L <= -8888L = true

Stdlib.Int64.lessThanOrEqualTo_v0 6L 8L = true
Stdlib.Int64.lessThanOrEqualTo_v0 10L 1L = false
Stdlib.Int64.lessThanOrEqualTo_v0 0L 1L = true
Stdlib.Int64.lessThanOrEqualTo_v0 1L 0L = false
Stdlib.Int64.lessThanOrEqualTo_v0 -100L 22544L = true
Stdlib.Int64.lessThanOrEqualTo_v0 -999L -9999L = false
Stdlib.Int64.lessThanOrEqualTo_v0 -8888L -8888L = true

Stdlib.Int64.lessThan_v0 6L 8L = true
Stdlib.Int64.lessThan_v0 10L 1L = false
Stdlib.Int64.lessThan_v0 0L 1L = true
Stdlib.Int64.lessThan_v0 1L 0L = false
Stdlib.Int64.lessThan_v0 -100L 22544L = true
Stdlib.Int64.lessThan_v0 -999L -9999L = false
Stdlib.Int64.lessThan_v0 -8888L -8888L = false
6L < 8L = true
10L < 1L = false
0L < 1L = true
1L < 0L = false
-100L < 22544L = true
-999L < -9999L = false
-8888L < -8888L = false

Stdlib.Int64.sqrt_v0 4L = 2.0
Stdlib.Int64.sqrt_v0 100L = 10.0
Stdlib.Int64.sqrt_v0 86L = 9.273618495495704

Stdlib.Int64.toFloat_v0 2L = 2.0
Stdlib.Int64.toFloat_v0 955656L = 955656.0
Stdlib.Int64.toFloat_v0 -10L = -10.0

Stdlib.Int64.add_v0 10L 9L = 19L
Stdlib.Int64.add_v0 88L 9L = 97L
Stdlib.Int64.add_v0 -1L 2L = 1L
Stdlib.Int64.add_v0 1L 0L = 1L
Stdlib.Int64.add_v0 -55L 55L = 0L
Stdlib.Int64.add_v0 9223372036854775806L 1L = 9223372036854775807L

// Overflow tests
Stdlib.Int64.add_v0 9223372036854775807L 1L = -9223372036854775808L
Stdlib.Int64.add_v0 55L 9223372036854775807L = -9223372036854775754L
Stdlib.Int64.add_v0 (-9223372036854775808L) (-1L) = 9223372036854775807L

-2000L + 1950L = -50L
-1993L + 2000L = 7L

Stdlib.Int64.subtract_v0 10L 9L = 1L
Stdlib.Int64.subtract_v0 88L 9L = 79L
Stdlib.Int64.subtract_v0 0L 1L = -1L
Stdlib.Int64.subtract_v0 1L 0L = 1L
Stdlib.Int64.subtract_v0 -55L -55L = 0L

2000L - 1950L = 50L
-1993L - -2000L = 7L

Stdlib.Int64.multiply_v0 8L 8L = 64L
Stdlib.Int64.multiply_v0 5145L 5145L = 26471025L

// 1L * 1.0 = Builtin.testDerrorMessage
//   "int64Multiply's 2nd argument (`b`) should be an Int64. However, a Float (1.0) was passed instead.

// Expected: (b: Int64)
// Actual: a Float: 1.0"

8L * 8L = 64L
Stdlib.Int64.divide_v0 10L 5L = 2L
Stdlib.Int64.divide_v0 17L 3L = 5L
Stdlib.Int64.divide_v0 -8L 5L = -1L
Stdlib.Int64.divide_v0 0L 1L = 0L

Stdlib.Int64.divide_v0 1L 0L = Builtin.testDerrorMessage "Cannot divide by 0"

(Stdlib.List.range_v0 1L 5L)
|> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 1L 2L)
|> Stdlib.List.map_v0 (fun x -> (x >= 1L) && (x <= 2L)) = [ true; true; true; true; true ]

(Stdlib.List.range_v0 1L 5L)
|> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 10L 20L)
|> Stdlib.List.map_v0 (fun x -> (x >= 10L) && (x <= 20L)) = [ true; true; true; true; true ]

(Stdlib.List.range_v0 1L 5L)
|> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 2L 1L)
|> Stdlib.List.map_v0 (fun x -> (x >= 1L) && (x <= 2L)) = [ true; true; true; true; true ]

(Stdlib.List.range_v0 1L 5L)
|> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 20L 10L)
|> Stdlib.List.map_v0 (fun x -> (x >= 10L) && (x <= 20L)) = [ true; true; true; true; true ]

((Stdlib.List.range_v0 1L 100L)
 |> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 0L 1L)
 |> Stdlib.List.unique_v0) = [ 0L; 1L ]

((Stdlib.List.range_v0 1L 100L)
 |> Stdlib.List.map_v0 (fun x -> Stdlib.Int64.random 0L 2L)
 |> Stdlib.List.unique_v0) = [ 0L; 1L; 2L ]

Stdlib.Int64.sum_v0 [ 1L; 2L ] = 3L


// parses ok
Stdlib.Int64.parse_v0 "0" = Stdlib.Result.Result.Ok 0L
Stdlib.Int64.parse_v0 "1" = Stdlib.Result.Result.Ok 1L
Stdlib.Int64.parse_v0 " 1" = Stdlib.Result.Result.Ok 1L
Stdlib.Int64.parse_v0 "1 " = Stdlib.Result.Result.Ok 1L
Stdlib.Int64.parse_v0 "+1" = Stdlib.Result.Result.Ok 1L
Stdlib.Int64.parse_v0 " +1 " = Stdlib.Result.Result.Ok 1L
Stdlib.Int64.parse_v0 "-1" = Stdlib.Result.Result.Ok -1L
Stdlib.Int64.parse_v0 "078" = Stdlib.Result.Result.Ok 78L // "octal" format ignored
Stdlib.Int64.parse_v0 "-00001" = Stdlib.Result.Result.Ok -1L
Stdlib.Int64.parse_v0 "-10001" = Stdlib.Result.Result.Ok -10001L

// testing upper and lower bounds
Stdlib.Int64.parse_v0 "-4611686018427387904" = Stdlib.Result.Result.Ok -4611686018427387904L // int63 lower limit
Stdlib.Int64.parse_v0 "-4611686018427387905" = Stdlib.Result.Result.Ok -4611686018427387905L // past the int63 upper limit
Stdlib.Int64.parse_v0 "-9223372036854775808" = Stdlib.Result.Result.Ok -9223372036854775808L // .NET lower limit
Stdlib.Int64.parse_v0 "-9223372036854775809" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.OutOfRange
Stdlib.Int64.parse_v0 "4611686018427387903" = Stdlib.Result.Result.Ok 4611686018427387903L // int63 upper limit
Stdlib.Int64.parse_v0 "4611686018427387904" = Stdlib.Result.Result.Ok 4611686018427387904L // past the int63 upper limit
Stdlib.Int64.parse_v0 "9223372036854775807" = Stdlib.Result.Result.Ok 9223372036854775807L // .NET upper limit
Stdlib.Int64.parse_v0 "9223372036854775808" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.OutOfRange

// bad format
Stdlib.Int64.parse_v0 "1 2 3" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "+ 1" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "- 1" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "0xA" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "0x123" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "0b0100" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "pi" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "Darklang.Stdlib.Math.pi" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "1.23E+04" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "1I" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "one" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat
Stdlib.Int64.parse_v0 "XIV" = Stdlib.Result.Result.Error Stdlib.Int64.ParseError.BadFormat


Stdlib.Int64.toString 0L = "0"
Stdlib.Int64.toString 1L = "1"
Stdlib.Int64.toString -1L = "-1"
Stdlib.Int64.toString -4611686018427387904L = "-4611686018427387904" // int63 lower limit
Stdlib.Int64.toString -4611686018427387905L = "-4611686018427387905" // past the int63 upper limit"
Stdlib.Int64.toString -9223372036854775808L = "-9223372036854775808" // .NET lower limit
Stdlib.Int64.toString 4611686018427387903L = "4611686018427387903" // int63 upper limit
Stdlib.Int64.toString 4611686018427387904L = "4611686018427387904" // past the int63 upper limit
Stdlib.Int64.toString 9223372036854775807L = "9223372036854775807" // .NET upper limit

Stdlib.Int64.fromInt8_v0 0y = 0L
Stdlib.Int64.fromInt8_v0 1y = 1L
Stdlib.Int64.fromInt8_v0 127y = 127L
Stdlib.Int64.fromInt8_v0 -128y = -128L

Stdlib.Int64.fromUInt8_v0 0uy = 0L
Stdlib.Int64.fromUInt8_v0 1uy = 1L
Stdlib.Int64.fromUInt8_v0 255uy = 255L

Stdlib.Int64.fromInt16_v0 0s = 0L
Stdlib.Int64.fromInt16_v0 1s = 1L
Stdlib.Int64.fromInt16_v0 32767s = 32767L
Stdlib.Int64.fromInt16_v0 -32768s = -32768L

Stdlib.Int64.fromUInt16_v0 0us = 0L
Stdlib.Int64.fromUInt16_v0 1us = 1L
Stdlib.Int64.fromUInt16_v0 65535us = 65535L

Stdlib.Int64.fromInt32_v0 0l = 0L
Stdlib.Int64.fromInt32_v0 1l = 1L
Stdlib.Int64.fromInt32_v0 2147483647l = 2147483647L
Stdlib.Int64.fromInt32_v0 -2147483648l = -2147483648L

Stdlib.Int64.fromUInt32_v0 0ul = 0L
Stdlib.Int64.fromUInt32_v0 1ul = 1L
Stdlib.Int64.fromUInt32_v0 4294967295ul = 4294967295L

Stdlib.Int64.fromUInt64_v0 0UL = Stdlib.Option.Option.Some 0L
Stdlib.Int64.fromUInt64_v0 1UL = Stdlib.Option.Option.Some 1L
Stdlib.Int64.fromUInt64_v0 9223372036854775807UL = Stdlib.Option.Option.Some 9223372036854775807L
Stdlib.Int64.fromUInt64_v0 18446744073709551615UL = Stdlib.Option.Option.None

Stdlib.Int64.fromInt128_v0 0Q = Stdlib.Option.Option.Some 0L
Stdlib.Int64.fromInt128_v0 1Q = Stdlib.Option.Option.Some 1L
Stdlib.Int64.fromInt128_v0 9223372036854775807Q = Stdlib.Option.Option.Some 9223372036854775807L
Stdlib.Int64.fromInt128_v0 -9223372036854775808Q = Stdlib.Option.Option.Some -9223372036854775808L
Stdlib.Int64.fromInt128_v0 9223372036854775808Q = Stdlib.Option.Option.None
Stdlib.Int64.fromInt128_v0 -9223372036854775809Q = Stdlib.Option.Option.None

Stdlib.Int64.fromUInt128_v0 0Z = Stdlib.Option.Option.Some 0L
Stdlib.Int64.fromUInt128_v0 1Z = Stdlib.Option.Option.Some 1L
Stdlib.Int64.fromUInt128_v0 9223372036854775807Z = Stdlib.Option.Option.Some 9223372036854775807L
Stdlib.Int64.fromUInt128_v0 18446744073709551615Z = Stdlib.Option.Option.None