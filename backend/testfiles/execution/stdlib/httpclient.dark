// Most of the httpclient tests are in testfiles/httpclient
// , but we test a few more explicit cases here.


// Tests that don't use the internet
module NoInternet =
  Stdlib.HttpClient.ContentType.form_v0 = ("content-type", "application/x-www-form-urlencoded")
  Stdlib.HttpClient.ContentType.json_v0 = ("content-type", "application/json")
  Stdlib.HttpClient.ContentType.plainText_v0 = ("content-type", "text/plain; charset=utf-8")
  Stdlib.HttpClient.ContentType.html_v0 = ("content-type", "text/html; charset=utf-8")

  Stdlib.HttpClient.bearerToken "YWxhZGRpbjpvcGVuc2VzYW1l" = (("authorization", "bearer YWxhZGRpbjpvcGVuc2VzYW1l"))

  Stdlib.HttpClient.basicAuth "username" "password" = Stdlib.Result.Result.Ok(("authorization", "basic dXNlcm5hbWU6cGFzc3dvcmQ="))
  Stdlib.HttpClient.basicAuth "" "" = Stdlib.Result.Result.Ok(("authorization", "basic Og=="))
  Stdlib.HttpClient.basicAuth "" "-" = Stdlib.Result.Result.Ok(("authorization", "basic Oi0="))
  Stdlib.HttpClient.basicAuth ":" "" = Stdlib.Result.Result.Ok(("authorization", "basic Ojo="))
  Stdlib.HttpClient.basicAuth "" ":" = Stdlib.Result.Result.Ok(("authorization", "basic Ojo="))
  Stdlib.HttpClient.basicAuth "hello>" "world" = Stdlib.Result.Result.Ok(("authorization", "basic aGVsbG8+Ondvcmxk"))
  Stdlib.HttpClient.basicAuth "hello" "world?" = Stdlib.Result.Result.Ok(("authorization", "basic aGVsbG86d29ybGQ/"))

  Stdlib.HttpClient.basicAuth "-" "" = Stdlib.Result.Result.Error "Username cannot contain a hyphen"



// Tests that try to make requests to the internet

// ... but first, some helpers
let get (url: String) (headers: List<String * String>): Stdlib.Result.Result<Stdlib.HttpClient.Response, Stdlib.HttpClient.RequestError> =
  Stdlib.HttpClient.get url headers

let errInvalidHost = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.InvalidHost))
let errInvalidUri = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.InvalidUri))
let errInvalidRequest = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.InvalidRequest))

let errNetworkError = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.NetworkError)

let errBadHeaderEmptyKey = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadHeader(Stdlib.HttpClient.BadHeader.EmptyKey))
let errBadMethod = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadMethod)

let errUnsupportedProtocol = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.UnsupportedProtocol))

// basic requests work
((get "https://httpbin.org" []) |> Stdlib.Result.map (fun r -> r.statusCode)) = Stdlib.Result.Result.Ok 200L
// TODO: this is a flaky test â€“ replace httpbin.org call with a local server
// ((get "http://httpbin.org" []) |> Stdlib.Result.map (fun r -> r.statusCode)) = Stdlib.Result.Result.Ok 200L

// Stdlib.HttpClient.request "get" "https://darklang.com" [ 1L ] [] =
//   Builtin.testDerrorMessage "PACKAGE.Darklang.Stdlib.HttpClient.request's 3rd argument (`headers`) should be a List<(String * String)>. However, a List<Int64> ([  1]) was passed instead.
// Expected: (headers: List<(String * String)>)
// Actual: a List<Int64>: [\n  1\n]"

(get "https://darklang.com" [ ("", "") ]) = errBadHeaderEmptyKey


// type errors for bad `method` are OK
Stdlib.HttpClient.request "" "https://darklang.com" [] [] = errBadMethod
Stdlib.HttpClient.request " get " "https://darklang.com" [] [] = errBadMethod
Stdlib.HttpClient.request "ðŸ‡µðŸ‡·" "https://darklang.com" [] [] = errBadMethod

// unsupported protocols
Stdlib.HttpClient.request "get" "ftp://darklang.com" [] [] = errUnsupportedProtocol
Stdlib.HttpClient.request "put" "file:///etc/passwd" [] [] = errUnsupportedProtocol
Stdlib.HttpClient.request "put" "/just-a-path" [] [] = errUnsupportedProtocol

// totally bogus URLs
Stdlib.HttpClient.request "get" "" [] [] = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.InvalidUri))
Stdlib.HttpClient.request "post" "{ ] nonsense ^#( :" [] [] = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.BadUrl(Stdlib.HttpClient.BadUrlDetails.InvalidUri))

// URLs we can't actually communicate with
Stdlib.HttpClient.request "get" "http://google.com:79" [] [] = Stdlib.Result.Result.Error(Stdlib.HttpClient.RequestError.Timeout)


// Check for banned urls in the host name
module Disallowed =
  // invalid host
  (get "http://0.0.0.0" []) = errInvalidHost
  (get "http://0" []) = errInvalidHost
  (get "http://localhost" []) = errInvalidHost
  (get "http://127.0.0.1" []) = errInvalidHost
  (get "http://[::1]" []) = errInvalidHost
  (get "http://[0:0:0:0:0:0:0:1]" []) = errInvalidHost
  (get "http://[0000:0000:0000:0000:0000:0000:0000:0001]" []) = errInvalidHost
  (get "http://127.0.0.17" []) = errInvalidHost
  (get "http://[::ffff:7f00:11]" []) = errInvalidHost
  (get "http://[0:0:0:0:0:ffff:7f00:0011]" []) = errInvalidHost
  (get "http://[0000:0000:0000:0000:0000:ffff:7f00:0011]" []) = errInvalidHost
  (get "http://127.255.174.17" []) = errInvalidHost
  (get "http://metadata.google.internal" []) = errInvalidHost
  (get "http://metadata" []) = errInvalidHost
  (get "http://169.254.169.254" []) = errInvalidHost
  (get "http://[::ffff:a9fe:a9fe]" []) = errInvalidHost
  (get "http://[0:0:0:0:0:ffff:a9fe:a9fe]" []) = errInvalidHost
  (get "http://[0000:0000:0000:0000:0000:ffff:a9fe:a9fe]" []) = errInvalidHost
  (get "http://169.254.0.0" []) = errInvalidHost
  (get "http://172.16.0.1" []) = errInvalidHost
  (get "http://[::ffff:ac10:1]" []) = errInvalidHost
  (get "http://[0:0:0:0:0:ffff:ac10:0001]" []) = errInvalidHost
  (get "http://[0000:0000:0000:0000:0000:ffff:ac10:0001]" []) = errInvalidHost
  (get "http://192.168.1.1" []) = errInvalidHost
  (get "http://[::ffff:c0a8:101]" []) = errInvalidHost
  (get "http://[0:0:0:0:0:ffff:c0a8:0101]" []) = errInvalidHost
  (get "http://[0000:0000:0000:0000:0000:ffff:c0a8:0101]" []) = errInvalidHost

  // invalid uri
  (get "localhost" []) = errInvalidUri

  // network error
  (get "http://[0:0:0:0:0:0:0:0]" []) = errNetworkError
  // Check for sneaky banned urls - blocked via connection callback
  (get "http://localtest.me" []) = errNetworkError // 127.0.0.1
  (get "http://c.cx" []) = errNetworkError // 0.0.0.0

  // invalid headers
  // (we just happen to know that google will fail this way if we provide these headers..)
  (get "http://google.com" [ ("Metadata-Flavor", "Google") ]) = errInvalidRequest
  (get "http://google.com" [ ("metadata-flavor", "Google") ]) = errInvalidRequest
  (get "http://google.com" [ ("Metadata-Flavor", " Google ") ]) = errInvalidRequest
  (get "http://google.com" [ ("X-Google-Metadata-Request", " True ") ]) = errInvalidRequest
  (get "http://google.com" [ (" x-Google-metaData-Request", " True ") ]) = errInvalidRequest

module BadSSL =
  (get "http://thenonexistingurlforsure.com" []) = errNetworkError
  (get "https://self-signed.badssl.com" []) = errNetworkError



// TODO: http2, http3