Stdlib.Option.Option.None = Stdlib.Option.Option.None

((Stdlib.List.head []) == Stdlib.Option.Option.None) = true

(Stdlib.List.head []) = Stdlib.Option.Option.None

Stdlib.Result.Result.Ok(Builtin.testRuntimeError "err") =
  (Builtin.testDerrorMessage "Uncaught exception: err")

Stdlib.Option.Option.Some(Builtin.testRuntimeError "err") =
  (Builtin.testDerrorMessage "Uncaught exception: err")

Stdlib.Result.Result.Error(Builtin.testRuntimeError "err") =
  (Builtin.testDerrorMessage "Uncaught exception: err")

module Errors =
  module Builtins =
    Stdlib.Option.Option.None 5 =
      (Builtin.testDerrorMessage "Expected 0 fields in Darklang.Stdlib.Option.Option.`None`, but got 1")

    Stdlib.Option.Option.Some(5, 6) =
      (Builtin.testDerrorMessage "Expected 1 fields in Darklang.Stdlib.Option.Option.`Some`, but got 2")

  module User =
    type MyEnum = | A | B | C of String

    MyEnum.D = Builtin.testDerrorMessage "There is no case named `D` in Errors.User.MyEnum"

    MyEnum.C = Builtin.testDerrorMessage "Expected 1 fields in Errors.User.MyEnum.`C`, but got 0"
    MyEnum.B 5L = Builtin.testDerrorMessage "Expected 0 fields in Errors.User.MyEnum.`B`, but got 1"

    (match MyEnum.C "test" with | C v -> v) = "test"
    (match MyEnum.C "test" with | 5 -> "unmatched because it's not an int" | C v -> v) = "test"
    (match MyEnum.C "test" with | C -> "unmatched because we didn't provide a space for the field") = Builtin.testDerrorMessage "No matching case found for value Errors.User.MyEnum.C(\"test\") in match expression"
    (match MyEnum.C "test" with | D -> "unmatched because case name does not exist" | C _ -> 2) = 2

    (MyEnum.C 5L) = Builtin.testDerrorMessage "Failed to create enum. Expected String for field 0 in `C`, but got Int64 (5)"


module Simple =
  type AorB = | A | B

  (let a = AorB.A
   let b = AorB.B
   a == b) = false

  (let a1 = AorB.A
   let a2 = AorB.A
   a1 == a2) = true

  (AorB.A == AorB.A) = true
  (AorB.A == AorB.B) = false

  Stdlib.List.unique_v0 [ AorB.A; AorB.B; AorB.A; AorB.A; AorB.B ] = [ AorB.A; AorB.B ]

  module EnumReference =
    type CorD =
      | C of Int64
      | D of AorB

    (CorD.C 5L != CorD.D AorB.B) = true
    (CorD.D AorB.A == CorD.D AorB.A) = true

module MixedCases =
  type EnumOfMixedCases =
    | W
    | X of String
    | Y of i: Int64
    | Z of c: String * i: Int64

  (EnumOfMixedCases.W == (EnumOfMixedCases.Y 1L)) = false
  (EnumOfMixedCases.Y 1L == EnumOfMixedCases.Y 1L) = true

  EnumOfMixedCases.X 1L =
    (Builtin.testDerrorMessage "Failed to create enum. Expected String for field 0 in `X`, but got Int64 (1)")

  EnumOfMixedCases.Y "test" =
    (Builtin.testDerrorMessage "Failed to create enum. Expected Int64 for field 0 in `Y`, but got String (\"test\")")

  EnumOfMixedCases.Z 1L =
    (Builtin.testDerrorMessage "Expected 2 fields in MixedCases.EnumOfMixedCases.`Z`, but got 1")

  // Test ordering of evaluation
  EnumOfMixedCases.Z(Builtin.testRuntimeError "1", Builtin.testRuntimeError "2") =
    (Builtin.testDerrorMessage "Uncaught exception: 1")

  (let values =
    [ EnumOfMixedCases.W
      EnumOfMixedCases.X "testX"
      EnumOfMixedCases.Y(5L)
      EnumOfMixedCases.Z("testZ", 2L) ]
  match Stdlib.List.getAt values 3L with
  | Some z -> Stdlib.Result.Result.Ok z
  | None -> Stdlib.Result.Result.Error "Failure") =
    Darklang.Stdlib.Result.Result.Ok(EnumOfMixedCases.Z("testZ", 2L))

  ([ EnumOfMixedCases.W
     EnumOfMixedCases.X "testX"
     EnumOfMixedCases.Y(5L)
     EnumOfMixedCases.Z("testZ", 2L) ]
  |> Stdlib.List.map_v0 (fun v ->
    match v with
    | X s -> "X " ++ s
    | Z(s, _i) -> "Z " ++ s
    | Y y -> "Y " ++ (Stdlib.Int64.toString_v0 y)
    | W -> "a simple W")) = [ "a simple W"; "X testX"; "Y 5"; "Z testZ" ]


module TuplesVsNonTuples =
  type Tuples =
    | NotTuple of String * Int64
    | Tuple of (String * Int64)

  (match Tuples.NotTuple("printer broke", 7L) with
   | NotTuple(reason, 7L) -> reason) = "printer broke"

  (Tuples.NotTuple(("printer broke", 7L))) =
    (Builtin.testDerrorMessage "Expected 2 fields in TuplesVsNonTuples.Tuples.`NotTuple`, but got 1")

  (match Tuples.Tuple(("printer broke", 7L)) with
   | Tuple((reason, 7L)) -> reason) = "printer broke"

  Tuples.Tuple("printer broke", 7L) =
    (Builtin.testDerrorMessage "Expected 1 fields in TuplesVsNonTuples.Tuples.`Tuple`, but got 2")


module Recursive =
  type Tree =
    | Leaf
    | Node of Tree * Tree

  Tree.Node(Tree.Leaf, Tree.Leaf) = Tree.Node(Tree.Leaf, Tree.Leaf)

  (Tree.Node(Tree.Leaf, Tree.Leaf) == Tree.Node(Tree.Leaf, Tree.Node(Tree.Leaf, Tree.Leaf))) = false

module Polymorphism =
  // Define a red-black tree
  type Color = | Red | Black

  type RBTree<'a> =
    | Empty
    | Node of color: Color * left: RBTree<'a> * value: 'a * right: RBTree<'a>

  let singleton (value: 'a) : RBTree<'a> =
    RBTree.Node(Color.Red, RBTree.Empty, value, RBTree.Empty)

  let insert' (tree: RBTree<'a>) (value: 'a) (cmp: ('a * 'a) -> Int64) : RBTree<'a> =
    match tree with
    | Empty -> singleton value
    | Node(color, left, v, right) ->
      // CLEANUP we should allow cmp to call two arguments, and not use a weird
      // tuple-pipe thing
      let c = (value, v) |> cmp

      if c < 0L then
        RBTree.Node(color, insert' left value cmp, v, right)
      elif c > 0L then
        RBTree.Node(color, left, v, insert' right value cmp)
      else
        RBTree.Node(color, left, value, right)

  let insert (tree: RBTree<'a>) (value: 'a) (cmp: ('a * 'a) -> Int64) : RBTree<'a> =
    insert' tree value cmp

  let ofList (values: List<'a>) (cmp: ('a * 'a) -> Int64) : RBTree<'a> =
    Stdlib.List.fold_v0 values RBTree.Empty (fun tree value -> insert tree value cmp)

  let toList' (tree: RBTree<'a>) (acc: List<'a>) : List<'a> =
    match tree with
    | Empty -> acc
    | Node(_, left, value, right) ->
      toList' left (Stdlib.List.push (toList' right acc) value)

  let toList (tree: RBTree<'a>) : List<'a> = toList' tree []


  (let intCmp =
    fun (x, y) ->
      if x < y then -1L
      elif x > y then 1L
      else 0L
  ([ 1L; -2L; 5L; 3L ] |> ofList intCmp |> toList)
  == ([ 3L; 5L; -2L; 1L ] |> ofList intCmp |> toList)) = true