module Darklang =
  module LanguageTools =
    module WrittenTypesToProgramTypes =
      let gid () : Int64 =
        // TODO: fix upper range here
        Stdlib.Int64.random 0L 922337203685477580L

      let gtlid () : UInt64 =
        Stdlib.UInt64.random 0UL 9223372036854775807UL

      type Name = Unresolved of List<String>

      module Identifiers =
        module Type =
          let toPT (typ: WrittenTypes.TypeIdentifier) : String = typ.name

        module QualifiedType =
          let toPT
            (resolver: NameResolver.NameResolutionSettings)
            (i: WrittenTypes.QualifiedTypeIdentifier)
            : ProgramTypes.FQTypeName.FQTypeName =
            let currentModule = Stdlib.List.map i.modules (fun (m, _) -> m.name)
            let nametoResolve = [ i.typ.name ]

            let resolvedName =
              NameResolver.TypeName.resolve
                resolver
                currentModule
                (WrittenTypesToProgramTypes.Name.Unresolved nametoResolve)

            match resolvedName with
            | Ok n -> n
            // TODO: Handle errors properly
            | Error e -> $"TODO: handle error {e}"

        module Fn =
          let toPT (fn: WrittenTypes.FnIdentifier) : String = fn.name

        module QualifiedFn =
          let toPT
            (resolver: NameResolver.NameResolutionSettings)
            (i: WrittenTypes.QualifiedFnIdentifier)
            : ProgramTypes.FQFnName.FQFnName =
            let modules = Stdlib.List.map i.modules (fun (m, _) -> m.name)
            let nametoResolve = [ i.fn.name ]

            let resolvedName =
              NameResolver.FnName.resolve
                resolver
                modules
                (WrittenTypesToProgramTypes.Name.Unresolved nametoResolve)

            match resolvedName with
            | Ok name -> name
            // TODO: Handle errors properly
            | Error e -> $"TODO: handle error {e}"


      module TypeReference =
        module Builtin =
          let toPT
            (resolver: NameResolver.NameResolutionSettings)
            (t: WrittenTypes.TypeReference.Builtin)
            : ProgramTypes.TypeReference =
            match t with
            | TUnit _range -> ProgramTypes.TypeReference.TUnit
            | TBool _range -> ProgramTypes.TypeReference.TBool
            | TInt8 _range -> ProgramTypes.TypeReference.TInt8
            | TUInt8 _range -> ProgramTypes.TypeReference.TUInt8
            | TInt16 _range -> ProgramTypes.TypeReference.TInt16
            | TUInt16 _range -> ProgramTypes.TypeReference.TUInt16
            | TInt32 _range -> ProgramTypes.TypeReference.TInt32
            | TUInt32 _range -> ProgramTypes.TypeReference.TUInt32
            | TInt64 _range -> ProgramTypes.TypeReference.TInt64
            | TUInt64 _range -> ProgramTypes.TypeReference.TUInt64
            | TInt128 _range -> ProgramTypes.TypeReference.TInt128
            | TUInt128 _range -> ProgramTypes.TypeReference.TUInt128
            | TFloat _range -> ProgramTypes.TypeReference.TFloat
            | TChar _range -> ProgramTypes.TypeReference.TChar
            | TString _range -> ProgramTypes.TypeReference.TString
            | TList(_range, _, _, typ, _) ->
              let typ = TypeReference.toPT resolver typ
              ProgramTypes.TypeReference.TList(typ)

            | TDict(_range, _, _, valueType, _) ->
              let valueType = TypeReference.toPT resolver valueType

              ProgramTypes.TypeReference.TDict valueType

            | TTuple(_range, firstType, _, secondType, restTypes, _, _) ->
              let firstType = TypeReference.toPT resolver firstType
              let secondType = TypeReference.toPT resolver secondType

              let restTypes =
                Stdlib.List.map restTypes (fun (_, t) ->
                  TypeReference.toPT resolver t)

              ProgramTypes.TypeReference.TTuple(firstType, secondType, restTypes)

            | TDateTime _range -> ProgramTypes.TypeReference.TDateTime
            | TUuid _range -> ProgramTypes.TypeReference.TUuid


        let toPT
          (resolver: NameResolver.NameResolutionSettings)
          (t: WrittenTypes.TypeReference.TypeReference)
          : ProgramTypes.TypeReference =
          match t with
          | Builtin b -> Builtin.toPT resolver b
          | QualifiedName qn ->
            let typeName = Identifiers.QualifiedType.toPT resolver qn

            ProgramTypes.TypeReference.TCustomType(
              Stdlib.Result.Result.Ok typeName,
              []
            )


      module TypeDeclaration =
        module Definition =
          let toPT
            (resolver: NameResolver.NameResolutionSettings)
            (d: WrittenTypes.TypeDeclaration.Definition)
            : ProgramTypes.TypeDeclaration.Definition =

            match d with
            | Alias typ ->
              let typ = TypeReference.toPT resolver typ

              ProgramTypes.TypeDeclaration.Definition.Alias typ

        let toPT
          (resolver: NameResolver.NameResolutionSettings)
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.TypeDeclaration.TypeDeclaration =
          let def = Definition.toPT resolver d.definition

          ProgramTypes.TypeDeclaration.TypeDeclaration
            { typeParams = []; definition = def }


        let toUserTypePT
          (resolver: NameResolver.NameResolutionSettings)
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.UserType =
          ProgramTypes.UserType
            { tlid = gtlid ()
              name =
                ProgramTypes.FQTypeName.UserProgram
                  { modules = []
                    name = d.name.name
                    version = 0L }
              description = ""
              declaration = toPT resolver d
              deprecated = ProgramTypes.Deprecation.NotDeprecated }


      module InfixFnName =
        let toPT (infix: WrittenTypes.InfixFnName) : ProgramTypes.InfixFnName =
          match infix with
          | ArithmeticPlus -> ProgramTypes.InfixFnName.ArithmeticPlus
          | ArithmeticMinus -> ProgramTypes.InfixFnName.ArithmeticMinus
          | ArithmeticMultiply -> ProgramTypes.InfixFnName.ArithmeticMultiply
          | ArithmeticDivide -> ProgramTypes.InfixFnName.ArithmeticDivide
          | ArithmeticModulo -> ProgramTypes.InfixFnName.ArithmeticModulo
          | ArithmeticPower -> ProgramTypes.InfixFnName.ArithmeticPower
          | ComparisonGreaterThan -> ProgramTypes.InfixFnName.ComparisonGreaterThan
          | ComparisonGreaterThanOrEqual ->
            ProgramTypes.InfixFnName.ComparisonGreaterThanOrEqual
          | ComparisonLessThan -> ProgramTypes.InfixFnName.ComparisonLessThan
          | ComparisonLessThanOrEqual ->
            ProgramTypes.InfixFnName.ComparisonLessThanOrEqual
          | ComparisonEquals -> ProgramTypes.InfixFnName.ComparisonEquals
          | ComparisonNotEquals -> ProgramTypes.InfixFnName.ComparisonNotEquals
          | StringConcat -> ProgramTypes.InfixFnName.StringConcat


      module BinaryOperation =
        let toPT
          (binop: WrittenTypes.BinaryOperation)
          : ProgramTypes.BinaryOperation =
          match binop with
          | BinOpAnd -> ProgramTypes.BinaryOperation.BinOpAnd
          | BinOpOr -> ProgramTypes.BinaryOperation.BinOpOr


      module Infix =
        let toPT (infix: WrittenTypes.Infix) : ProgramTypes.Infix =
          match infix with
          | InfixFnCall op -> ProgramTypes.Infix.InfixFnCall(InfixFnName.toPT op)
          | BinOp op -> ProgramTypes.Infix.BinOp(BinaryOperation.toPT op)

      module Expr =
        module LetPattern =
          let toPT (p: WrittenTypes.LetPattern) : ProgramTypes.LetPattern =
            match p with
            | LPVariable(_, name) -> ProgramTypes.LetPattern.LPVariable(gid (), name)


        let toPT
          (resolver: NameResolver.NameResolutionSettings)
          (e: WrittenTypes.Expr)
          : ProgramTypes.Expr =
          match e with
          // simple
          | EUnit _ -> ProgramTypes.Expr.EUnit(gid ())

          | EBool(_, b) -> ProgramTypes.Expr.EBool(gid (), b)
          | EInt8(_, (_, i), _) -> ProgramTypes.Expr.EInt8(gid (), i)
          | EUInt8(_, (_, i), _) -> ProgramTypes.Expr.EUInt8(gid (), i)
          | EInt16(_, (_, i), _) -> ProgramTypes.Expr.EInt16(gid (), i)
          | EUInt16(_, (_, i), _) -> ProgramTypes.Expr.EUInt16(gid (), i)
          | EInt32(_, (_, i), _) -> ProgramTypes.Expr.EInt32(gid (), i)
          | EUInt32(_, (_, i), _) -> ProgramTypes.Expr.EUInt32(gid (), i)
          | EInt64(_, (_, i), _) -> ProgramTypes.Expr.EInt64(gid (), i)
          | EUInt64(_, (_, i), _) -> ProgramTypes.Expr.EUInt64(gid (), i)
          | EInt128(_, (_, i), _) -> ProgramTypes.Expr.EInt128(gid (), i)
          | EUInt128(_, (_, i), _) -> ProgramTypes.Expr.EUInt128(gid (), i)
          | EFloat(_, s, w, f) -> ProgramTypes.Expr.EFloat(gid (), s, w, f)
          | EString(_, contents, _, _) ->
            match contents with
            | None -> ProgramTypes.Expr.EString(gid (), [])
            | Some((_, s)) ->
              ProgramTypes.Expr.EString(
                gid (),
                [ ProgramTypes.StringSegment.StringText s ]
              )
          | EChar(_, c, _, _) ->
            match c with
            | None -> ProgramTypes.Expr.EChar(gid (), "")
            | Some((_, c)) -> ProgramTypes.Expr.EChar(gid (), c)

          | EList(_, contents, _, _) ->
            ProgramTypes.Expr.EList(
              gid (),
              Stdlib.List.map contents (fun (expr, _) -> toPT resolver expr)
            )

          | EDict(_, contents, _, _, _) ->
            ProgramTypes.Expr.EDict(
              gid (),
              Stdlib.List.map contents (fun (_, k, v) -> (k, toPT resolver v))
            )

          | ETuple(_, first, _, second, rest, _, _) ->
            let first = toPT resolver first
            let second = toPT resolver second
            let rest = Stdlib.List.map rest (fun (_, e) -> toPT resolver e)

            ProgramTypes.Expr.ETuple(gid (), first, second, rest)

          // declaring and accessing variables
          | ELet(_, pat, rhs, body, _, _) ->
            ProgramTypes.Expr.ELet(
              gid (),
              LetPattern.toPT pat,
              toPT resolver rhs,
              toPT resolver body
            )

          | EVariable(_, var) -> ProgramTypes.Expr.EVariable (gid ()) var

          | EIf(_, cond, thenExpr, elseExpr, _, _, _) ->
            let elseExpr =
              elseExpr |> Stdlib.Option.map (fun es -> Expr.toPT resolver es)

            ProgramTypes.Expr.EIf(
              gid (),
              toPT resolver cond,
              toPT resolver thenExpr,
              elseExpr
            )

          // fn calls
          | EInfix(_, (_, op), left, right) ->
            let infix = Infix.toPT op

            ProgramTypes.Expr.EInfix(
              gid (),
              infix,
              toPT resolver left,
              toPT resolver right
            )

          | EFnCall(_, fnName, args, _, _) ->
            let fnName = Identifiers.QualifiedFn.toPT resolver fnName

            let fnNameExpr =
              ProgramTypes.Expr.EFnName(gid (), Stdlib.Result.Result.Ok fnName)

            ProgramTypes.Expr.EApply(
              gid (),
              fnNameExpr,
              [],
              Stdlib.List.map args (fun a -> toPT resolver a)
            )


      module FunctionDeclaration =
        module Parameter =
          let toUserFnParamPT
            (resolver: NameResolver.NameResolutionSettings)
            (p: WrittenTypes.FnDeclaration.Parameter)
            : ProgramTypes.UserFunction.Parameter =

            match p with
            | Unit p ->
              ProgramTypes.UserFunction.Parameter
                { name = "_" // TODO ok?
                  typ = ProgramTypes.TypeReference.TUnit
                  description = "" }

            | Normal p ->
              ProgramTypes.UserFunction.Parameter
                { name = p.name.name
                  typ = TypeReference.toPT resolver p.typ
                  description = "" }

        let toUserFnPT
          (resolver: NameResolver.NameResolutionSettings)
          (fn: WrittenTypes.FnDeclaration.FnDeclaration)
          : ProgramTypes.UserFunction.UserFunction =
          ProgramTypes.UserFunction.UserFunction
            { tlid = gtlid ()
              name =
                ProgramTypes.FQFnName.UserProgram
                  { modules = []
                    name = fn.name.name
                    version = 0L }
              typeParams = []
              parameters =
                fn.parameters
                |> Stdlib.List.map (fun p -> Parameter.toUserFnParamPT resolver p)
              returnType = TypeReference.toPT resolver fn.returnType
              description = ""
              deprecated = ProgramTypes.Deprecation.NotDeprecated
              body = Expr.toPT resolver fn.body }