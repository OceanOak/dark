module Darklang =
  module LanguageTools =
    module Parser =
      module ConstantDeclaration =
        let parseBoolConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let b =
            match getText node with
            | "true" -> true |> Stdlib.Result.Result.Ok
            | "false" -> false |> Stdlib.Result.Result.Ok
            | _ -> createUnparseableError node

          match b with
          | Ok b ->
            (WrittenTypes.Const.CBool(node.range, b)) |> Stdlib.Result.Result.Ok
          | Error _ -> createUnparseableError node


        let parseIntConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let intPart = findField node "digits"
          let suffixPart = findField node "suffix"

          match (intPart, suffixPart) with
          | Ok intPart, Ok sfx ->
            let intText = getText intPart

            match node.typ with
            | "int8_literal" ->
              match Stdlib.Int8.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CInt8(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "uint8_literal" ->
              match Stdlib.UInt8.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CUInt8(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "int16_literal" ->
              match Stdlib.Int16.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CInt16(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "uint16_literal" ->
              match Stdlib.UInt16.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CUInt16(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "int32_literal" ->
              match Stdlib.Int32.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CInt32(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "uint32_literal" ->
              match Stdlib.UInt32.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CUInt32(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "int64_literal" ->
              match Stdlib.Int64.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CInt64(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "uint64_literal" ->
              match Stdlib.UInt64.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CUInt64(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "int128_literal" ->
              match Stdlib.Int128.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CInt128(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | "uint128_literal" ->
              match Stdlib.UInt128.parse intText with
              | Ok parsedValue -> (WrittenTypes.Const.CUInt128(node.range, (intPart.range, parsedValue), sfx.range)) |> Stdlib.Result.Result.Ok
              | Error _ -> createUnparseableError node
            | _ -> createUnparseableError node



        let parseFloatConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let floatStr = getText node

          match Stdlib.Float.parse floatStr with
          | Ok floatValue ->
            let (sign, whole, remainder) =
              let (sign, unsignedFloat) =
                if Stdlib.String.startsWith floatStr "-" then
                  (Sign.Negative, Stdlib.String.dropFirst floatStr 1L)
                else
                  (Sign.Positive, floatStr)

              let parts = Stdlib.String.split unsignedFloat "."

              let whole = parts |> Stdlib.List.head |> Stdlib.Option.withDefault "0"

              let remainder =
                parts
                |> Stdlib.List.tail
                |> Stdlib.Option.withDefault [ "0" ]
                |> Stdlib.List.head
                |> Stdlib.Option.withDefault "0"

              (sign, whole, remainder)

            (WrittenTypes.Const.CFloat(node.range, sign, whole, remainder))
            |> Stdlib.Result.Result.Ok

          | Error _ -> createUnparseableError node


        let parseStringConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let openQuoteNode = findField node "symbol_open_quote"
          let closeQuoteNode = findField node "symbol_close_quote"

          let contents =
            findAndParseOptional node "content" (fun stringPart ->
              (stringPart.range, stringPart.text) |> Stdlib.Result.Result.Ok)


          match (openQuoteNode, closeQuoteNode) with
          | Ok openQuote, Ok closeQuote ->
            (WrittenTypes.Const.CString(
              node.range,
              contents,
              openQuote.range,
              closeQuote.range
            ))
            |> Stdlib.Result.Result.Ok

          | _ -> createUnparseableError node


        let parseCharConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let openQuoteNode = findField node "symbol_open_single_quote"

          let charNode =
            findAndParseOptional node "content" (fun charPart ->
              (charPart.range, charPart.text) |> Stdlib.Result.Result.Ok)

          let closeQuoteNode = findField node "symbol_close_single_quote"

          match (openQuoteNode, closeQuoteNode) with
          | Ok openQuote, Ok closeQuote ->
            (WrittenTypes.Const.CChar(
              node.range,
              charNode,
              openQuote.range,
              closeQuote.range
            ))
            |> Stdlib.Result.Result.Ok

          | _ -> createUnparseableError node


        let parseListConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          baseParseList
            ConstantDeclaration.parseConst
            node
            (fun (range, listContents, rangeOpenBracket, rangeCloseBracket) ->
              (WrittenTypes.Const.CList(
                range,
                listContents,
                rangeOpenBracket,
                rangeCloseBracket
              ))
              |> Stdlib.Result.Result.Ok)


        let parseDictLiteral
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          baseParseDict
            ConstantDeclaration.parseConst
            node
            (fun (range, dictContents, keywordDict, openBrace, closeBrace) ->
              (WrittenTypes.Const.CDict(
                range,
                dictContents,
                keywordDict,
                openBrace,
                closeBrace
              ))
              |> Stdlib.Result.Result.Ok)


        let parseTupleLiteral
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          baseParseTuple
            ConstantDeclaration.parseConst
            node
            (fun (range, first, comma, second, rest, openParen, closeParen) ->
              (WrittenTypes.Const.CTuple(
                range,
                first,
                comma,
                second,
                rest,
                openParen,
                closeParen
              ))
              |> Stdlib.Result.Result.Ok)


        let parseRecordLiteral
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          let typeNameNode = findAndParseRequired node "type_name" Identifiers.parseQualifiedType
          let fields =
            node
            |> findNodeByFieldName "content"
            |> Stdlib.Option.map (fun contentsNode ->
              match contentsNode.children |> Stdlib.List.chunkBySize 2L with
              | Ok pairs ->
                pairs
                |> Stdlib.List.map (fun recordSeparatorPair ->
                  match recordSeparatorPair with
                  | [ recordPairNode; _separator ]  | [ recordPairNode ] ->
                    let fieldNode =
                      findAndParseRequired recordPairNode "field" (fun node ->
                        (node.range, node.text) |> Stdlib.Result.Result.Ok)
                    let valueNode =
                      findAndParseRequired recordPairNode "value" ConstantDeclaration.parseConst
                    match fieldNode, valueNode with
                    | Ok field, Ok value ->
                      (field, value) |> Stdlib.Result.Result.Ok
                    | _ -> createUnparseableError recordPairNode
                  | _ -> createUnparseableError contentsNode)
                |> Stdlib.Result.collect
              | Error _ -> createUnparseableError contentsNode)
            |> Stdlib.Option.withDefault (Stdlib.Result.Result.Ok [])
          match typeNameNode, fields with
          | Ok typeName, Ok fields ->
            (WrittenTypes.Const.CRecord(
              node.range,
              typeName,
              fields
            ))
            |> Stdlib.Result.Result.Ok
          | _ -> createUnparseableError node


        let parseEnumLiteral
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          baseParseEnum
            ConstantDeclaration.parseConst
            node
            (fun (range, typeName, caseName, enumFields, symbolDot) ->
              (WrittenTypes.Const.CEnum(
                range,
                typeName,
                caseName,
                enumFields,
                symbolDot
              ))
              |> Stdlib.Result.Result.Ok)


        let parseConst
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.Const, WrittenTypes.Unparseable> =
          match node.typ with
          | "unit" ->
            (WrittenTypes.Const.CUnit node.range) |> Stdlib.Result.Result.Ok
          | "bool_literal" -> parseBoolConst node
          | "int8_literal"
          | "uint8_literal"
          | "int16_literal"
          | "uint16_literal"
          | "int32_literal"
          | "uint32_literal"
          | "int64_literal"
          | "uint64_literal"
          | "int128_literal"
          | "uint128_literal" -> parseIntConst node
          | "float_literal" -> parseFloatConst node
          | "string_literal" -> parseStringConst node
          | "char_literal" -> parseCharConst node
          | "const_list_literal" -> parseListConst node
          | "const_dict_literal" -> parseDictLiteral node
          | "const_tuple_literal" -> parseTupleLiteral node
          | "const_record_literal" -> parseRecordLiteral node
          | "const_enum_literal" -> parseEnumLiteral node
          | "consts" ->
            match node.children with
            | [ constNode ] -> parseConst constNode
            | _ -> createUnparseableError node
          | _ -> createUnparseableError node


        /// Parses a package constant declaration
        ///
        /// i.e. `const waterBoilingPointCelsius = 100y`,
        ///
        /// - `waterBoilingPointCelsius` is the constant name
        /// - `100y` is the body
        let parse
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.ConstantDeclaration.ConstantDeclaration, WrittenTypes.Unparseable> =
          if node.typ == "const_decl" then
            let nameNode =
              findAndParseRequired node "name" (fun node ->
                (Identifiers.parseConst node) |> Stdlib.Result.Result.Ok)

            let valueNode =
              match findNodeByFieldName node "value" with
              | Some value ->
                match value.children with
                | [ valueNode ] -> ConstantDeclaration.parseConst valueNode
                | _ -> createUnparseableError node
              | None -> createUnparseableError node

            let keywordConstNode = findField node "keyword_const"
            let symEqualsNode = findField node "symbol_equals"

            match (nameNode, valueNode, keywordConstNode, symEqualsNode) with
            | Ok name, Ok value, Ok keywordConst, Ok equals ->
              (WrittenTypes.ConstantDeclaration.ConstantDeclaration
                { range = node.range
                  name = name
                  body = value
                  keywordConst = keywordConst.range
                  symbolEquals = equals.range })
              |> Stdlib.Result.Result.Ok

            | _ -> createUnparseableError node