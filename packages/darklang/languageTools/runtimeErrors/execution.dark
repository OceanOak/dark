module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module Execution =
        type Error =
          | MatchExprUnmatched of RuntimeTypes.Dval.Dval
          | MatchExprPatternWrongType of String * RuntimeTypes.Dval.Dval
          | MatchExprEnumPatternWrongCount of
            String *
            expected: Int64 *
            actual: Int64

          | NonStringInStringInterpolation of RuntimeTypes.Dval.Dval

          | ConstDoesntExist of RuntimeTypes.FQConstantName.FQConstantName

          | FieldAccessNotRecord of RuntimeTypes.ValueType * String

          | FieldAccessFieldDoesntExist of
            typeName: RuntimeTypes.FQTypeName.FQTypeName *
            invalidFieldName: String

          | EnumConstructionCaseNotFound of
            typeName: RuntimeTypes.FQTypeName.FQTypeName *
            caseName: String

          | WrongNumberOfFnArgs of
            fn: RuntimeTypes.FQFnName.FQFnName *
            expectedTypeArgs: Int64 *
            expectedArgs: Int64 *
            actualTypeArgs: Int64 *
            actualArgs: Int64

          | RecordConstructionFieldDoesntExist of
            typeName: RuntimeTypes.FQTypeName.FQTypeName *
            invalidFieldName: String
          | RecordConstructionMissingField of
            RuntimeTypes.FQTypeName.FQTypeName *
            missingFieldName: String
          | RecordConstructionDuplicateField of
            RuntimeTypes.FQTypeName.FQTypeName *
            duplicateFieldName: String


        let toSegments (e: Error) : ErrorOutput =
          match e with
          | MatchExprUnmatched dv ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "No match for "
                ErrorSegment.ErrorSegment.FullValue dv ]

            // TODO include patterns in error message
            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | MatchExprEnumPatternWrongCount(caseName, expected, actual) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String caseName
                ErrorSegment.ErrorSegment.String " pattern is expecting "
                ErrorSegment.ErrorSegment.Count(
                  expected,
                  ErrorSegment.ErrorSegment.String "field",
                  ErrorSegment.ErrorSegment.String "fields"
                )
                ErrorSegment.ErrorSegment.String ", but "
                ErrorSegment.ErrorSegment.String caseName
                ErrorSegment.ErrorSegment.String " has "
                ErrorSegment.ErrorSegment.Count(
                  actual,
                  ErrorSegment.ErrorSegment.String "field",
                  ErrorSegment.ErrorSegment.String "fields"
                ) ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | MatchExprPatternWrongType(patternType, dv) ->
            let summary =
              // "Cannot match Int64 value 6 with a Float pattern"
              [ ErrorSegment.ErrorSegment.String "Cannot match "
                ErrorSegment.ErrorSegment.TypeOfValue dv
                ErrorSegment.ErrorSegment.String " value "
                ErrorSegment.ErrorSegment.InlineValue dv
                ErrorSegment.ErrorSegment.String " with "
                ErrorSegment.ErrorSegment.IndefiniteArticle
                ErrorSegment.ErrorSegment.String patternType
                ErrorSegment.ErrorSegment.String " pattern" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          // Expected String in string interpolation, got 1.0
          | NonStringInStringInterpolation dv ->
            let summary =
              [ ErrorSegment.ErrorSegment.String
                  "Expected String in string interpolation, got "
                ErrorSegment.ErrorSegment.InlineValue dv ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | ConstDoesntExist name ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Constant "
                ErrorSegment.ErrorSegment.ConstantName name
                ErrorSegment.ErrorSegment.String " doesn't exist" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | FieldAccessFieldDoesntExist(typeName, invalidFieldName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "No field named "
                ErrorSegment.ErrorSegment.FieldName invalidFieldName
                ErrorSegment.ErrorSegment.String " in "
                ErrorSegment.ErrorSegment.TypeName typeName
                ErrorSegment.ErrorSegment.String " record" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | EnumConstructionCaseNotFound(typeName, caseName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "There is no case named "
                ErrorSegment.ErrorSegment.FieldName caseName
                ErrorSegment.ErrorSegment.String " in "
                ErrorSegment.ErrorSegment.TypeName typeName ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | FieldAccessNotRecord(vt, fieldName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Attempting to access field "
                ErrorSegment.ErrorSegment.FieldName fieldName
                ErrorSegment.ErrorSegment.String " of a "
                ErrorSegment.ErrorSegment.ValueType vt
                ErrorSegment.ErrorSegment.String
                  " (field access only works with records)" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | WrongNumberOfFnArgs(fn,
                                expectedTypeArgs,
                                expectedArgs,
                                actualTypeArgs,
                                actualArgs) ->
            let summary =
              [ ErrorSegment.ErrorSegment.FunctionName fn
                ErrorSegment.ErrorSegment.String " has "
                ErrorSegment.ErrorSegment.Count(
                  expectedTypeArgs,
                  ErrorSegment.ErrorSegment.String "type parameter",
                  ErrorSegment.ErrorSegment.String "type parameters"
                )
                ErrorSegment.ErrorSegment.String " and "
                ErrorSegment.ErrorSegment.Count(
                  expectedArgs,
                  ErrorSegment.ErrorSegment.String "parameter",
                  ErrorSegment.ErrorSegment.String "parameters"
                )
                ErrorSegment.ErrorSegment.String ", but here was called with "
                ErrorSegment.ErrorSegment.Count(
                  actualTypeArgs,
                  ErrorSegment.ErrorSegment.String "type argument",
                  ErrorSegment.ErrorSegment.String "type arguments"
                )
                ErrorSegment.ErrorSegment.String " and "
                ErrorSegment.ErrorSegment.Count(
                  actualArgs,
                  ErrorSegment.ErrorSegment.String "argument",
                  ErrorSegment.ErrorSegment.String "arguments"
                )
                ErrorSegment.ErrorSegment.String "." ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | RecordConstructionFieldDoesntExist(typeName, invalidFieldName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Unexpected field "
                ErrorSegment.ErrorSegment.FieldName invalidFieldName
                ErrorSegment.ErrorSegment.String " in "
                ErrorSegment.ErrorSegment.TypeName typeName ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | RecordConstructionMissingField(typeName, missingFieldName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Missing field "
                ErrorSegment.ErrorSegment.FieldName missingFieldName
                ErrorSegment.ErrorSegment.String " in "
                ErrorSegment.ErrorSegment.TypeName typeName ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | RecordConstructionDuplicateField(typeName, duplicateFieldName) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Duplicate field "
                ErrorSegment.ErrorSegment.FieldName duplicateFieldName
                ErrorSegment.ErrorSegment.String " in "
                ErrorSegment.ErrorSegment.TypeName typeName ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }