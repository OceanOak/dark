/// Resources collection for the Darklang Internal MCP server
module Darklang.LanguageTools.DarklangInternalMcpServer.Resources

/// Darklang built-in functions and types
let builtins () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://builtins"
    name = "Darklang Builtins"
    description = "Documentation for Darklang built-in functions and types"
    handler = fun _uri ->
      "# Darklang Built-in Functions and Types\n\nBuilt-in functions include:\n- Basic arithmetic operations\n- String manipulation\n- List operations\n- Type conversions\n\nSee the full documentation for complete details."
  }


/// Darklang standard library functions
let stdlib () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://stdlib"
    name = "Darklang Standard Library"
    description = "Documentation for Darklang standard library functions"
    handler = fun _uri ->
      "# Darklang Standard Library\n\nThe standard library provides:\n- Advanced data structures\n- File I/O operations\n- HTTP client functions\n- Date/time utilities\n- JSON parsing\n- Regular expressions\n\nAll functions are organized by module for easy discovery."
  }


/// Available Darklang packages
let packages () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://packages/manifest"
    name = "Package Manifest"
    description = "List of available Darklang packages and their capabilities"
    handler = fun _uri ->
      let packageList = Darklang.LanguageTools.PackageManager.getAllPackages ()
      let formattedPackages =
        packageList
        |> Stdlib.List.map (fun pkg -> $"## {pkg.name}\nVersion: {pkg.version}\nDescription: {pkg.description}\n")
        |> Stdlib.String.join "\n"
      $"# Available Darklang Packages\n\n{formattedPackages}"
  }


/// Darklang type system documentation
let types () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://types"
    name = "Type System"
    description = "Documentation for Darklang's type system"
    handler = fun _uri ->
      "# Darklang Type System\n\n## Basic Types\n- Int64\n- Float\n- Bool\n- String\n- Unit\n\n## Complex Types\n- List<T>\n- Dict<T>\n- Option<T>\n- Result<T, E>\n\n## Custom Types\n- Records\n- Enums\n- Type aliases\n\nThe type system is designed to be expressive yet simple to use."
  }


/// Darklang configuration and settings
let config () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://config"
    name = "Configuration"
    description = "Current Darklang configuration and settings"
    handler = fun _uri ->
      "# Darklang Configuration\n\n## Current Settings\n- Environment: Development\n- Package loading: Enabled\n- Type checking: Strict\n- Execution timeout: 30s\n\n## Logging\n- Level: Info\n- Output: rundir/logs/\n\nConfiguration can be modified through environment variables or config files."
  }


/// Development logs and debugging information
let logs () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://logs/packages"
    name = "Package Logs"
    description = "Recent package loading and compilation logs"
    handler = fun _uri ->
      let logContent = Builtin.fileReadAll "rundir/logs/packages-canvas.log"
      match logContent with
      | Some content ->
          let lines = Stdlib.String.split content "\n"
          let recentLines = Stdlib.List.takeLast lines 50L
          let formattedLines = Stdlib.String.join recentLines "\n"
          $"# Recent Package Logs\n\n```\n{formattedLines}\n```"
      | None -> "# Package Logs\n\nNo recent logs available."
  }


/// Code examples and snippets
let examples () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://examples"
    name = "Code Examples"
    description = "Common Darklang code patterns and examples"
    handler = fun _uri ->
      "# Darklang Code Examples\n\n## Basic Function\n```darklang\nlet add (x: Int64) (y: Int64) : Int64 =\n  Stdlib.Int64.add x y\n```\n\n## List Processing\n```darklang\nlet processNumbers (numbers: List<Int64>) : List<Int64> =\n  numbers\n  |> Stdlib.List.filter (fun n -> Stdlib.Int64.greaterThan n 0L)\n  |> Stdlib.List.map (fun n -> Stdlib.Int64.multiply n 2L)\n```\n\n## HTTP Request\n```darklang\nlet fetchData (url: String) : String =\n  match Stdlib.HttpClient.get url with\n  | Ok response -> response.body\n  | Error err -> $\"Error: {err}\"\n```"
  }


/// Darklang syntax reference
let syntax () : Darklang.ModelContextProtocol.ServerBuilder.Resource =
  Darklang.ModelContextProtocol.ServerBuilder.Common.Resource {
    uri = "darklang://reference/syntax"
    name = "Syntax Reference"
    description = "Complete Darklang syntax reference and grammar"
    handler = fun _uri ->
      "# Darklang Syntax Reference\n\n## Functions\n```darklang\nlet functionName (param1: Type1) (param2: Type2) : ReturnType =\n  expression\n```\n\n## Pattern Matching\n```darklang\nmatch value with\n| Pattern1 -> result1\n| Pattern2 -> result2\n| _ -> defaultResult\n```\n\n## Pipe Operator\n```darklang\nvalue\n|> function1\n|> function2\n```\n\n## Records\n```darklang\ntype Person = { name: String; age: Int64 }\n\nlet person = Person { name = \"Alice\"; age = 30L }\n```\n\n## Enums\n```darklang\ntype Color =\n  | Red\n  | Green\n  | Blue\n```"
  }