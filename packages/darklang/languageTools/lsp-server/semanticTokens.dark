// provides syntax highlighting
module Darklang =
  module LanguageTools =
    module LspServer =
      module SemanticTokens =
        /// note: these are referenced by their _index_!
        /// i.e. 'keyword' is 1, 'string' is 5, etc.
        ///
        /// Most of these are part of a generally-known set of token types
        /// defined by the LSP spec, but there are a few that are 'custom'
        /// for our language:
        /// - "symbol"
        let tokenTypes =
          [ // universal
            "symbol" // [0] for (, ), [, ], {, }, etc.
            "keyword" // [1] for words 'let' and 'in'

            // for types and type references
            "namespace" // [2] for module names
            "type" // [3] for type names like Int, Bool, etc.

            // for fns and exprs
            "operator" // [4] for operators like +, -
            "string" // [5] for string literals
            "number" // [6] for number literals
            "parameter" // [7] for function parameter identifiers
            "variable" // [8] for general identifiers
            "function" // [9] for function names/identifiers
            "property" // [10] for field names
            "enumMember" // [11] for enum case names
            "typeParameter" ] // [12] for type parameter names

        let tokenModifiers = []


        /// Maps from "exact" semantic tokens that try to remain ignorant of
        /// the LSP's data format, into the UInt64-based format that the LSP
        /// _does_ expect.
        module EncodeSemanticTokens =
          let tokenType
            (t: Darklang.LanguageTools.SemanticTokens.TokenType)
            : UInt64 =
            match t with
            | Symbol -> 0UL
            | Keyword -> 1UL

            | ModuleName -> 2UL
            | TypeName -> 3UL

            | Operator -> 4UL
            | String -> 5UL
            | Number -> 6UL
            | ParameterName -> 7UL
            | VariableName -> 8UL
            | FunctionName -> 9UL

            | Property -> 10UL
            | EnumMember -> 11UL
            | TypeParameter -> 12UL

          let toRelativeTokens
            (tokens: List<LanguageTools.SemanticTokens.SemanticToken>)
            : List<LanguageServerProtocol.SemanticTokens.RelativeSemanticToken.RelativeSemanticToken<LanguageTools.SemanticTokens.TokenType>> =
            let sortedTokens =
              tokens
              |> Stdlib.List.sortByComparator_v0 (fun a b ->
                let aStart = a.range.start
                let bStart = b.range.start

                if Stdlib.Int64.lessThan aStart.row bStart.row then
                  -1L
                elif Stdlib.Int64.greaterThan aStart.row bStart.row then
                  1L
                else if Stdlib.Int64.lessThan aStart.column bStart.column then
                  -1L
                else if Stdlib.Int64.greaterThan aStart.column bStart.column then
                  1L
                else
                  0L)

            match sortedTokens with
            | Error _ -> []
            | Ok sorted ->
              sorted
              |> (Stdlib.List.fold
                (([], Parser.Point { row = 0L; column = 0L }))
                (fun acc token ->
                  let (tokensSoFar, startOfLastToken) = acc

                  let lineDiff = token.range.start.row - startOfLastToken.row
                  let columnDiff = token.range.start.column - startOfLastToken.column
                  let tokenLength = token.range.end_.column - token.range.start.column

                  let deltaStartValue =
                    if lineDiff == 0L then columnDiff else token.range.start.column

                  let maybeDeltaLine = lineDiff |> Stdlib.UInt64.fromInt64
                  let maybeDeltaStart = deltaStartValue |> Stdlib.UInt64.fromInt64
                  let maybeLength = tokenLength |> Stdlib.UInt64.fromInt64

                  match (maybeDeltaLine, maybeDeltaStart, maybeLength) with
                  | (Some deltaLine, Some deltaStart, Some length) ->
                    let newToken =
                      LanguageServerProtocol.SemanticTokens.RelativeSemanticToken.RelativeSemanticToken
                        { deltaLine = deltaLine
                          deltaStart = deltaStart
                          length = length
                          tokenType = token.tokenType }
                    (Stdlib.List.push tokensSoFar newToken, token.range.start)
                  | _ ->
                    // Skip token if any conversion fails
                    acc))
              |> Stdlib.Tuple2.first
              |> Stdlib.List.reverse


          let toLspFormat
            (tokens:
              List<LanguageServerProtocol.SemanticTokens.RelativeSemanticToken.RelativeSemanticToken<LanguageTools.SemanticTokens.TokenType>>)
            : List<UInt64> =
            LanguageServerProtocol.SemanticTokens.RelativeSemanticToken.mapListToFlatDataForResult<Darklang.LanguageTools.SemanticTokens.TokenType>
              (fun t -> tokenType t)
              tokens



        let hardcodedServerCapabilities
          ()
          : LanguageServerProtocol.SemanticTokens.SemanticTokenProviderOptions.SemanticTokenProviderOptions =
          LanguageServerProtocol
            .SemanticTokens
            .SemanticTokenProviderOptions
            .SemanticTokenProviderOptions
            .SemanticTokensOptions(
              LanguageServerProtocol.SemanticTokens.SemanticTokensOptions.SemanticTokensOptions
                { legend =
                    LanguageServerProtocol.SemanticTokens.SemanticTokensLegend.SemanticTokensLegend
                      { tokenTypes = tokenTypes
                        tokenModifiers = tokenModifiers }
                  range =
                    Stdlib.Option.Option.Some(
                      LanguageServerProtocol.SemanticTokens.SemanticTokensOptions.SemanticTokensOptionsRange.SemanticTokensOptionsRange.Bool
                        false
                    )
                  full =
                    Stdlib.Option.Option.Some(
                      LanguageServerProtocol.SemanticTokens.SemanticTokensOptions.SemanticTokensOptionsFull.SemanticTokensOptionsFull.Bool
                        true
                    ) }
            )


        let handleSemanticTokensRequest
          (state: LspState)
          (requestId: JsonRPC.RequestId)
          (requestParams:
            LanguageServerProtocol.SemanticTokens.SemanticTokensRequest.SemanticTokensParams.SemanticTokensParams)
          : LspState =
          let relevantDoc =
            Stdlib.Dict.get state.documentsInScope requestParams.textDocument.uri

          match relevantDoc with
          | None ->
            (JsonRPC.Response.Error.make
              (Stdlib.Option.Option.Some requestId)
              JsonRPC.Response.Error.KnownErrorCodes.internalError
              $"Failed to find document text in language server's cache: {requestParams.textDocument.uri}"
              Stdlib.Option.Option.None)
            |> Stdlib.AltJson.format
            |> logAndSendToClient

          | Some docText ->
            let parsed = docText.parsed

            match parsed with
            | Ok parsedFile ->
              let data =
                parsedFile
                |> LanguageTools.SemanticTokens.ParsedFile.tokenize
                |> EncodeSemanticTokens.toRelativeTokens
                |> EncodeSemanticTokens.toLspFormat

              let result =
                LanguageServerProtocol
                  .SemanticTokens
                  .SemanticTokensRequest
                  .SemanticTokensResult
                  .SemanticTokensResult
                  .SemanticTokens(
                    LanguageServerProtocol.SemanticTokens.SemanticTokens.SemanticTokens
                      { resultId = Stdlib.Option.Option.None
                        data = data }
                  )

              let resultJson =
                result
                |> LanguageServerProtocol.SemanticTokens.SemanticTokensRequest.SemanticTokensResult.toJson
                |> (fun r ->
                  JsonRPC.Response.Ok.make (Stdlib.Option.Option.Some requestId) r)
                |> Stdlib.AltJson.format

              logAndSendToClient resultJson

            | Error parseError ->
              (JsonRPC.Response.Error.make
                (Stdlib.Option.Option.Some requestId)
                JsonRPC.Response.Error.KnownErrorCodes.internalError
                $"Couldn't parse code for syntax highlighting: {requestParams.textDocument.uri}"
                Stdlib.Option.Option.None)
              |> Stdlib.AltJson.format
              |> logAndSendToClient

          state