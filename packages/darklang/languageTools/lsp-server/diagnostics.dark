module Darklang.LanguageTools.LspServer.Diagnostics


let gatherAndReportDiagnostics
  (requestUri: String)
  (parsedText: WrittenTypes.SourceFile.SourceFile)
  (unresolvedNames: List<Parser.Range * ProgramTypes.NameResolutionError>)
  : Unit =
  let warningDiagnostics =
    unresolvedNames
    |> Stdlib.List.map (fun (range, error) ->
      createWarningDiagnostic
        range
        (PrettyPrinter.ProgramTypes.NameResolutionError.error error))

  let errorDiagnostics =
    parsedText.unparseableStuff
    |> Stdlib.List.map (fun unparseable ->
      createErrorDiagnostic
        unparseable.source.range
        "Couldn't parse this part of the file")

  let diagnostics = Stdlib.List.append warningDiagnostics errorDiagnostics

  sendDiagnostic requestUri diagnostics




(* future: report diagnostics on content update or save

async function gatherAndReportDiagnostics(
  textDocument: TextDocument,
): Promise<void> {
  const diagnosticsFromDarkResponse = await runDarkCli(
    "@LanguageTools.LanguageServerProtocol.getDiagnostics",
    textDocument.uri,
    JSON.stringify(textDocument.getText()),
  );

  if (diagnosticsFromDarkResponse.stderr) {
    console.error("stderr", diagnosticsFromDarkResponse.stderr);
  } else {
    console.log("got diagnostics back", diagnosticsFromDarkResponse.stdout);
    const diagnosticsFromDark: ComputeDiagnosticsOutput = JSON.parse(
      diagnosticsFromDarkResponse.stdout,
    );
    const diagnostics = diagnosticsFromDark.diagnostics.map(DT2LT.diagnostic);
    connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
  }
}

// when a document is changed or saved, we want to re-run diagnostics
let changeToProcessNext: null | TextDocumentChangeEvent<TextDocument> = null;
let processing = false;
const processChange = async () => {
  if (processing || !changeToProcessNext) return;
  processing = true;
  try {
    const doc = changeToProcessNext.document;
    changeToProcessNext = null;
    await gatherAndReportDiagnostics(doc);
  } finally {
    processing = false;
    if (changeToProcessNext) {
      processChange();
    }
  }
};
documents.onDidSave(change => {
  changeToProcessNext = change;
  processChange();
});
documents.onDidChangeContent(change => {
  changeToProcessNext = change;
  processChange();
});

*)