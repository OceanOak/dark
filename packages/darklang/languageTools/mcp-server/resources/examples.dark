/// Code examples resource
module Darklang.LanguageTools.McpServer.Resources.Examples


/// Get the resource description for examples
let getResourceDescription () : ModelContextProtocol.ResourceDescription =
  ModelContextProtocol.ResourceDescription {
    uri = "darklang://examples"
    name = "Code Examples"
    description = Stdlib.Option.Option.Some "Example Darklang code snippets and patterns"
    mimeType = Stdlib.Option.Option.Some "text/x-darklang"
  }

/// Get examples content
let getContent () : ModelContextProtocol.ResourceContent =
  let examples = """
// Example: Hello World
let main () : Unit =
  Builtin.printLine "Hello, World!"

// Example: List processing
let doubleNumbers (numbers: List<Int64>) : List<Int64> =
  numbers |> Stdlib.List.map (fun n -> n * 2L)

// Example: Error handling
let safeDivide (a: Int64) (b: Int64) : Stdlib.Result.Result<Int64, String> =
  if b == 0L then
    Stdlib.Result.Result.Error "Division by zero"
  else
    Stdlib.Result.Result.Ok (Stdlib.Int64.divide a b)

// Example: Working with Options
let findUser (id: Int64) : Stdlib.Option.Option<String> =
  let users = Stdlib.Dict.fromList [
    ("1", "Alice");
    ("2", "Bob");
    ("3", "Charlie")
  ]
  Stdlib.Dict.get users (Stdlib.Int64.toString id)

// Example: Pattern matching
type Shape =
  | Circle of radius: Float
  | Rectangle of width: Float * height: Float
  | Triangle of base: Float * height: Float

let area (shape: Shape) : Float =
  match shape with
  | Circle radius -> 3.14159 * radius * radius
  | Rectangle(width, height) -> width * height
  | Triangle(base, height) -> 0.5 * base * height
"""

  ModelContextProtocol.ResourceContent {
    uri = "darklang://examples"
    mimeType = "text/x-darklang"
    text = examples
  }