/// Initialization handling for the MCP server
module Darklang.LanguageTools.McpServer


// <aliases>
// Json type alias removed to prevent UNIQUE constraint conflicts - use shared aliases.dark
// </aliases>


/// Handle the MCP initialize request and return initial server state
let handleInitializeRequest 
  (requestId: JsonRPC.RequestId)
  (params: ModelContextProtocol.LifeCycle.InitializeRequest.InitializeParams)
  : McpState =
  log "Handling initialize request"

  // Build server capabilities
  let serverCapabilities = 
    Json.Object [
      ("resources", Json.Object [
        ("subscribe", Json.Bool false);
        ("listChanged", Json.Bool true)
      ]);
      ("tools", Json.Object [
        ("listChanged", Json.Bool true)
      ]);
      ("prompts", Json.Object [
        ("listChanged", Json.Bool true)
      ]);
      ("logging", Json.Object []);
      ("roots", Json.Object [
        ("listChanged", Json.Bool true)
      ])
    ]

  let serverInfo = 
    Json.Object [
      ("name", Json.String "Darklang MCP Server");
      ("version", Json.String "1.0.0")
    ]

  let result = 
    Json.Object [
      ("protocolVersion", Json.String "2025-06-18");
      ("capabilities", serverCapabilities);
      ("serverInfo", serverInfo)
    ]

  // Send the response
  sendSuccessResponse (Stdlib.Option.Option.Some requestId) result

  // Return initialized state with all capabilities loaded
  let state = initialState ()
  
  // Load available tools
  let tools = Tools.getAllTools ()
  
  // Load available resources  
  let resources = Resources.getAllResources ()
  
  // Load available prompts
  let prompts = Prompts.getAllPrompts ()

  { state with
      initialized = true
      tools = tools
      resources = resources
      prompts = prompts }

/// Handle the initialized notification
let handleInitializedNotification (state: McpState) : McpState =
  log "Received initialized notification"
  { state with initialized = true }