/// Execute Darklang code tool
module Darklang.LanguageTools.McpServer.Tools.ExecuteDarklang


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


/// Get the tool description for execute_darklang
let getToolDescription () : ModelContextProtocol.ToolDescription =
  ModelContextProtocol.ToolDescription {
    name = "execute_darklang"
    description = Stdlib.Option.Option.Some "Execute Darklang code and return the result"
    inputSchema = Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("code", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "The Darklang code to execute")
        ]);
        ("timeout", Json.Object [
          ("type", Json.String "number");
          ("description", Json.String "Optional timeout in seconds (default: 30)")
        ])
      ]);
      ("required", Json.Array [Json.String "code"])
    ]
    outputSchema = Stdlib.Option.Option.Some (Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("result", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "The execution result")
        ]);
        ("resultType", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "The type of the result")
        ])
      ])
    ])
    annotations = Stdlib.Option.Option.Some (ModelContextProtocol.ToolAnnotations {
      title = Stdlib.Option.Option.Some "Darklang Code Executor"
      readOnlyHint = Stdlib.Option.Option.Some false
      destructiveHint = Stdlib.Option.Option.Some false
      idempotentHint = Stdlib.Option.Option.Some false
      openWorldHint = Stdlib.Option.Option.Some false
    })
  }

/// Handle the execute_darklang tool call
let handleToolCall (args: Json) : Json =
  let code = 
    match args with
    | Object fields ->
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "code") with
        | Some (_, String code) -> code
        | _ -> ""
    | _ -> ""

  let timeout = 
    match args with
    | Object fields ->
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "timeout") with
        | Some (_, Number n) -> Stdlib.Int64.fromFloat n
        | _ -> 30L
    | _ -> 30L

  // In a real implementation, this would execute the code safely
  let result = $"Executed Darklang code (timeout: {Stdlib.Int64.toString timeout}s):\n{code}\n\nResult: (mock execution completed successfully)"

  (ModelContextProtocol.Tools.CallToolResponse.CallToolResult {
    content = [
      ModelContextProtocol.Tools.CallToolResponse.ContentItem.TextContent result
    ]
    isError = false
  })
  |> ModelContextProtocol.Tools.CallToolResponse.toJson