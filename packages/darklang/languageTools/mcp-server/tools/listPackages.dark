/// List packages tool
module Darklang.LanguageTools.McpServer.Tools.ListPackages


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


/// Get the tool description for list_packages
let getToolDescription () : ModelContextProtocol.ToolDescription =
  ModelContextProtocol.ToolDescription {
    name = "list_packages"
    description = Stdlib.Option.Option.Some "List all available Darklang packages"
    inputSchema = Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("filter", Json.Object [
          ("type", Json.String "string");
          ("description", Json.String "Optional filter pattern for package names")
        ])
      ])
    ]
    outputSchema = Stdlib.Option.Option.Some (Json.Object [
      ("type", Json.String "object");
      ("properties", Json.Object [
        ("packages", Json.Object [
          ("type", Json.String "array");
          ("description", Json.String "List of available packages");
          ("items", Json.Object [
            ("type", Json.String "object");
            ("properties", Json.Object [
              ("name", Json.Object [("type", Json.String "string")]);
              ("description", Json.Object [("type", Json.String "string")])
            ])
          ])
        ])
      ])
    ])
    annotations = Stdlib.Option.Option.Some (ModelContextProtocol.ToolAnnotations {
      title = Stdlib.Option.Option.Some "Package Lister"
      readOnlyHint = Stdlib.Option.Option.Some true
      destructiveHint = Stdlib.Option.Option.Some false
      idempotentHint = Stdlib.Option.Option.Some true
      openWorldHint = Stdlib.Option.Option.Some false
    })
  }

/// Handle the list_packages tool call
let handleToolCall (args: Json) : Json =
  // In a real implementation, this would list actual packages
  let packages = [
    Json.Object [
      ("name", Json.String "darklang/stdlib");
      ("description", Json.String "Standard library functions")
    ];
    Json.Object [
      ("name", Json.String "darklang/http");
      ("description", Json.String "HTTP client and server utilities")
    ];
    Json.Object [
      ("name", Json.String "darklang/test");
      ("description", Json.String "Testing framework")
    ];
    Json.Object [
      ("name", Json.String "darklang/cli");
      ("description", Json.String "Command-line interface tools")
    ];
    Json.Object [
      ("name", Json.String "darklang/languageTools");
      ("description", Json.String "Language server and tooling")
    ]
  ]

  let result = Json.Object [("packages", Json.Array packages)]
  let resultText = Stdlib.AltJson.format result

  (ModelContextProtocol.Tools.CallToolResponse.CallToolResult {
    content = [
      ModelContextProtocol.Tools.CallToolResponse.ContentItem.TextContent resultText
    ]
    isError = false
  })
  |> ModelContextProtocol.Tools.CallToolResponse.toJson