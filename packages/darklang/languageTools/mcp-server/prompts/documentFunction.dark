/// Function documentation prompt
module Darklang.LanguageTools.McpServer.Prompts.DocumentFunction


/// Get the prompt description for function documentation
let getPromptDescription () : ModelContextProtocol.PromptDescription =
  ModelContextProtocol.PromptDescription {
    name = "document_function"
    description = Stdlib.Option.Option.Some "Generate documentation for a Darklang function"
    arguments = Stdlib.Option.Option.Some [
      ModelContextProtocol.PromptArgument {
        name = "function_name"
        description = Stdlib.Option.Option.Some "Name of the function to document"
        required = Stdlib.Option.Option.Some true
      };
      ModelContextProtocol.PromptArgument {
        name = "function_code"
        description = Stdlib.Option.Option.Some "The function implementation"
        required = Stdlib.Option.Option.Some true
      }
    ]
  }

/// Generate the function documentation prompt content
let generatePrompt (functionName: String) (functionCode: String) : List<ModelContextProtocol.PromptMessage> =
  let systemPrompt = "You are a Darklang documentation generator. Create comprehensive documentation for the given function, including a description, parameter details, return type information, and usage examples."

  let userPrompt = $"Please generate documentation for this Darklang function:\n\nFunction name: {functionName}\n\n```darklang\n{functionCode}\n```\n\nInclude:\n1. A brief description of what the function does\n2. Parameter descriptions\n3. Return type and description\n4. Usage example\n5. Any important notes or gotchas"

  [
    ModelContextProtocol.PromptMessage {
      role = ModelContextProtocol.MessageRole.System
      content = ModelContextProtocol.PromptContent.Text systemPrompt
    };
    ModelContextProtocol.PromptMessage {
      role = ModelContextProtocol.MessageRole.User  
      content = ModelContextProtocol.PromptContent.Text userPrompt
    }
  ]