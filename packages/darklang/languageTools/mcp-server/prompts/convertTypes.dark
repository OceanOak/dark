/// Type conversion prompt
module Darklang.LanguageTools.McpServer.Prompts.ConvertTypes


/// Get the prompt description for type conversion
let getPromptDescription () : ModelContextProtocol.PromptDescription =
  ModelContextProtocol.PromptDescription {
    name = "convert_types"
    description = Stdlib.Option.Option.Some "Help convert between different Darklang type representations"
    arguments = Stdlib.Option.Option.Some [
      ModelContextProtocol.PromptArgument {
        name = "from_type"
        description = Stdlib.Option.Option.Some "Source type"
        required = Stdlib.Option.Option.Some true
      }
      ModelContextProtocol.PromptArgument {
        name = "to_type"
        description = Stdlib.Option.Option.Some "Target type"
        required = Stdlib.Option.Option.Some true
      }
      ModelContextProtocol.PromptArgument {
        name = "value"
        description = Stdlib.Option.Option.Some "Value to convert"
        required = Stdlib.Option.Option.Some false
      }
    ]
  }

/// Generate the type conversion prompt content
let generatePrompt (fromType: String) (toType: String) (value: Stdlib.Option.Option<String>) : List<ModelContextProtocol.PromptMessage> =
  let valueText =
    match value with
    | Some v -> $" for the value: {v}"
    | None -> ""

  let systemPrompt = "You are a Darklang type conversion assistant. Help convert values between different Darklang types, providing the appropriate conversion functions and explaining any potential issues or considerations."

  let userPrompt = $"I need to convert from type `{fromType}` to type `{toType}`{valueText}.\n\nPlease provide:\n1. The appropriate conversion function(s) to use\n2. Example code showing the conversion\n3. Any potential issues or edge cases to consider\n4. Alternative approaches if direct conversion isn't possible"

  [
    ModelContextProtocol.PromptMessage {
      role = ModelContextProtocol.MessageRole.System
      content = ModelContextProtocol.PromptContent.Text systemPrompt
    };
    ModelContextProtocol.PromptMessage {
      role = ModelContextProtocol.MessageRole.User
      content = ModelContextProtocol.PromptContent.Text userPrompt
    }
  ]