/// Prompt handlers for the MCP server
module Darklang.LanguageTools.McpServer.PromptHandlers


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


/// Handle a prompts/list request
let handleListPromptsRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  : McpState =
  log "Handling prompts/list request"

  let promptsList = state.prompts |> Stdlib.Dict.values
  let result = Json.Object [
    ("prompts", Json.Array (promptsList |> Stdlib.List.map (fun prompt ->
      Json.Object [
        ("name", Json.String prompt.name);
        ("description", Stdlib.Option.mapWithDefault prompt.description Json.Null (fun s -> Json.String s));
        ("arguments", 
          match prompt.arguments with
          | Some args ->
              Json.Array (args |> Stdlib.List.map (fun arg ->
                Json.Object [
                  ("name", Json.String arg.name);
                  ("description", Stdlib.Option.mapWithDefault arg.description Json.Null (fun s -> Json.String s));
                  ("required", Stdlib.Option.mapWithDefault arg.required Json.Null (fun b -> Json.Bool b))
                ]))
          | None -> Json.Array []
        )
      ]
    )));
    ("nextCursor", Json.String "")
  ]

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) result
  state

/// Handle a prompts/get request
let handleGetPromptRequest
  (state: McpState)
  (requestId: JsonRPC.RequestId)
  (name: String)
  (arguments: Json)
  : McpState =
  log $"Handling prompts/get request for: {name}"

  let messages = Prompts.generatePromptContent name arguments

  let response =
    (ModelContextProtocol.Prompts.GetPromptResponse.GetPromptResult {
      description = Stdlib.Option.Option.None
      messages = messages
    })
    |> ModelContextProtocol.Prompts.GetPromptResponse.toJson

  sendSuccessResponse (Stdlib.Option.Option.Some requestId) response
  state