module Darklang.ModelContextProtocol.ServerBuilder.Core


// Create a new server builder with initial tools, resources, and prompts
let create (name: String) (tools: List<Common.ToolDefinition>) (resources: List<Common.ResourceDefinition>) (prompts: List<Common.PromptDefinition>) : McpServerBuilder =
  let toolsDict =
    tools
    |> Stdlib.List.map (fun toolDef -> (toolDef.description.name, toolDef))
    |> Stdlib.Dict.fromList
    |> Stdlib.Option.withDefault Stdlib.Dict.empty

  let resourcesDict =
    resources
    |> Stdlib.List.map (fun resourceDef -> (resourceDef.description.uri, resourceDef))
    |> Stdlib.Dict.fromList
    |> Stdlib.Option.withDefault Stdlib.Dict.empty

  let promptsDict =
    prompts
    |> Stdlib.List.map (fun promptDef -> (promptDef.description.name, promptDef))
    |> Stdlib.Dict.fromList
    |> Stdlib.Option.withDefault Stdlib.Dict.empty

  McpServerBuilder {
    name = name
    tools = toolsDict
    resources = resourcesDict
    prompts = promptsDict
  }


// Get all tool descriptions from the builder
let getToolDescriptions (server: McpServerBuilder) : Dict<ModelContextProtocol.ToolDescription> =
  server.tools
  |> Stdlib.Dict.map (fun _key toolDef -> toolDef.description)


// Get all resource descriptions from the builder
let getResourceDescriptions (server: McpServerBuilder) : Dict<ModelContextProtocol.Resources.ListResourcesResponse.ResourceDescription> =
  server.resources
  |> Stdlib.Dict.map (fun _key resourceDef ->
    let desc = resourceDef.description
    ModelContextProtocol.Resources.ListResourcesResponse.ResourceDescription {
      uri = desc.uri
      name = desc.name
      description = desc.description
      mimeType = desc.mimeType
    })


// Get all prompt descriptions from the builder
let getPromptDescriptions (server: McpServerBuilder) : Dict<ModelContextProtocol.PromptDescription> =
  server.prompts
  |> Stdlib.Dict.map (fun _key promptDef -> promptDef.description)