module Darklang.Stdlib.Int32


type ParseError =
  | BadFormat
  | OutOfRange


/// Returns the result of wrapping <param a> around so that {{0 <= res < b}}.
/// The modulus <param b> must be greater than 0
/// Use <fn Int32.remainder> if you want the remainder after division, which has
/// a different behavior for negative numbers.
let ``mod`` (a: Int32) (b: Int32) : Int32 = Builtin.int32Mod a b


/// Returns the integer remainder left over after dividing <param value> by
/// <param divisor>, as a <type Result>.
/// For example, {{Int32.remainder 15 6 == Ok 3}}. The remainder will be
/// negative only if {{<var value> < 0}}.
/// The sign of <param divisor> doesn't influence the outcome.
/// Returns an {{Error}} if <param divisor> is {{0}}.
let remainder
  (value: Int32)
  (divisor: Int32)
  : Stdlib.Result.Result<Int32, String> =
  Builtin.int32Remainder value divisor


/// Adds two integers together
let add (a: Int32) (b: Int32) : Int32 = Builtin.int32Add a b


/// Subtracts two integers
let subtract (a: Int32) (b: Int32) : Int32 = Builtin.int32Subtract a b


/// Multiplies two integers
let multiply (a: Int32) (b: Int32) : Int32 = Builtin.int32Multiply a b


/// Divides two integers
let divide (a: Int32) (b: Int32) : Int32 = Builtin.int32Divide a b


/// Raise <param base> to the power of <param exponent>.
/// <param exponent> must to be positive.
/// Return value wrapped in a {{Result}}
let power (``base``: Int32) (exponent: Int32) : Int32 =
  // Handle some edge cases around 1. We want to make this match
  // OCaml, so we have to support an exponent below int32
  // This only matters for 1 or -1, and otherwise a
  // number raised to an int32 exponent wouldn't fit in an int32
  if ``base`` == 0l && exponent == 0l then
    1l
  else if ``base`` == 0l then
    0l
  else if ``base`` == 1l then
    1l
  else if ``base`` == -1l && (Builtin.int32Mod exponent 2l == 0l) then
    1l
  else if ``base`` == -1l then
    -1l
  else
    Builtin.int32Power ``base`` exponent


/// Returns the absolute value of <param a> (turning negative inputs into positive outputs)
let absoluteValue (a: Int32) : Int32 =
  if Builtin.int32LessThan a 0l then
    Builtin.int32Negate a
  else
    a


/// Returns the negation of <param a>, {{-a}}
let negate (a: Int32) : Int32 = Builtin.int32Negate a


/// Returns {{true}} if <param a> is greater than <param b>
let greaterThan (a: Int32) (b: Int32) : Bool = Builtin.int32GreaterThan a b


/// Returns {{true}} if <param a> is greater than or equal to <param b>
let greaterThanOrEqualTo (a: Int32) (b: Int32) : Bool =
  Builtin.int32GreaterThanOrEqualTo a b


/// Returns {{true}} if <param a> is less than <param b>
let lessThan (a: Int32) (b: Int32) : Bool = Builtin.int32LessThan a b

/// Returns {{true}} if <param a> is less than or equal to <param b>
let lessThanOrEqualTo (a: Int32) (b: Int32) : Bool =
  Builtin.int32LessThanOrEqualTo a b


/// Returns a random integer between <param start> and <param end> (inclusive)
let random (start: Int32) (``end``: Int32) : Int32 =
  Builtin.int32Random start ``end``


/// Get the square root of an <type Int32>
let sqrt (a: Int32) : Float = Builtin.int32Sqrt a


/// Converts an <type Int32> to a <type Float>
let toFloat (a: Int32) : Float = Builtin.int32ToFloat a


/// Returns the sum of all the ints in the list
let sum (lst: List<Int32>) : Int32 =
  Stdlib.List.fold lst 0l (fun acc x -> Builtin.int32Add acc x)


/// Returns the higher of <param a> and <param b>
let max (a: Int32) (b: Int32) : Int32 =
  if Builtin.int32GreaterThan a b then a else b


/// Returns the lower of <param a> and <param b>
let min (a: Int32) (b: Int32) : Int32 =
  if Builtin.int32LessThan a b then a else b


/// If <param value> is within the range given by <param limitA> and <param
/// limitB>, returns <param value>.
/// If <param value> is outside the range, returns <param limitA> or <param
/// limitB>, whichever is closer to <param value>.
/// <param limitA> and <param limitB> can be provided in any order.
let clamp (value: Int32) (limitA: Int32) (limitB: Int32) : Int32 =
  let min =
    if Builtin.int32LessThan limitA limitB then
      limitA
    else
      limitB

  let max =
    if Builtin.int32GreaterThan limitA limitB then
      limitA
    else
      limitB

  if Builtin.int32LessThan value min then min
  else if Builtin.int32GreaterThan value max then max
  else value


/// Returns the <type Int32> value of a <type String>
let parse (s: String) : Stdlib.Result.Result<Int32, Stdlib.Int32.ParseError> =
  Builtin.int32Parse s


/// Stringify <param int>
let toString (int: Int32) : String = Builtin.int32ToString int


/// Converts an <type Int8> to a <type Int32>.
let fromInt8 (i: Int8) : Int32 = Builtin.int32FromInt8 i


/// Converts a <type UInt8> to a <type Int32>.
let fromUInt8 (i: UInt8) : Int32 = Builtin.int32FromUInt8 i


/// Converts an <type Int16> to a <type Int32>.
let fromInt16 (i: Int16) : Int32 = Builtin.int32FromInt16 i


/// Converts a <type UInt16> to a <type Int32>.
let fromUInt16 (i: UInt16) : Int32 = Builtin.int32FromUInt16 i


/// Converts a <type UInt32> to a <type Int32>. Returns {{None}} if the value is greater than 2147483647.
let fromUInt32 (i: UInt32) : Stdlib.Option.Option<Int32> =
  Builtin.int32FromUInt32 i


/// Converts an <type Int64> to a <type Int32>. Returns {{None}} if the value is less than -2147483648 or greater than 2147483647.
let fromInt64 (i: Int64) : Stdlib.Option.Option<Int32> =
  Builtin.int32FromInt64 i


/// Converts a <type UInt64> to a <type Int32>. Returns {{None}} if the value is greater than 2147483647.
let fromUInt64 (i: UInt64) : Stdlib.Option.Option<Int32> =
  Builtin.int32FromUInt64 i


/// Converts an <type Int128> to a <type Int32>. Returns {{None}} if the value is less than -2147483648 or greater than 2147483647.
let fromInt128 (i: Int128) : Stdlib.Option.Option<Int32> =
  Builtin.int32FromInt128 i


/// Converts a <type UInt128> to a <type Int32>. Returns {{None}} if the value is greater than 2147483647.
let fromUInt128 (i: UInt128) : Stdlib.Option.Option<Int32> =
  Builtin.int32FromUInt128 i