module Darklang.Stdlib.Char


/// Return the uppercase value of <param c>. If <param c> does not have an uppercase value, returns <param c>
let toUppercase (c: Char) : Char = Builtin.charToUppercase c


/// Return the lowercase value of <param c>. If <param c> does not have a lowercase value, returns <param c>
let toLowercase (c: Char) : Char = Builtin.charToLowercase c


/// Return whether <param c> is a lowercase character.
let isLowercase (c: Char) : Bool =
  Stdlib.Char.toLowercase c == c && Stdlib.Char.toUppercase c != c


/// Return whether <param c> is an uppercase character.
let isUppercase (c: Char) : Bool =
  Stdlib.Char.toLowercase c != c && Stdlib.Char.toUppercase c == c


/// Return whether <param c> is a digit (that is, the digits 0-9)
let isDigit (c: Char) : Bool =
  (Stdlib.Char.isGreaterThanOrEqualTo c '0')
  && (Stdlib.Char.isLessThanOrEqualTo c '9')


/// Return whether <param c> is an ASCII letter
let isASCIILetter (c: Char) : Bool =
  (Stdlib.Char.isGreaterThanOrEqualTo c 'a')
  && (Stdlib.Char.isLessThanOrEqualTo c 'z')
  || (Stdlib.Char.isGreaterThanOrEqualTo c 'A')
      && (Stdlib.Char.isLessThanOrEqualTo c 'Z')


/// Return whether <param c> is a valid ASCII character
let isASCII (c: Char) : Bool =
  let asciiCode = Stdlib.Char.toAsciiCode c

  match asciiCode with
  | Some ascii -> (ascii >= 0L) && (ascii <= 127L)
  | None -> false


/// Return {{Some <var code>}} if <param c> is a valid ASCII character, otherwise {{None}}"
let toAsciiCode (c: Char) : Stdlib.Option.Option<Int64> =
  Builtin.charToAsciiCode c


/// Return whether <param c1> is less than <param c2>
let isLessThan (c1: Char) (c2: Char) : Bool = Builtin.charIsLessThan c1 c2


/// Return whether <param c1> is less than or equal to <param c2>
let isLessThanOrEqualTo (c1: Char) (c2: Char) : Bool =
  Builtin.charIsLessThanOrEqualTo c1 c2


/// Return whether <param c1> is greater than <param c2>
let isGreaterThan (c1: Char) (c2: Char) : Bool =
  Builtin.charIsGreaterThan c1 c2


/// Return whether <param c1> is greater than or equal to <param c2>
let isGreaterThanOrEqualTo (c1: Char) (c2: Char) : Bool =
  Builtin.charIsGreaterThanOrEqualTo c1 c2


/// Stringify <param c>
let toString (c: Char) : String = Builtin.charToString c