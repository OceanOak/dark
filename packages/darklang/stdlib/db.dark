module Darklang.Stdlib.DB


// CLEANUP: change the table type to DB<'a> when we remove LibParser
/// Upsert <param val> into <param table>, accessible by <param key>
let set (value: 'a) (key: String) (table: 'a) : 'a =
  Builtin.dbSet value key table


/// Finds a value in <param table> by <param key>
let get (key: String) (table: 'a) : 'a = Builtin.dbGet key table


/// Finds many values in <param table> by <param keys>.
///
/// If all <param keys> are found, returns Some a list of [values],
/// otherwise returns None (to ignore missing keys, use DB.etExisting)
let getMany (keys: List<String>) (table: 'a) : Stdlib.Option.Option<List<'a>> =
  Builtin.dbGetMany keys table


/// Finds many values in <param table> by <param keys> (ignoring any missing items),
/// returning a {{ [value] }} list of values"
let getExisting (keys: List<String>) (table: 'a) : List<'a> =
  Builtin.dbGetExisting keys table


/// Finds many values in <param table> by <param keys>,
/// returning a {{ {key:{value}, key2: {value2} } }} object of keys and values
let getManyWithKeys (keys: List<String>) (table: 'a) : Dict<'a> =
  Builtin.dbGetManyWithKeys keys table


/// Delete <param key> from <param table>"
let delete (key: String) (table: 'a) : Unit = Builtin.dbDelete key table


/// Delete everything from <param table>
let deleteAll (table: 'a) : Unit = Builtin.dbDeleteAll table


/// Fetch all the values in <param table>
let getAll (table: 'a) : List<'a> = Builtin.dbGetAll table


/// Fetch all the values in <param table>.
/// Returns an object with key: value. ie. {key : value, key2: value2}
let getAllWithKeys (table: 'a) : Dict<'a> = Builtin.dbGetAllWithKeys table


/// Return the number of items stored in <param table>
let count (table: 'a) : Int64 = Builtin.dbCount table


/// Returns a random key suitable for use as a DB key
let generateKey () : String = Builtin.dbGenerateKey ()


/// Fetch all the keys of entries in <param table>.
/// Returns an list with strings
let keys (table: 'a) : List<String> = Builtin.dbKeys table


// /// Fetch all the values from <param table> for which filter returns true. Note that this does not check every value in <param table>,
// /// but rather is optimized to find data with indexes. Errors at compile-time if Dark's compiler does not support the code in question.
// let query (table: 'a) (filter: ('a -> Bool)) : List<'a> =
//   Builtin.dbQuery table filter


// /// Fetch all the values from <param table> for which filter returns true, returning {key : value} as an dict.
// /// Note that this does not check every value in <param table>, but rather is optimized to find data with indexes.
// /// Errors at compile-time if Dark's compiler does not support the code in question.
// let queryWithKey (table: 'a) (filter: ('a -> Bool)) : Dict<'a> =
//   Builtin.dbQueryWithKey table filter


// /// Fetch exactly one value from <param table> for which filter returns true.
// /// Note that this does not check every value in <param table>, but rather is optimized to find data with indexes.
// /// If there is exactly one value, it returns Some value and if there is none or more than 1 found, it returns None.
// /// Errors at compile-time if Dark's compiler does not support the code in question.
// let queryOne (table: 'a) (filter: ('a -> Bool)) : Stdlib.Option.Option<'a> =
//   Builtin.dbQueryOne table filter


// /// Fetch exactly one value from <param table> for which filter returns true. Note that this does not check every value in <param table>,
// /// but rather is optimized to find data with indexes. If there is exactly one key/value pair, it returns Some {key: value} and if there is none or more than 1 found, it returns None.
// /// Errors at compile-time if Dark's compiler does not support the code in question.
// let queryOneWithKey
//   (table: 'a)
//   (filter: ('a -> Bool))
//   : Stdlib.Option.Option<String * 'a> =
//   Builtin.dbQueryOneWithKey table filter


// /// Return the number of items from <param table> for which filter returns true. Note that this does not check every value in <param table>, but rather is optimized to find data with indexes.
// /// Errors at compile-time if Dark's compiler does not support the code in question.
// let queryCount (table: 'a) (filter: ('a -> Bool)) : Int64 =
//   Builtin.dbQueryCount table filter