module Darklang.Stdlib.Int8


type ParseError =
  | BadFormat
  | OutOfRange


/// Returns the result of wrapping <param a> around so that {{0 <= res < b}}.
/// The modulus <param b> must be greater than 0.
/// Use <fn Int8.remainder> if you want the remainder after division, which has
/// a different behavior for negative numbers.
let ``mod`` (a: Int8) (b: Int8) : Int8 = Builtin.int8Mod a b


/// Returns the integer remainder left over after dividing <param value> by
/// <param divisor>, as a <type Result>.
/// For example, {{Int8.remainder 15 6 == Ok 3}}. The remainder will be
/// negative only if {{<var value> < 0}}.
/// The sign of <param divisor> doesn't influence the outcome.
/// Returns an {{Error}} if <param divisor> is {{0}}.
let remainder
  (value: Int8)
  (divisor: Int8)
  : Stdlib.Result.Result<Int8, String> =
  Builtin.int8Remainder value divisor


/// Adds two 8-bit signed integers together
let add (a: Int8) (b: Int8) : Int8 = Builtin.int8Add a b


/// Subtracts two 8-bit signed integers
let subtract (a: Int8) (b: Int8) : Int8 = Builtin.int8Subtract a b


/// Multiplies two 8-bit signed integers
let multiply (a: Int8) (b: Int8) : Int8 = Builtin.int8Multiply a b


/// Raise <param base> to the power of <param exponent>.
/// <param exponent> must to be positive.
/// Return value wrapped in a {{Result}}
let power (``base``: Int8) (exponent: Int8) : Int8 =
  // Handle some edge cases around 1. We want to make this match
  // OCaml, so we have to support an exponent below int8
  // This only matters for 1 or -1, and otherwise a
  // number raised to an int8 exponent wouldn't fit in an int8
  if ``base`` == 0y && exponent == 0y then
    1y
  else if ``base`` == 0y then
    0y
  else if ``base`` == 1y then
    1y
  else if ``base`` == -1y && (Builtin.int8Mod exponent 2y == 0y) then
    1y
  else if ``base`` == -1y then
    -1y
  else
    Builtin.int8Power ``base`` exponent


/// Divides two 8-bit signed integers
let divide (a: Int8) (b: Int8) : Int8 = Builtin.int8Divide a b


/// Returns the absolute value of <param a> (turning negative inputs into positive outputs)
let absoluteValue (a: Int8) : Int8 =
  if (Builtin.int8LessThan a 0y) then
    Builtin.int8Negate a
  else
    a


/// Returns the negation of <param a>, {{-a}}
let negate (a: Int8) : Int8 = Builtin.int8Negate a


/// Returns {{true}} if <param a> is greater than <param b>
let greaterThan (a: Int8) (b: Int8) : Bool = Builtin.int8GreaterThan a b


/// Returns {{true}} if <param a> is greater than or equal to <param b>
let greaterThanOrEqualTo (a: Int8) (b: Int8) : Bool =
  Builtin.int8GreaterThanOrEqualTo a b


/// Returns {{true}} if <param a> is less than <param b>
let lessThan (a: Int8) (b: Int8) : Bool = Builtin.int8LessThan a b

/// Returns {{true}} if <param a> is less than or equal to <param b>
let lessThanOrEqualTo (a: Int8) (b: Int8) : Bool =
  Builtin.int8LessThanOrEqualTo a b


/// Returns a random 8-bit signed integer between <param start> and <param end> (inclusive)
let random (start: Int8) (``end``: Int8) : Int8 =
  Builtin.int8Random start ``end``


/// Get the square root of an <type Int8>
let sqrt (a: Int8) : Float = Builtin.int8Sqrt a


/// Converts an <type Int8> to a <type Float>
let toFloat (a: Int8) : Float = Builtin.int8ToFloat a


/// Returns the sum of all the ints in the list
let sum (lst: List<Int8>) : Int8 =
  Stdlib.List.fold lst 0y (fun acc x -> acc + x)


/// Returns the higher of <param a> and <param b>
let max (a: Int8) (b: Int8) : Int8 =
  if (Stdlib.Int8.greaterThan a b) then a else b


/// Returns the lower of <param a> and <param b>
let min (a: Int8) (b: Int8) : Int8 =
  if (Stdlib.Int8.lessThan a b) then a else b


/// If <param value> is within the range given by <param limitA> and <param
/// limitB>, returns <param value>.
/// If <param value> is outside the range, returns <param limitA> or <param
/// limitB>, whichever is closer to <param value>.
/// <param limitA> and <param limitB> can be provided in any order.
let clamp (value: Int8) (limitA: Int8) (limitB: Int8) : Int8 =
  let min =
    if (Stdlib.Int8.lessThan limitA limitB) then
      limitA
    else
      limitB

  let max =
    if (Stdlib.Int8.greaterThan limitA limitB) then
      limitA
    else
      limitB

  if (Stdlib.Int8.lessThan value min) then min
  else if (Stdlib.Int8.greaterThan value max) then max
  else value


/// Returns the <type Int8> value of a <type String>
let parse (s: String) : Stdlib.Result.Result<Int8, Stdlib.Int8.ParseError> =
  Builtin.int8Parse s


/// Stringify <param int8>
let toString (int8: Int8) : String = Builtin.int8ToString int8


/// Converts a <type UInt8> to an <type Int8>. Returns {{None}} if the value is greater than 127.
let fromUInt8 (i: UInt8) : Stdlib.Option.Option<Int8> = Builtin.int8FromUInt8 i


/// Converts an <type Int16> to an <type Int8>. Returns {{None}} if the value is less than -128 or greater than 127.
let fromInt16 (i: Int16) : Stdlib.Option.Option<Int8> = Builtin.int8FromInt16 i


/// Converts a <type UInt16> to an <type Int8>. Returns {{None}} if the value is greater than 127.
let fromUInt16 (i: UInt16) : Stdlib.Option.Option<Int8> =
  Builtin.int8FromUInt16 i


/// Converts an <type Int32> to an <type Int8>. Returns {{None}} if the value is less than -128 or greater than 127.
let fromInt32 (i: Int32) : Stdlib.Option.Option<Int8> = Builtin.int8FromInt32 i


/// Converts a <type UInt32> to an <type Int8>. Returns {{None}} if the value is greater than 127.
let fromUInt32 (i: UInt32) : Stdlib.Option.Option<Int8> =
  Builtin.int8FromUInt32 i


/// Converts an <type Int64> to an <type Int8>. Returns {{None}} if the value is less than -128 or greater than 127.
let fromInt64 (i: Int64) : Stdlib.Option.Option<Int8> = Builtin.int8FromInt64 i


/// Converts a <type UInt64> to an <type Int8>. Returns {{None}} if the value is greater than 127.
let fromUInt64 (i: UInt64) : Stdlib.Option.Option<Int8> =
  Builtin.int8FromUInt64 i


/// Converts an <type Int128> to an <type Int8>. Returns {{None}} if the value is less than -128 or greater than 127.
let fromInt128 (i: Int128) : Stdlib.Option.Option<Int8> =
  Builtin.int8FromInt128 i


/// Converts a <type UInt128> to an <type Int8>. Returns {{None}} if the value is greater than 127.
let fromUInt128 (i: UInt128) : Stdlib.Option.Option<Int8> =
  Builtin.int8FromUInt128 i