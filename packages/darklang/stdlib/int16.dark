module Darklang.Stdlib.Int16


type ParseError =
  | BadFormat
  | OutOfRange


/// Returns the result of wrapping <param a> around so that {{0 <= res < b}}.
/// The modulus <param b> must be greater than 0.
/// Use <fn Int16.remainder> if you want the remainder after division, which has
/// a different behavior for negative numbers.
let ``mod`` (a: Int16) (b: Int16) : Int16 = Builtin.int16Mod a b


/// Returns the integer remainder left over after dividing <param value> by
/// <param divisor>, as a <type Result>.
/// For example, {{Int16.remainder 15 6 == Ok 3}}. The remainder will be
/// negative only if {{<var value> < 0}}.
/// The sign of <param divisor> doesn't influence the outcome.
/// Returns an {{Error}} if <param divisor> is {{0}}.
let remainder
  (value: Int16)
  (divisor: Int16)
  : Stdlib.Result.Result<Int16, String> =
  Builtin.int16Remainder value divisor


/// Adds two 16-bit signed integers together
let add (a: Int16) (b: Int16) : Int16 = Builtin.int16Add a b


/// Subtracts two 16-bit signed integers
let subtract (a: Int16) (b: Int16) : Int16 = Builtin.int16Subtract a b


/// Multiplies two 16-bit signed integers
let multiply (a: Int16) (b: Int16) : Int16 = Builtin.int16Multiply a b


/// Raise <param base> to the power of <param exponent>.
/// <param exponent> must to be positive.
/// Return value wrapped in a {{Result}}
let power (``base``: Int16) (exponent: Int16) : Int16 =
  // Handle some edge cases around 1. We want to make this match
  // OCaml, so we have to support an exponent below int16
  // This only matters for 1 or -1, and otherwise a
  // number raised to an int16 exponent wouldn't fit in an int16
  if ``base`` == 0s && exponent == 0s then
    1s
  else if ``base`` == 0s then
    0s
  else if ``base`` == 1s then
    1s
  else if ``base`` == -1s && (Builtin.int16Mod exponent 2s == 0s) then
    1s
  else if ``base`` == -1s then
    -1s
  else
    Builtin.int16Power ``base`` exponent


/// Divides two 16-bit signed integers
let divide (a: Int16) (b: Int16) : Int16 = Builtin.int16Divide a b


/// Returns the absolute value of <param a> (turning negative inputs into positive outputs)
let absoluteValue (a: Int16) : Int16 =
  if (Builtin.int16LessThan a 0s) then
    Builtin.int16Negate a
  else
    a


/// Returns the negation of <param a>, {{-a}}
let negate (a: Int16) : Int16 = Builtin.int16Negate a


/// Returns {{true}} if <param a> is greater than <param b>
let greaterThan (a: Int16) (b: Int16) : Bool = Builtin.int16GreaterThan a b


/// Returns {{true}} if <param a> is greater than or equal to <param b>
let greaterThanOrEqualTo (a: Int16) (b: Int16) : Bool =
  Builtin.int16GreaterThanOrEqualTo a b


/// Returns {{true}} if <param a> is less than <param b>
let lessThan (a: Int16) (b: Int16) : Bool = Builtin.int16LessThan a b

/// Returns {{true}} if <param a> is less than or equal to <param b>
let lessThanOrEqualTo (a: Int16) (b: Int16) : Bool =
  Builtin.int16LessThanOrEqualTo a b


/// Returns a random 16-bit signed integer between <param start> and <param end> (inclusive)
let random (start: Int16) (``end``: Int16) : Int16 =
  Builtin.int16Random start ``end``


/// Get the square root of an <type Int16>
let sqrt (a: Int16) : Float = Builtin.int16Sqrt a


/// Converts an <type Int16> to a <type Float>
let toFloat (a: Int16) : Float = Builtin.int16ToFloat a


/// Returns the sum of all the ints in the list
let sum (lst: List<Int16>) : Int16 =
  Stdlib.List.fold lst 0s (fun acc x -> acc + x)


/// Returns the higher of <param a> and <param b>
let max (a: Int16) (b: Int16) : Int16 =
  if (Stdlib.Int16.greaterThan a b) then a else b


/// Returns the lower of <param a> and <param b>
let min (a: Int16) (b: Int16) : Int16 =
  if (Stdlib.Int16.lessThan a b) then a else b


/// If <param value> is within the range given by <param limitA> and <param
/// limitB>, returns <param value>.
/// If <param value> is outside the range, returns <param limitA> or <param
/// limitB>, whichever is closer to <param value>.
/// <param limitA> and <param limitB> can be provided in any order.
let clamp (value: Int16) (limitA: Int16) (limitB: Int16) : Int16 =
  let min =
    if (Stdlib.Int16.lessThan limitA limitB) then
      limitA
    else
      limitB

  let max =
    if (Stdlib.Int16.greaterThan limitA limitB) then
      limitA
    else
      limitB

  if (Stdlib.Int16.lessThan value min) then min
  else if (Stdlib.Int16.greaterThan value max) then max
  else value


/// Returns the <type Int16> value of a <type String>
let parse (s: String) : Stdlib.Result.Result<Int16, Stdlib.Int16.ParseError> =
  Builtin.int16Parse s


/// Stringify <param int16>
let toString (int16: Int16) : String = Builtin.int16ToString int16


/// Converts an <type Int8> to an <type Int16>.
let fromInt8 (i: Int8) : Int16 = Builtin.int16FromInt8 i


/// Converts a <type UInt8> to an <type Int16>.
let fromUInt8 (i: UInt8) : Int16 = Builtin.int16FromUInt8 i


/// Converts a <type UInt16> to an <type Int16>. Returns {{None}} if the value is greater than 32767.
let fromUInt16 (i: UInt16) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromUInt16 i


/// Converts an <type Int32> to an <type Int16>. Returns {{None}} if the value is less than -32768 or greater than 32767.
let fromInt32 (i: Int32) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromInt32 i


/// Converts a <type UInt32> to an <type Int16>. Returns {{None}} if the value is greater than 32767.
let fromUInt32 (i: UInt32) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromUInt32 i


/// Converts an <type Int64> to an <type Int16>. Returns {{None}} if the value is less than -32768 or greater than 32767.
let fromInt64 (i: Int64) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromInt64 i


/// Converts a <type UInt64> to an <type Int16>. Returns {{None}} if the value is greater than 32767.
let fromUInt64 (i: UInt64) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromUInt64 i


/// Converts an <type Int128> to an <type Int16>. Returns {{None}} if the value is less than -32768 or greater than 32767.
let fromInt128 (i: Int128) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromInt128 i


/// Converts a <type UInt128> to an <type Int16>. Returns {{None}} if the value is greater than 32767.
let fromUInt128 (i: UInt128) : Stdlib.Option.Option<Int16> =
  Builtin.int16FromUInt128 i