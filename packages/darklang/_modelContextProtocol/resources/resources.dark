// Resource-related functionality for the Model Context Protocol
module Darklang.ModelContextProtocol.Resources


/// Schema for the listResources request
module ListResourcesRequest =
  type ListResourcesParams = Unit

  let fromJson (json: Json) : Stdlib.Result.Result<ListResourcesParams, String> =
    Stdlib.Result.Result.Ok ()

  let toJson (_idk: ListResourcesParams) : Json =
    Json.Object []

/// Schema for the listResourceTemplates request
module ListResourceTemplatesRequest =
  type ListResourceTemplatesParams = Unit

  let fromJson (json: Json) : Stdlib.Result.Result<ListResourceTemplatesParams, String> =
    Stdlib.Result.Result.Ok ()

  let toJson (_idk: ListResourceTemplatesParams) : Json =
    Json.Object []

/// Schema for the readResource request
module ReadResourceRequest =
  type ReadResourceParams =
    { uri: ResourceUri }

  let fromJson (json: Json) : Stdlib.Result.Result<ReadResourceParams, String> =
    match json with
    | Object fields ->
      match Stdlib.List.findFirst fields (fun (k, _) -> k == "uri") with
      | Some (_, String uri) ->
          Stdlib.Result.Result.Ok { uri = uri }
      | Some (_, _) ->
          Stdlib.Result.Result.Error "uri must be a string"
      | None ->
          Stdlib.Result.Result.Error "uri is required"
    | _ ->
        Stdlib.Result.Result.Error "params must be an object"

  let toJson (params: ReadResourceParams) : Json =
    Json.Object [
      ("uri", Json.String params.uri)
    ]

/// Helper functions for working with resources
module Helpers =
  /// Check if a URI matches a URI template
  let uriMatchesTemplate (uri: ResourceUri) (template: ResourceUriTemplate) : Bool =
    // Simple implementation - just checks if the URI starts with the template
    // A more sophisticated implementation would handle URI template variables
    Stdlib.String.startsWith uri template

  /// Extract variables from a URI based on a template
  let extractUriVariables (uri: ResourceUri) (template: ResourceUriTemplate) : Stdlib.Option.Option<Dict<String>> =
    // This is a simplified implementation that assumes templates use {varName} syntax
    // A more complete implementation would handle more complex URI template syntax

    // Split both the URI and template into segments
    let uriSegments = Stdlib.String.split uri "/"
    let templateSegments = Stdlib.String.split template "/"

    // If they have different lengths, they don't match
    if Stdlib.List.length uriSegments != Stdlib.List.length templateSegments then
      Stdlib.Option.Option.None
    else
      // Extract variables from each segment
      let variablePairs =
        (Stdlib.List.zip uriSegments templateSegments)
        |> Stdlib.List.filterMap (fun (uriSeg, templateSeg) ->
          // Check if this segment is a variable (enclosed in {})
          if Stdlib.String.startsWith templateSeg "{" && Stdlib.String.endsWith templateSeg "}" then
            // Extract the variable name (remove the {})
            let varName =
              templateSeg
              |> Stdlib.String.dropFirst 1L
              |> Stdlib.String.dropLast 1L

            Stdlib.Option.Option.Some (varName, uriSeg)
          else if uriSeg == templateSeg then
            // This is a static segment that matches
            Stdlib.Option.Option.None
          else
            // This is a static segment that doesn't match
            Stdlib.Option.Option.None
        )

      // Convert the list of pairs to a dictionary
      (Stdlib.Dict.fromList variablePairs)
      |> Stdlib.Option.Option.Some