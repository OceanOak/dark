// Tool-related functionality for the Model Context Protocol
module Darklang.ModelContextProtocol.Tools


/// Schema for the listTools request
module ListToolsRequest =
  type ListToolsParams = Unit

  let fromJson (json: Json) : Stdlib.Result.Result<ListToolsParams, String> =
    Stdlib.Result.Result.Ok ()

  let toJson (_idk: ListToolsParams) : Json =
    Json.Object []

/// Schema for the callTool request
module CallToolRequest =
  type CallToolParams =
    { name: ToolId
      arguments: Json }

  let fromJson (json: Json) : Stdlib.Result.Result<CallToolParams, String> =
    match json with
    | Object fields ->
      let nameResult =
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "name") with
        | Some (_, String name) -> Stdlib.Result.Result.Ok name
        | Some (_, _) -> Stdlib.Result.Result.Error "name must be a string"
        | None -> Stdlib.Result.Result.Error "name is required"

      let argsResult =
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "arguments") with
        | Some (_, args) -> Stdlib.Result.Result.Ok args
        | None -> Stdlib.Result.Result.Error "arguments is required"

      match (nameResult, argsResult) with
      | (Ok name, Ok args) ->
          Stdlib.Result.Result.Ok (CallToolParams { name = name; arguments = args })
      | (Error e, _) -> Stdlib.Result.Result.Error e
      | (_, Error e) -> Stdlib.Result.Result.Error e
    | _ ->
        Stdlib.Result.Result.Error "params must be an object"

  let toJson (params: CallToolParams) : Json =
    Json.Object [
      ("name", Json.String params.name);
      ("arguments", params.arguments)
    ]

/// Response for calling a tool
module CallToolResponse =
  type ContentItem =
    { type_: String
      text: String }

  type CallToolResponse =
    { content: List<ContentItem>
      isError: Stdlib.Option.Option<Bool> }

  let toJson (response: CallToolResponse) : Json =
    let contentJson =
      response.content
      |> Stdlib.List.map (fun item ->
        Json.Object [
          ("type", Json.String item.type_);
          ("text", Json.String item.text)
        ]
      )

    let fields = [
      ("content", Json.Array contentJson)
    ]

    let fieldsWithIsError =
      match response.isError with
      | Some isError ->
          fields @ [("isError", Json.Bool isError)]
      | None ->
          fields

    Json.Object fieldsWithIsError

/// Helper functions for working with tools
module Helpers =
  /// Validate tool arguments against a JSON schema
  let validateArguments (schema: Json) (args: Json) : Stdlib.Result.Result<Unit, String> =
    // This is a placeholder for JSON schema validation
    // In a real implementation, this would validate the arguments against the schema
    // For now, we'll just return Ok
    Stdlib.Result.Result.Ok ()

  /// Create a text content item
  let createTextContent (text: String) : ContentItem =
    ContentItem
      { type_ = "text"; text = text }

  /// Create an error response
  let createErrorResponse (errorMessage: String) : CallToolResponse =
    CallToolResponse
      { content = [createTextContent errorMessage]
        isError = Stdlib.Option.Option.Some true }

  /// Create a success response
  let createSuccessResponse (content: List<ContentItem>) : CallToolResponse =
    CallToolResponse
      { content = content
        isError = Stdlib.Option.Option.Some false }