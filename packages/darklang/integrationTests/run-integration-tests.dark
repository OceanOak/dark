module Darklang =
  module Cli =
    module IntegrationTests =

      // Types for test configuration and results
      type TestResult =
        | Passed
        | Failed of errorMessage: String

      type TestConfig =
        { name: String
          description: String
          testModule: String // The module name (e.g., "HelpTest")
          recordCommand: Stdlib.Option.Option<String> }

      type TestSummary =
        { totalTests: Int64
          passedTests: Int64
          failedTests: Int64
          failedTestNames: List<String> }

      // Colors for output formatting
      module TestColors =
        let green = "\x1b[0;32m"
        let red = "\x1b[0;31m"
        let blue = "\x1b[0;34m"
        let yellow = "\x1b[1;33m"
        let reset = "\x1b[0m"

      // Helper function to get the script directory path
      let getScriptDir () : String = "./tests/integration/cli"

      // Helper function to get the project root path
      let getProjectRoot () : String = "."

      // Function to print colored messages
      let printColored (color: String) (message: String) : Unit =
        Builtin.print $"{color}{message}{TestColors.reset}"

      let printlnColored (color: String) (message: String) : Unit =
        Builtin.printLine $"{color}{message}{TestColors.reset}"

      // Function to run a Dark test module directly
      // FIXED: Instead of trying to use the CLI to run Dark functions,
      // we call them directly using the proper module path
      let runDarkTest (testModule: String) : TestResult =
        match testModule with
        | "HelpTest" ->
          // Call the help test directly
          let exitCode = HelpTest.main ()

          if exitCode == 0L then
            TestResult.Passed
          else
            TestResult.Failed "Help test returned non-zero exit code"

        // Add more test modules here as they are implemented:
        // | "VersionTest" ->
        //   let exitCode = VersionTest.main()
        //   if exitCode == 0L then
        //     TestResult.Passed
        //   else
        //     TestResult.Failed "Version test returned non-zero exit code"

        | _ -> TestResult.Failed $"Unknown test module: {testModule}"

      // Function to record failure with VHS if available
      let recordFailure (testName: String) (command: String) : Unit =
        // Use the Dark failure recorder
        if FailureRecorder.recordFailureForTest testName command then
          () // Success or VHS not available (both OK)
        else
          printlnColored TestColors.yellow "‚ö†Ô∏è  Failed to record failure GIF"

      // Function to run a single test
      let runSingleTest (summary: TestSummary) (config: TestConfig) : TestSummary =
        Builtin.printLine ""
        printlnColored TestColors.blue $"üß™ Running: {config.name}"
        Builtin.printLine "---"

        let newSummary =
          { summary with
              totalTests = summary.totalTests + 1L }

        match runDarkTest config.testModule with
        | Passed ->
          printlnColored TestColors.green $"‚úì {config.name} PASSED"

          { newSummary with
              passedTests = newSummary.passedTests + 1L }

        | Failed errorMsg ->
          printlnColored TestColors.red $"‚úó {config.name} FAILED"

          // Show the error message
          Builtin.printLine $"Error: {errorMsg}"

          // Record failure if command is provided
          match config.recordCommand with
          | Some command -> recordFailure config.name command
          | None -> ()

          { newSummary with
              failedTests = newSummary.failedTests + 1L
              failedTestNames =
                Stdlib.List.push newSummary.failedTestNames config.name }

      // Function to print test summary
      let printTestSummary (summary: TestSummary) : Unit =
        Builtin.printLine ""
        printlnColored TestColors.blue "üìä Test Results Summary"
        Builtin.printLine "======================"
        Builtin.printLine $"Total tests:  {Stdlib.Int64.toString summary.totalTests}"

        printlnColored
          TestColors.green
          $"Passed:       {Stdlib.Int64.toString summary.passedTests}"

        printlnColored
          TestColors.red
          $"Failed:       {Stdlib.Int64.toString summary.failedTests}"

        if summary.failedTests == 0L then
          printlnColored TestColors.green "üéâ All tests passed!"
        else
          printlnColored TestColors.red "üí• Some tests failed!"

          if Stdlib.Bool.not (Stdlib.List.isEmpty summary.failedTestNames) then
            Builtin.printLine "Failed tests:"

            summary.failedTestNames
            |> Stdlib.List.iter (fun testName ->
              printlnColored TestColors.red $"  - {testName}")

          printlnColored
            TestColors.yellow
            "üìÅ Check failure recordings in tests/integration/cli/failure-gifs/"

      // Function to define all test configurations
      let getTestConfigs () : List<TestConfig> =
        [ TestConfig
            { name = "Help Command"
              description = "Tests the CLI help command output"
              testModule = "HelpTest"
              recordCommand = Stdlib.Option.Option.Some "./scripts/run-cli help" }

          // Add more tests here as they are implemented:
          // TestConfig
          //   { name = "Version Command"
          //     description = "Tests the CLI version command"
          //     testModule = "VersionTest"
          //     recordCommand = Some "./scripts/run-cli version" }

          // TestConfig
          //   { name = "Status Command"
          //     description = "Tests the CLI status command"
          //     testModule = "StatusTest"
          //     recordCommand = Some "./scripts/run-cli status" }
          ]

      // Main test runner function
      let runIntegrationTests () : Int64 =
        // Print header
        printlnColored
          TestColors.blue
          "üé¨ Darklang CLI Integration Tests (VHS-powered)"

        Builtin.printLine "=============================================="

        // Initialize test summary
        let initialSummary =
          TestSummary
            { totalTests = 0L
              passedTests = 0L
              failedTests = 0L
              failedTestNames = [] }

        // Get test configurations and run all tests
        let testConfigs = getTestConfigs ()

        let finalSummary =
          testConfigs |> Stdlib.List.fold initialSummary Cli.IntegrationTests.runSingleTest

        // Print final results
        printTestSummary finalSummary

        // Return exit code
        if finalSummary.failedTests == 0L then 0L else 1L

      // Entry point for command-line execution
      let main () : Int64 = runIntegrationTests ()