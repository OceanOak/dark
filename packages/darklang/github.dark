module Darklang =
  /// Darklang's interactions with the API
  ///
  /// This isn't meant for general use outside of our org.
  ///
  /// It'd probably be best to write a new module for your own API,
  /// or contribute general-purpose package types/fns for interacting with GitHub's API
  module GitHub =
    let darklangRepoBaseUrl = "https://api.github.com/repos/darklang/dark"

    /// A baseline function for fetching data from the GitHub API
    let fetchString
      (url: String)
      : Stdlib.Result.Result<String, String> =
      let headers =
        [ ("accept", "application/vnd.github+json")
          ("user-Agent", "darklang") ]

      match Stdlib.HttpClient.get url headers with
      | Ok r ->
        r.body |> Stdlib.String.fromBytesWithReplacement |> Stdlib.Result.Result.Ok
      | Error _e -> Stdlib.Result.Result.Error "Failed to make GitHub API request"


    module Releases =
      type Asset =
        { name: String
          browser_download_url: String }

      type Release =
        { tag_name: String
          assets: List<Asset> }

      /// Get tag of the most recent Darklang release, from the GitHub API
      /// Returns the version in the same format as the CLI (e.g. "alpha-abe74e7")
      ///
      /// TODO: typify the error type
      let getLatestReleaseTag () : Stdlib.Result.Result<String, String> =
        match fetchString $"{darklangRepoBaseUrl}/releases" with
        | Ok releasesJsonString ->
          let releases = (Builtin.jsonParse<List<Release>> releasesJsonString) |> Builtin.unwrap
          let latestRelease = (Stdlib.List.head releases) |> Builtin.unwrap
          let firstAsset = (Stdlib.List.head latestRelease.assets) |> Builtin.unwrap
          // Asset name format: darklang-alpha-BUILDHASH-platform
          // Extract the alpha-HASH part
          let parts = Stdlib.String.split firstAsset.name "-"
          let hash = (Stdlib.List.getAt parts 2L) |> Builtin.unwrap
          // Return in same format as CLI version
          Stdlib.Result.Result.Ok $"alpha-{Stdlib.String.slice hash 0L 7L}"
        | Error _e ->
          Stdlib.Result.Result.Error "Couldn't fetch releases list from GitHub API"


      /// Get the appropriate URL to download the latest release of the `darklang` cli exe,
      /// corresponding to the current OS and Architecture
      ///
      /// TODO typify the error type
      let getDownloadUrl
        (host: Stdlib.Cli.Host.Host)
        (releaseTag: String)
        : Stdlib.Result.Result<String, String> =
        let hostStr =
          match host.os, host.arch with
          | Linux, Armv7l -> "linux-arm" |> Stdlib.Result.Result.Ok
          | Linux, Arm64 | Linux, Aarch64 -> "linux-arm64" |> Stdlib.Result.Result.Ok
          | Linux, X86_64 -> "linux-x64" |> Stdlib.Result.Result.Ok
          | MacOS, Arm64 -> "osx-arm64" |> Stdlib.Result.Result.Ok
          | MacOS, X86_64 -> "osx-x64" |> Stdlib.Result.Result.Ok
          | Windows, Arm64 -> "win-arm64" |> Stdlib.Result.Result.Ok
          | Windows, Aarch64 | Windows, X86_64 -> "win-x64" |> Stdlib.Result.Result.Ok
          | _, _ -> Stdlib.Result.Result.Error "Unsupported OS or Arch"

        match hostStr with
        | Ok hostStr ->
          let fetched =
            fetchString $"{darklangRepoBaseUrl}/releases/tags/{releaseTag}"

          match fetched with
          | Ok releaseJsonString ->
            match Builtin.jsonParse<Release> releaseJsonString with
            | Ok release ->
              let matchingAssetMaybe =
                release.assets
                |> Stdlib.List.findFirst (fun a ->
                  Stdlib.String.contains a.name hostStr)

              match matchingAssetMaybe with
              | Some asset -> asset.browser_download_url |> Stdlib.Result.Result.Ok

              | None -> Stdlib.Result.Result.Error "No matching asset found"
            | Error _e ->
              Stdlib.Result.Result.Error "Couldn't parse release JSON string"
          | Error _e ->
            Stdlib.Result.Result.Error "Couldn't fetch release from GitHub API"
        | Error _e -> Stdlib.Result.Result.Error "Couldn't determine host"