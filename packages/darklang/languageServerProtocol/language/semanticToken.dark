// Supports "semantic tokens," which are a way to provide syntax highlighting, among other things.

module Darklang.LanguageServerProtocol.SemanticTokens

// module TokenFormat =
//   type TokenFormat = | Relative

//   let toJson (f: TokenFormat) : Json =
//     match f with
//     | Relative -> Json.String "relative"


/// This type doesn't directly correspond to any part of the LSP spec,
/// but is a representation of the `data` represented in the `SemanticTokens` type,
/// used when the client and server agree upon the `'relative'` `TokenFormat`.
///
/// Note: our (Darklang's internal) use case does not yet use token modifiers,
/// so we have not tried to implement that here,
/// and hardcode "0" in the relevant `data` field parts.
///
/// Note: the deltaLine and deltaStart fields are relative to the
/// _start_ of the previous token, not the end of it. This can be
/// surprising, but allows for overlapping tokens, which may be present
/// in some languages.
module RelativeSemanticToken =
  type RelativeSemanticToken<'TokenType> =
    {
      /// The difference in lines from the start of the previous token
      deltaLine: UInt64

      /// The difference in characters (columns)
      /// from the start of the previous token on the same line
      /// , or from the start of the line if it's the first token on that line
      deltaStart: UInt64

      /// The length of the token
      length: UInt64

      /// The type of semantic token (i.e. keyword, string, operator, etc.)
      tokenType: 'TokenType
    }

  /// Maps a `List<RelativeSemanticToken>` to a flat `List<UInt>` list
  /// representing the semantic tokens, with five numbers per token.
  let mapListToFlatDataForResult<'TokenType>
    (typeToValue: 'TokenType -> UInt64)
    (tokens: List<RelativeSemanticToken<'TokenType>>)
    : List<UInt64> =
    tokens
    |> Stdlib.List.map (fun t ->
      [ t.deltaLine; t.deltaStart; t.length; typeToValue t.tokenType; 0UL ])
    |> Stdlib.List.flatten



module SemanticTokensLegend =
  type SemanticTokensLegend =
    {
      /// The token types a server uses.
      tokenTypes: List<String>

      /// The token modifiers a server uses.
      tokenModifiers: List<String>
    }

  let toJson (l: SemanticTokensLegend) : Json =
    [ ("tokenTypes",
        l.tokenTypes |> Stdlib.List.map (fun t -> Json.String t) |> Json.Array)

      ("tokenModifiers",
        l.tokenModifiers
        |> Stdlib.List.map (fun m -> Json.String m)
        |> Json.Array) ]

    |> Json.Object


module SemanticTokens =
  type SemanticTokens =
    {
      /// An optional result id. If provided and clients support delta updating
      /// the client will include the result id in the next semantic token request.
      /// A server can then instead of computing all semantic tokens again simply
      /// send a delta.
      resultId: Stdlib.Option.Option<String>

      /// The actual tokens.
      ///
      /// TODO describe the data format
      data: List<UInt64>
    }

  let toJson (t: SemanticTokens) : Json =
    [ t.resultId |> Stdlib.Option.map (fun id -> ("resultId", Json.String id))

      Stdlib.Option.Option.Some(
        ("data",
          t.data
          |> Stdlib.List.map (fun d -> Json.Number(Stdlib.UInt64.toFloat d))
          |> Json.Array)
      ) ]

    |> Stdlib.Option.values
    |> Json.Object




module SemanticTokensRequest =
  let method = "textDocument/semanticTokens/full"
  // let messageDirection = MessageDirection.clientToServer;
  // registration: SemanticTokensRegistrationType.method;

  module SemanticTokensParams =
    /// TODO: extends WorkDoneProgressParams
    /// TODO: extends PartialResultParams
    type SemanticTokensParams =
      {
        /// The text document.
        textDocument: TextDocumentIdentifier.TextDocumentIdentifier
      }

    let fromJson
      (json: Json)
      : Stdlib.Result.Result<SemanticTokensParams, Unit> =
      match json with
      | Object fields ->
        let textDocument = // Result<TextDocumentIdentifier, Unit>
          match
            Stdlib.List.findFirst fields (fun (k, _) -> k == "textDocument")
          with
          | Some((_, d)) -> TextDocumentIdentifier.fromJson d
          | _ -> Stdlib.Result.Result.Error()

        match textDocument with
        | Ok d ->
          (SemanticTokensParams { textDocument = d })
          |> Stdlib.Result.Result.Ok
        | _ -> Stdlib.Result.Result.Error()

      | _ -> Stdlib.Result.Result.Error()


  module SemanticTokensResult =
    type SemanticTokensResult =
      | Null
      | SemanticTokens of SemanticTokens.SemanticTokens

    let toJson (r: SemanticTokensResult) : Json =
      match r with
      | Null -> Json.Null
      | SemanticTokens t -> SemanticTokens.toJson t



// <server options>

module SemanticTokensOptions =
  // Note: not a type in the spec, but used in SemanticTokensOptions as a union
  module SemanticTokensOptionsRange =
    type SemanticTokensOptionsRange =
      | Bool of Bool
      | EmptyObject

    let toJson (r: SemanticTokensOptionsRange) : Json =
      match r with
      | Bool b -> Json.Bool b
      | EmptyObject -> Json.Object []

  module SemanticTokensFullDelta =
    /// Semantic tokens options to support deltas for full documents
    ///
    /// @proposed
    type SemanticTokensFullDelta =
      {
        /// The server supports deltas for full documents.
        delta: Stdlib.Option.Option<Bool>
      }

    let toJson (d: SemanticTokensFullDelta) : Json =
      [ d.delta |> Stdlib.Option.map (fun b -> ("delta", Json.Bool b)) ]

      |> Stdlib.Option.values
      |> Json.Object

  // Note: not a type in the spec, but used in SemanticTokensOptions as a union
  module SemanticTokensOptionsFull =
    type SemanticTokensOptionsFull =
      | Bool of Bool
      | SemanticTokensFullDelta of
        SemanticTokensFullDelta.SemanticTokensFullDelta

    let toJson (f: SemanticTokensOptionsFull) : Json =
      match f with
      | Bool b -> Json.Bool b
      | SemanticTokensFullDelta d -> SemanticTokensFullDelta.toJson d

  type SemanticTokensOptions =
    {
      /// The legend used by the server
      legend: SemanticTokensLegend.SemanticTokensLegend

      /// Server supports providing semantic tokens for a specific range of a document.
      range:
        Stdlib.Option.Option<SemanticTokensOptionsRange.SemanticTokensOptionsRange>

      /// Server supports providing semantic tokens for a full document.
      full:
        Stdlib.Option.Option<SemanticTokensOptionsFull.SemanticTokensOptionsFull>

    // TODO: extends WorkDoneProgressOptions {
    }

  let toJson (o: SemanticTokensOptions) : Json =
    [ Stdlib.Option.Option.Some(
        ("legend", SemanticTokensLegend.toJson o.legend)
      )

      o.range
      |> Stdlib.Option.map (fun r ->
        ("range", SemanticTokensOptionsRange.toJson r))

      o.full
      |> Stdlib.Option.map (fun f ->
        ("full", SemanticTokensOptionsFull.toJson f)) ]

    |> Stdlib.Option.values
    |> Json.Object


// module SemanticTokensRegistrationOptions =
//   type SemanticTokensRegistrationOptions =
//     {
//       // <extends TextDocumentRegistrationOptions>
//       documentSelector:
//         TextDocumentRegistrationOptions.TextDocumentRegistrationOptionsDocumentSelector.TextDocumentRegistrationOptionsDocumentSelector


//       // <extends SemanticTokensOptions>
//       /// The legend used by the server
//       legend: SemanticTokensLegend.SemanticTokensLegend

//       /// Server supports providing semantic tokens for a specific range of a document.
//       range:
//         Stdlib.Option.Option<SemanticTokensOptions.SemanticTokensOptionsRange.SemanticTokensOptionsRange>

//       /// Server supports providing semantic tokens for a full document.
//       full:
//         Stdlib.Option.Option<SemanticTokensOptions.SemanticTokensOptionsFull.SemanticTokensOptionsFull>


//       // <extends StaticRegistrationOptions>
//       /// The id used to register the request.
//       /// The id can be used to deregister the request again. See also Registration#id.
//       id: Stdlib.Option.Option<String>
//     }

//   let toJson (o: SemanticTokensRegistrationOptions) : Json =
//     [ Some(
//         ("documentSelector",
//          TextDocumentRegistrationOptions.TextDocumentRegistrationOptionsDocumentSelector.toJson
//            o.documentSelector)
//       )

//       Some(("legend", SemanticTokensLegend.toJson o.legend))

//       o.range
//       |> Stdlib.Option.map (fun r ->
//         ("range", SemanticTokensOptions.SemanticTokensOptionsRange.toJson r))

//       o.full
//       |> Stdlib.Option.map (fun f ->
//         ("full", SemanticTokensOptions.SemanticTokensOptionsFull.toJson f))

//       o.id |> Stdlib.Option.map (fun id -> ("id", Json.String id)) ]

//     |> Stdlib.Option.values
//     |> Json.Object


/// What server capabilities the server declares it supports,
/// during the `initialize` handshake.
module SemanticTokenProviderOptions =
  type SemanticTokenProviderOptions =
    // | SemanticTokensRegistrationOptions of
    //   SemanticTokensRegistrationOptions.SemanticTokensRegistrationOptions

    | SemanticTokensOptions of SemanticTokensOptions.SemanticTokensOptions

  let toJson (o: SemanticTokenProviderOptions) : Json =
    match o with
    // | SemanticTokensRegistrationOptions o ->
    //   SemanticTokensRegistrationOptions.toJson o

    | SemanticTokensOptions o -> SemanticTokensOptions.toJson o




(*
/// A set of predefined token types.
///
/// This set is not fixed and clients can specify additional token types
/// via the corresponding client capabilities.
export enum SemanticTokenTypes {
  namespace = 'namespace',
  /// Represents a generic type. Acts as a fallback for types which can't be mapped to
  /// a specific type like class or enum.
  type = 'type',
  class = 'class',
  enum = 'enum',
  interface = 'interface',
  struct = 'struct',
  typeParameter = 'typeParameter',
  parameter = 'parameter',
  variable = 'variable',
  property = 'property',
  enumMember = 'enumMember',
  event = 'event',
  function = 'function',
  method = 'method',
  macro = 'macro',
  keyword = 'keyword',
  modifier = 'modifier',
  comment = 'comment',
  string = 'string',
  number = 'number',
  regexp = 'regexp',
  operator = 'operator',
  decorator = 'decorator'
}

/// A set of predefined token modifiers.
///
/// This set is not fixed, and clients can specify additional token types via the
/// corresponding client capabilities.
export enum SemanticTokenModifiers {
  declaration = 'declaration',
  definition = 'definition',
  readonly = 'readonly',
  static = 'static',
  deprecated = 'deprecated',
  abstract = 'abstract',
  async = 'async',
  modification = 'modification',
  documentation = 'documentation',
  defaultLibrary = 'defaultLibrary'
}





export interface SemanticTokensEdit {
  /// The start offset of the edit.
  start: uinteger;

  /// The count of elements to remove.
  deleteCount: uinteger;

  /// The elements to insert.
  data?: uinteger[];
}

export interface SemanticTokensDelta {
  readonly resultId?: string;
  /// The semantic token edits to transform a previous result into a new result.
  edits: SemanticTokensEdit[];
}



export interface SemanticTokensPartialResult {
  data: uinteger[];
}

export interface SemanticTokensDeltaPartialResult {
  edits: SemanticTokensEdit[];
}



//------- 'textDocument/semanticTokens' -----



/// @proposed
export interface ClientSemanticTokensRequestFullDelta {
  /// The client will send the `textDocument/semanticTokens/full/delta` request if
  /// the server provides a corresponding handler.
  delta?: boolean;
}

/// @proposed
export interface ClientSemanticTokensRequestOptions  {
  /// The client will send the `textDocument/semanticTokens/range` request if
  /// the server provides a corresponding handler.
  range?: boolean | {};

  /// The client will send the `textDocument/semanticTokens/full` request if
  /// the server provides a corresponding handler.
  full?: boolean | ClientSemanticTokensRequestFullDelta;
}

export interface SemanticTokensClientCapabilities {
  /// Whether implementation supports dynamic registration. If this is set to `true`
  /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
  /// return value for the corresponding server capability as well.
  dynamicRegistration?: boolean;

  /// Which requests the client supports and might send to the server
  /// depending on the server's capability. Please note that clients might not
  /// show semantic tokens or degrade some of the user experience if a range
  /// or full request is advertised by the client but not provided by the
  /// server. If for example the client capability `requests.full` and
  /// `request.range` are both set to true but the server only provides a
  /// range provider the client might not render a minimap correctly or might
  /// even decide to not show any semantic tokens at all.
  requests: ClientSemanticTokensRequestOptions;

  /// The token types that the client supports.
  tokenTypes: string[];

  /// The token modifiers that the client supports.
  tokenModifiers: string[];

  /// The token formats the clients supports.
  formats: TokenFormat[];

  /// Whether the client supports tokens that can overlap each other.
  overlappingTokenSupport?: boolean;

  /// Whether the client supports tokens that can span multiple lines.
  multilineTokenSupport?: boolean;

  /// Whether the client allows the server to actively cancel a
  /// semantic token request, e.g. supports returning
  /// LSPErrorCodes.ServerCancelled. If a server does the client
  /// needs to retrigger the request.
  serverCancelSupport?: boolean;

  /// Whether the client uses semantic tokens to augment existing
  /// syntax tokens. If set to `true` client side created syntax
  /// tokens and semantic tokens are both used for colorization. If
  /// set to `false` the client only uses the returned semantic tokens
  /// for colorization.
  ///
  /// If the value is `undefined` then the client behavior is not
  /// specified.
  augmentsSyntaxTokens?: boolean;
}







export namespace SemanticTokensRegistrationType {
  export const method: 'textDocument/semanticTokens' = 'textDocument/semanticTokens';
  export const type = new RegistrationType<SemanticTokensRegistrationOptions>(method);
}





//------- 'textDocument/semanticTokens/edits' -----

export interface SemanticTokensDeltaParams
  extends
    WorkDoneProgressParams,
    PartialResultParams {

  /// The text document.
  textDocument: TextDocumentIdentifier;

  /// The result id of a previous response. The result Id can either point to a full response
  /// or a delta response depending on what was received last.
  previousResultId: string;
}

export namespace SemanticTokensDeltaRequest {
  export const method: 'textDocument/semanticTokens/full/delta' = 'textDocument/semanticTokens/full/delta';
  export const messageDirection: MessageDirection = MessageDirection.clientToServer;
  export const type = new ProtocolRequestType<SemanticTokensDeltaParams, SemanticTokens | SemanticTokensDelta | null, SemanticTokensPartialResult | SemanticTokensDeltaPartialResult, void, SemanticTokensRegistrationOptions>(method);
  export const registrationMethod: typeof SemanticTokensRegistrationType.method  = SemanticTokensRegistrationType.method;
  export type HandlerSignature = RequestHandler<SemanticTokensDeltaParams, SemanticTokens | SemanticTokensDelta | null, void>;
}



//------- 'textDocument/semanticTokens/range' -----

export interface SemanticTokensRangeParams
  extends
    WorkDoneProgressParams,
    PartialResultParams {

  /// The text document.
  textDocument: TextDocumentIdentifier;

  /// The range the semantic tokens are requested for.
  range: Range;
}

export namespace SemanticTokensRangeRequest {
  export const method: 'textDocument/semanticTokens/range' = 'textDocument/semanticTokens/range';
  export const messageDirection: MessageDirection = MessageDirection.clientToServer;
  export const type = new ProtocolRequestType<SemanticTokensRangeParams, SemanticTokens | null, SemanticTokensPartialResult, void, void>(method);
  export const registrationMethod: typeof SemanticTokensRegistrationType.method  = SemanticTokensRegistrationType.method;
  export type HandlerSignature = RequestHandler<SemanticTokensRangeParams, SemanticTokens | null, void>;
}



//------- 'workspace/semanticTokens/refresh' -----

export interface SemanticTokensWorkspaceClientCapabilities {
  /// Whether the client implementation supports a refresh request sent from
  /// the server to the client.
  ///
  /// Note that this event is global and will force the client to refresh all
  /// semantic tokens currently shown. It should be used with absolute care
  /// and is useful for situation where a server for example detects a project
  /// wide change that requires such a calculation.
  refreshSupport?: boolean;
}

export namespace SemanticTokensRefreshRequest {
  export const method: `workspace/semanticTokens/refresh` = `workspace/semanticTokens/refresh`;
  export const messageDirection: MessageDirection = MessageDirection.serverToClient;
  export const type = new ProtocolRequestType0<void, void, void, void>(method);
  export type HandlerSignature = RequestHandler0<void, void>;
}
*)