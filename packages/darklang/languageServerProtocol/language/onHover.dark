// What happens when you 'hover' on something in the editor?
module Darklang.LanguageServerProtocol.Hover


type HoverContentKind = MarkupContent of MarkupContent
// | MarkedString
// | MarkedStringList

/// The result of a hover request
type Hover =
  {
    /// The hover's content
    contents: MarkupContent
    /// An optional range inside the text document that is used to
    /// visualize the hover, e.g. by changing the background color.
    range: Stdlib.Option.Option<LanguageServerProtocol.Range.Range>
  }

let toJson (hover: Hover) : Json =
  let kindJson =
    match hover.contents.kind with
    | PlainText -> "plaintext" |> Json.String
    | Markdown -> "markdown" |> Json.String

  let contentsJson =
    Json.Object
      [ ("kind", kindJson); ("value", hover.contents.value |> Json.String) ]

  let fields =
    [ ("contents", contentsJson)
      ("range",
        match hover.range with
        | Some range -> Range.toJson range
        | None -> Json.Null) ]

  Json.Object fields

module HoverRequest =
  let method = "textDocument/hover"

  module HoverParams =
    type HoverParams =
      {
        /// The text document
        textDocument: TextDocumentIdentifier.TextDocumentIdentifier
        /// The position inside the text document
        position: Position.Position
      }

    let fromJson (json: Json) : Stdlib.Result.Result<HoverParams, string> =
      match json with
      | Object fields ->
        let textDocument =
          match
            Stdlib.List.findFirst fields (fun (k, _) -> k == "textDocument")
          with
          | Some((_, textDocument)) ->
            TextDocumentIdentifier.fromJson textDocument
          | None -> Stdlib.Result.Result.Error()

        let position =
          match
            Stdlib.List.findFirst fields (fun (k, _) -> k == "position")
          with
          | Some((_, position)) -> Position.fromJson position
          | None -> Stdlib.Result.Result.Error()

        match textDocument, position with
        | Ok textDocument, Ok position ->
          (HoverParams
            { textDocument = textDocument
              position = position })
          |> Stdlib.Result.Result.Ok

        | _ -> Stdlib.Result.Result.Error()
      | _ -> Stdlib.Result.Result.Error()



(*
  export interface HoverClientCapabilities {
    /// Whether hover supports dynamic registration.
    dynamicRegistration?: boolean;

    /// Client supports the following content formats for the content
    /// property. The order describes the preferred format of the client.
    contentFormat?: MarkupKind[];
  }

  /// Hover options.
  export interface HoverOptions
    extends
      WorkDoneProgressOptions {
  }

  /// Parameters for a {@link HoverRequest}.
  export interface HoverParams
    extends
      TextDocumentPositionParams,
      WorkDoneProgressParams {
  }

  /// Registration options for a {@link HoverRequest}.
  export interface HoverRegistrationOptions
    extends
      TextDocumentRegistrationOptions,
      HoverOptions {
  }

  /// Request to request hover information at a given text document position. The request's
  /// parameter is of type {@link TextDocumentPosition} the response is of
  /// type {@link Hover} or a Thenable that resolves to such.
  export namespace HoverRequest {
    export const method: 'textDocument/hover' = 'textDocument/hover';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<HoverParams, Hover | null, never, void, HoverRegistrationOptions>(method);
  }
*)