// All of the base / common types shared between the LSP client and server
// explicitly does not include any messages, requests, or responses

/// Supporting types and functionality corresponding to the LSP 3.17.0 specification,
/// built as-needed for _our_ LSP Server implementation
module Darklang.LanguageServerProtocol


// <aliases>
type Json = Stdlib.AltJson.Json
// </aliases>


// TODO: maybe better constraints here
type DocumentUri = String

/// A tagging type for string properties that are actually URIs
// TODO: maybe better constraints here
type URI = String

/// Describes the content type that a client supports in various
/// result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
///
/// Please note that `MarkupKinds` must not start with a `$`. This kinds
/// are reserved for internal usage.
type MarkupKind =
  | PlainText
  | Markdown

/// A `MarkupContent` literal represents a string value which content is interpreted base on its
/// kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.
///
/// If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
/// See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
///
/// Here is an example how such a string can be constructed using JavaScript / TypeScript:
/// ```ts
/// let markdown: MarkdownContent = {
///  kind: MarkupKind.Markdown,
///  value: [
///    '# Header',
///    'Some text',
///    '```typescript',
///    'someCode();',
///    '```'
///  ].join('\n')
/// };
/// ```
///
/// *Please Note* that clients might sanitize the return markdown. A client could decide to
/// remove HTML from the markdown to avoid script execution.
type MarkupContent =
  {
    /// The type of the Markup
    kind: MarkupKind
    /// The content itself
    value: String
  }

let knownEOLs = [ "\n"; "\r\n"; "\r" ]


module Position =
  /// Position in a text document expressed as zero-based line and character
  /// offset. Clients and servers can agree on a different string encoding
  /// representation (e.g. UTF-8). The client announces it's supported encoding
  /// via the client capability [`general.positionEncodings`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#clientCapabilities).
  /// The value is an array of position encodings the client supports, with
  /// decreasing preference (e.g. the encoding at index `0` is the most preferred
  /// one). To stay backwards compatible the only mandatory encoding is UTF-16
  /// represented via the string `utf-16`. The server can pick one of the
  /// encodings offered by the client and signals that encoding back to the
  /// client via the initialize result's property
  /// [`capabilities.positionEncoding`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#serverCapabilities). If the string value
  /// `utf-16` is missing from the client's capability `general.positionEncodings`
  /// servers can safely assume that the client supports UTF-16. If the server
  /// omits the position encoding in its initialize result the encoding defaults
  /// to the string value `utf-16`. Implementation considerations: since the
  /// conversion from one encoding into another requires the content of the
  /// file / line the conversion is best done where the file is read which is
  /// usually on the server side.
  ///
  /// Positions are line end character agnostic. So you can not specify a position
  /// that denotes `\r|\n` or `\n|` where `|` represents the character offset.
  type Position =
    {
      /// Line position in a document (zero-based).
      ///
      /// If a line number is greater than the number of lines in a document,
      /// it defaults back to the number of lines in the document.
      ///
      /// If a line number is negative, it defaults to 0.
      line: UInt64

      /// Character offset on a line in a document (zero-based). The meaning of this
      /// offset is determined by the negotiated `PositionEncodingKind`.
      ///
      /// If the character value is greater than the line length it defaults back
      /// to the line length.
      character: UInt64
    }

  let toJson (p: Position) : Json =
    Json.Object
      [ ("line", p.line |> Stdlib.UInt64.toFloat |> Json.Number)
        ("character", p.character |> Stdlib.UInt64.toFloat |> Json.Number) ]

  let fromJson (json: Json) : Stdlib.Result.Result<Position, Unit> =
    match json with
    | Object fields ->
      let line =
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "line") with
        | Some((_, Number l)) ->
          match Stdlib.UInt64.fromFloat l with
          | None -> Stdlib.Result.Result.Error()
          | Some l -> Stdlib.Result.Result.Ok l
        | _ -> Stdlib.Result.Result.Error()

      let character =
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "character") with
        | Some((_, Number c)) ->
          match Stdlib.UInt64.fromFloat c with
          | None -> Stdlib.Result.Result.Error()
          | Some c -> Stdlib.Result.Result.Ok c
        | _ -> Stdlib.Result.Result.Error()

      match (line, character) with
      | (Ok line, Ok character) ->
        Stdlib.Result.Result.Ok(Position { line = line; character = character })
      | _ -> Stdlib.Result.Result.Error()

    | _ -> Stdlib.Result.Result.Error()

module Range =
  type Range =
    {
      /// The range's start position.
      start: Position.Position

      /// The range's end position.
      end_: Position.Position
    }

  let toJson (r: Range) : Json =
    Json.Object
      [ ("start", Position.toJson r.start); ("end", Position.toJson r.end_) ]

  let fromJson (json: Json) : Stdlib.Result.Result<Range, Unit> =
    match json with
    | Object fields ->
      let start =
        match Stdlib.List.findFirst fields (fun (key, _) -> key == "start") with
        | Some((_, start)) -> Position.fromJson start
        | None -> Stdlib.Result.Result.Error()

      let end_ =
        match Stdlib.List.findFirst fields (fun (key, _) -> key == "end") with
        | Some((_, end_)) -> Position.fromJson end_
        | None -> Stdlib.Result.Result.Error()

      match (start, end_) with
      | (Ok start, Ok end_) ->
        Stdlib.Result.Result.Ok(Range { start = start; end_ = end_ })
      | _ -> Stdlib.Result.Result.Error()

    | _ -> Stdlib.Result.Result.Error()


module Location =
  /// Represents a location inside a resource, such as a line
  /// inside a text file.
  type Location =
    { uri: DocumentUri; range: Range.Range }

  let toJson (l: Location) : Json =
    Json.Object [ ("uri", Json.String l.uri); ("range", Range.toJson l.range) ]

module TextDocumentItem =
  /// An item to transfer a text document from the client to the server.
  type TextDocumentItem =
    {
      /// The text document's URI.
      uri: DocumentUri

      /// The text document's language identifier.
      languageId: String

      /// The version number of this document
      /// (it will increase after each change, including undo/redo).
      version: Int64

      /// The content of the opened text document.
      text: String
    }

  let toJson (i: TextDocumentItem) : Json =
    [ ("uri", Json.String i.uri)
      ("languageId", Json.String i.languageId)
      ("version", Json.Number(Stdlib.Int64.toFloat i.version))
      ("text", Json.String i.text) ]
    |> Json.Object

  let fromJson (json: Json) : Stdlib.Result.Result<TextDocumentItem, Unit> =
    match Builtin.jsonParse<TextDocumentItem> json with
    | Ok item -> Stdlib.Result.Result.Ok item
    | Error _ -> Stdlib.Result.Result.Error()


module TextDocumentIdentifier =
  /// A literal to identify a text document in the client.
  type TextDocumentIdentifier =
    {
      /// The text document's URI.
      uri: DocumentUri
    }

  let toJson (i: TextDocumentIdentifier) : Json =
    Json.Object [ ("uri", Json.String i.uri) ]

  let fromJson
    (json: Json)
    : Stdlib.Result.Result<TextDocumentIdentifier, Unit> =
    match json with
    | Object [ ("uri", String uri) ] ->
      Stdlib.Result.Result.Ok(TextDocumentIdentifier { uri = uri })
    | _ -> Stdlib.Result.Result.Error()


module TextDocumentPositionParams =
  /// A parameter literal used in requests to pass a text document and a position inside that document.
  type TextDocumentPositionParams =
    {
      /// The text document.
      textDocument: TextDocumentIdentifier.TextDocumentIdentifier

      /// The position inside the text document.
      position: Position.Position
    }

  let fromJson
    (json: Json)
    : Stdlib.Result.Result<TextDocumentPositionParams, Unit> =
    match json with
    | Object fields ->
      let textDocument = // Result<TextDocumentIdentifier, Unit>
        match
          Stdlib.List.findFirst fields (fun (k, _) -> k == "textDocument")
        with
        | Some((_, textDocument)) -> TextDocumentIdentifier.fromJson textDocument
        | None -> Stdlib.Result.Result.Error()

      let position = // Result<Position, Unit>
        match Stdlib.List.findFirst fields (fun (k, _) -> k == "position") with
        | Some((_, position)) -> Position.fromJson position
        | None -> Stdlib.Result.Result.Error()

      match (textDocument, position) with
      | (Ok textDocument, Ok position) ->
        Stdlib.Result.Result.Ok(
          TextDocumentPositionParams
            { textDocument = textDocument
              position = position }
        )
      | _ -> Stdlib.Result.Result.Error()

    | _ -> Stdlib.Result.Result.Error()


module TextDocumentFilterLanguage =
  /// A document filter where `language` is required field.
  ///
  /// @proposed
  type TextDocumentFilterLanguage =
    {
      /// A language id, like `typescript`.
      language: String

      /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
      scheme: Stdlib.Option.Option<String>

      /// A glob pattern, like **â€‹/*.{ts,js}. See TextDocumentFilter for examples.
      pattern: Stdlib.Option.Option<String>
    }

  let toJson (l: TextDocumentFilterLanguage) : Json =
    [ Stdlib.Option.Option.Some(("language", Json.String l.language))

      l.scheme |> Stdlib.Option.map (fun s -> ("scheme", Json.String s))

      l.pattern |> Stdlib.Option.map (fun p -> ("pattern", Json.String p)) ]

    |> Stdlib.Option.values
    |> Json.Object


module TextDocumentFilterScheme =
  /// A document filter where `scheme` is required field.
  ///
  /// @proposed
  type TextDocumentFilterScheme =
    {
      /// A language id, like `typescript`.
      language: Stdlib.Option.Option<String>

      /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
      scheme: String

      /// A glob pattern, like **â€‹/*.{ts,js}. See TextDocumentFilter for examples.
      pattern: Stdlib.Option.Option<String>
    }

  let toJson (s: TextDocumentFilterScheme) : Json =
    [ s.language |> Stdlib.Option.map (fun l -> ("language", Json.String l))

      Some(("scheme", Json.String s.scheme))

      s.pattern |> Stdlib.Option.map (fun p -> ("pattern", Json.String p)) ]

    |> Stdlib.Option.values
    |> Json.Object


module TextDocumentFilter =
  /// A document filter denotes a document by different properties like
  /// the {@link TextDocument.languageId language}, the {@link Uri.scheme scheme} of
  /// its resource, or a glob-pattern that is applied to the {@link TextDocument.fileName path}.
  ///
  /// Glob patterns can have the following syntax:
  /// - `*` to match one or more characters in a path segment
  /// - `?` to match on one character in a path segment
  /// - `**` to match any number of path segments, including none
  /// - `{}` to group sub patterns into an OR expression.
  ///   (e.g. `**â€‹/*.{ts,js}` matches all TypeScript and JavaScript files)
  /// - `[]` to declare a range of characters to match in a path segment
  ///   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, â€¦)
  /// - `[!...]` to negate a range of characters to match in a path segment
  ///   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
  ///
  /// @sample A language filter that applies to typescript files on disk: `{ language: 'typescript', scheme: 'file' }`
  /// @sample A language filter that applies to all package.json paths: `{ language: 'json', pattern: '**package.json' }`
  type TextDocumentFilter =
    | TextDocumentFilterLanguage of
      TextDocumentFilterLanguage.TextDocumentFilterLanguage

    | TextDocumentFilterScheme of
      TextDocumentFilterScheme.TextDocumentFilterScheme

  let toJson (f: TextDocumentFilter) : Json =
    match f with
    | TextDocumentFilterLanguage l -> TextDocumentFilterLanguage.toJson l
    | TextDocumentFilterScheme s -> TextDocumentFilterScheme.toJson s


module DocumentFilter =
  /// A document filter describes a top level text document
  /// or a notebook cell document.
  type DocumentFilter = Text of TextDocumentFilter.TextDocumentFilter
  // TODO: | NotebookCell of NotebookCellTextDocumentFilter;

  let toJson (f: DocumentFilter) : Json =
    match f with
    | Text t -> TextDocumentFilter.toJson t


module DocumentSelector =
  /// A document selector is the combination of one or many document filters.
  ///
  /// Sample:
  /// ```javascript
  /// let sel:DocumentSelector =
  ///   [ { language: 'typescript' },
  ///     { language: 'json', pattern: '**âˆ•tsconfig.json' } ]
  /// ```;
  type DocumentSelector = List<DocumentFilter.DocumentFilter>

  let toJson (filters: DocumentSelector) : Json =
    filters |> Stdlib.List.map (fun f -> DocumentFilter.toJson f) |> Json.Array


module TextDocumentRegistrationOptions =
  module TextDocumentRegistrationOptionsDocumentSelector =
    type TextDocumentRegistrationOptionsDocumentSelector =
      | Null
      | DocumentSelector of DocumentSelector.DocumentSelector

    let toJson (d: TextDocumentRegistrationOptionsDocumentSelector) : Json =
      match d with
      | Null -> Json.Null
      | DocumentSelector s -> DocumentSelector.toJson s

  /// General text document registration options.
  type TextDocumentRegistrationOptions =
    {
      /// A document selector to identify the scope of the registration.
      /// If set to null, the document selector provided on the client side will be used.
      documentSelector:
        TextDocumentRegistrationOptionsDocumentSelector.TextDocumentRegistrationOptionsDocumentSelector
    }

  let toJson (o: TextDocumentRegistrationOptions) : Json =
    [ ("documentSelector",
        TextDocumentRegistrationOptionsDocumentSelector.toJson o.documentSelector) ]
    |> Json.Object



module DiagnosticSeverity =
  type DiagnosticSeverity =
    | Error
    | Warning
    | Information
    | Hint

  let toJson (s: DiagnosticSeverity) : Json =
    match s with
    | Error -> Json.Number 1.0
    | Warning -> Json.Number 2.0
    | Information -> Json.Number 3.0
    | Hint -> Json.Number 4.0

  let fromJson (json: Json) : Stdlib.Result.Result<DiagnosticSeverity, Unit> =
    match json with
    | Number 1 -> DiagnosticSeverity.Error |> Stdlib.Result.Result.Ok
    | Number 2 -> DiagnosticSeverity.Warning |> Stdlib.Result.Result.Ok
    | Number 3 -> DiagnosticSeverity.Information |> Stdlib.Result.Result.Ok
    | Number 4 -> DiagnosticSeverity.Hint |> Stdlib.Result.Result.Ok
    | _ -> Stdlib.Result.Result.Error()

module DiagnosticTag =
  type DiagnosticTag =

    /// Unused or unnecessary code.
    ///
    /// Clients are allowed to render diagnostics with this tag faded out
    /// instead of having an error squiggle.
    | Unnecessary

    /// Deprecated or obsolete code.
    ///
    /// Clients are allowed to rendered diagnostics with this tag strike through.
    | Deprecated

  let toJson (t: DiagnosticTag) : Json =
    match t with
    | Unnecessary -> Json.Number 1
    | Deprecated -> Json.Number 2

  let fromJson (json: Json) : Stdlib.Result.Result<DiagnosticTag, Unit> =
    match json with
    | Number 1 -> DiagnosticTag.Unnecessary |> Stdlib.Result.Result.Ok
    | Number 2 -> DiagnosticTag.Deprecated |> Stdlib.Result.Result.Ok
    | _ -> Stdlib.Result.Result.Error()

module DiagnosticRelatedInformation =
  /// Represents a related message and source code location for a diagnostic. This should be
  /// used to point to code locations that cause or related to a diagnostics, e.g when duplicating
  /// a symbol in a scope.
  type DiagnosticRelatedInformation =
    {
      /// The location of this related diagnostic information.
      location: Location.Location

      /// The message of this related diagnostic information.
      message: String
    }

  let toJson (ri: DiagnosticRelatedInformation) : Json =
    Json.Object
      [ ("location", Location.toJson ri.location)
        ("message", Json.String ri.message) ]

module CodeDescription =
  /// Structure to capture a description for an error code.
  type CodeDescription =
    {
      /// An URI to open with more information about the diagnostic error.
      href: URI
    }

  let toJson (c: CodeDescription) : Json =
    Json.Object [ ("href", Json.String c.href) ]

module DiagnosticCode =
  type DiagnosticCode =
    | Number of Int64
    | String of String

  let toJson (c: DiagnosticCode) : Json =
    match c with
    | Number n -> (Stdlib.Int64.toFloat n) |> Json.Number
    | String s -> Json.String s

module Diagnostic =
  type Diagnostic =
    {
      /// The range at which the message applies.
      range: Range.Range

      /// The diagnostic's severity. Can be omitted. If omitted it is up to the
      /// client to interpret diagnostics as error, warning, info or hint.
      severity: Stdlib.Option.Option<DiagnosticSeverity.DiagnosticSeverity>

      /// The diagnostic's code, which might appear in the user interface.
      code: Stdlib.Option.Option<DiagnosticCode.DiagnosticCode>

      /// An optional property to describe the error code.
      codeDescription: Stdlib.Option.Option<CodeDescription.CodeDescription>

      /// A human-readable string describing the source of this diagnostic, e.g. 'typescript' or 'super lint'.
      source: Stdlib.Option.Option<String>

      /// The diagnostic's message.
      message: String

      /// Additional metadata about the diagnostic.
      tags: Stdlib.Option.Option<List<DiagnosticTag.DiagnosticTag>>

      /// An array of related diagnostic information, e.g. when symbol-names within
      /// a scope collide all definitions can be marked via this property.
      relatedInformation:
        Stdlib.Option.Option<List<DiagnosticRelatedInformation.DiagnosticRelatedInformation>>

      /// A data entry field that is preserved between a
      /// `textDocument/publishDiagnostics` notification and
      /// `textDocument/codeAction` request.
      data: Stdlib.Option.Option<Json>
    }

  let toJson (d: Diagnostic) : Json =
    let fields =
      [ Stdlib.Option.Option.Some(("range", Range.toJson d.range))
        d.severity
        |> Stdlib.Option.map (fun s -> ("severity", DiagnosticSeverity.toJson s))
        // d.code |> Stdlib.Option.map (fun c -> ("code", DiagnosticCode.toJson c))
        // d.codeDescription
        // |> Stdlib.Option.map (fun cd -> ("codeDescription", CodeDescription.toJson cd))
        // d.source |> Stdlib.Option.map (fun s -> ("source", Json.String s))
        Stdlib.Option.Option.Some(("message", d.message |> Json.String))
        // d.tags |> Stdlib.Option.map (fun tags ->
        //   ("tags", Json.Array(tags |> Stdlib.List.map DiagnosticTag.toJson)))
        // d.relatedInformation |> Stdlib.Option.map (fun ri ->
        //   ("relatedInformation", Json.Array(ri |> Stdlib.List.map DiagnosticRelatedInformation.toJson)))
        // d.data |> Stdlib.Option.map (fun j -> ("data", j |> Json.String))
        ]

    fields |> Stdlib.Option.values |> Json.Object


module StaticRegistrationOptions =
  /// Static registration options to be returned in the initialize request.
  type StaticRegistrationOptions =
    {
      /// The id used to register the request.
      /// The id can be used to deregister the request again. See also Registration#id.
      id: Stdlib.Option.Option<String>
    }

  let toJson (o: StaticRegistrationOptions) : Json =
    [ o.id |> Stdlib.Option.map (fun i -> ("id", Json.String i)) ]
    |> Stdlib.Option.values
    |> Json.Object

(* LSP Error Codes
export namespace LSPErrorCodes {
* This is the start range of LSP reserved error codes.
* It doesn't denote a real error code.
export const lspReservedErrorRangeStart: integer = -32899;

/// A request failed but it was syntactically correct, e.g the
/// method name was known and the parameters were valid. The error
/// message should contain human readable information about why
/// the request failed.
export const RequestFailed: integer = -32803;

/// The server cancelled the request. This error code should
/// only be used for requests that explicitly support being
/// server cancellable.
export const ServerCancelled: integer = -32802;

/// The server detected that the content of a document got
/// modified outside normal conditions. A server should
/// NOT send this error code if it detects a content change
/// in it unprocessed messages. The result even computed
/// on an older state might still be useful for the client.
///
/// If a client decides that a result is not of any use anymore
/// the client should cancel the request.
export const ContentModified: integer = -32801;

/// The client has canceled a request and a server as detected
/// the cancel.
export const RequestCancelled: integer = -32800;

* This is the end range of LSP reserved error codes.
* It doesn't denote a real error code.
export const lspReservedErrorRangeEnd: integer = -32800;
}
export type LSPErrorCodes = integer;
*)


(*
These types are defined as part of the Microsoft/vscode-languageserver-node
repo, which is the canonical implementation of the LSP server. I've copied
them here, and tidied the cruft, to slowly port into our solution as-needed.

The original source does a good job of documenting which properties are and
are not necesarry, and we should use this information as we port the types in,
to decide how we define our corresponding Json mappers.



/// Defines an integer in the range of -2^31 to 2^31 - 1.
export type integer = number;

export namespace integer {
export const MIN_VALUE = -2147483648;
export const MAX_VALUE = 2147483647;
}

/// Defines an unsigned integer in the range of 0 to 2^31 - 1.
export type uinteger = number;

export namespace uinteger {
export const MIN_VALUE = 0;
export const MAX_VALUE = 2147483647;
}

/// Defines a decimal number. Since decimal numbers are very
/// rare in the language server specification we denote the
/// exact range with every decimal using the mathematics
/// interval notations (e.g. [0, 1] denotes all decimals d with
/// 0 <= d <= 1.
export type decimal = number;





/// Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},
/// including an origin range.
export interface LocationLink {
/// Span of the origin of this link.
///
/// Used as the underlined span for mouse interaction. Defaults to the word range at
/// the definition position.
originSelectionRange?: Range;

/// The target resource identifier of this link.
targetUri: DocumentUri;

/// The full target range of this link. If the target for example is a symbol then target range is the
/// range enclosing this symbol not including leading/trailing whitespace but everything else
/// like comments. This information is typically used to highlight the range in the editor.
targetRange: Range;

/// The range that should be selected and revealed when this link is being followed, e.g the name of a function.
/// Must be contained by the `targetRange`. See also `DocumentSymbol#range`
targetSelectionRange: Range;
}







/// Represents a reference to a command. Provides a title which
/// will be used to represent a command in the UI and, optionally,
/// an array of arguments which will be passed to the command handler
/// function when invoked.
export interface Command {
/// Title of the command, like `save`.
title: string;

/// The identifier of the actual command handler.
command: string;

/// Arguments that the command handler should be
/// invoked with.
arguments?: LSPAny[];
}


/// A text edit applicable to a text document.
type TextEdit =
{
  /// The range of the text document to be manipulated. To insert
  /// text into a document create a range where start === end.
  range: Range.Range

  /// The string to be inserted. For delete operations use an empty string.
  newText: String
}


/// Additional information that describes document changes.
export interface ChangeAnnotation {
/// A human-readable string describing the actual change. The string
/// is rendered prominent in the user interface.
label: string;

/// A flag which indicates that user confirmation is needed before applying the change.
needsConfirmation?: boolean;

/// A human-readable string which is rendered less prominent in
/// the user interface.
description?: string;
}



/// An identifier to refer to a change annotation stored with a workspace edit.
export type ChangeAnnotationIdentifier = string;

/// A special text edit with an additional change annotation.
export interface AnnotatedTextEdit
extends
  TextEdit {

/// The actual identifier of the change annotation
annotationId: ChangeAnnotationIdentifier;
}


/// Describes textual changes on a text document. A TextDocumentEdit describes all changes
/// on a document version Si and after they are applied move the document to version Si+1.
/// So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
/// kind of ordering. However the edits must be non overlapping.
export interface TextDocumentEdit {
/// The text document to change.
textDocument: OptionalVersionedTextDocumentIdentifier;

/// The edits to be applied.
edits: (TextEdit | AnnotatedTextEdit)[];
}


/// A generic resource operation.
interface ResourceOperation {
/// The resource operation kind.
kind: string;

/// An optional annotation identifier describing the operation.
annotationId?: ChangeAnnotationIdentifier;
}

/// Options to create a file.
export interface CreateFileOptions {
/// Overwrite existing file. Overwrite wins over `ignoreIfExists`
overwrite?: boolean;

/// Ignore if exists.
ignoreIfExists?: boolean;
}

/// Create file operation.
export interface CreateFile
extends
  ResourceOperation {

kind: 'create';

/// The resource to create.
uri: DocumentUri;

/// Additional options
options?: CreateFileOptions;
}


/// Rename file options
export interface RenameFileOptions {
/// Overwrite target if existing. Overwrite wins over `ignoreIfExists`
overwrite?: boolean;

/// Ignores if target exists.
ignoreIfExists?: boolean;
}

/// Rename file operation
export interface RenameFile
extends
  ResourceOperation {

kind: 'rename';

/// The old (existing) location.
oldUri: DocumentUri;

/// The new location.
newUri: DocumentUri;

/// Rename options.
options?: RenameFileOptions;
}

/// Delete file options
export interface DeleteFileOptions {
/// Delete the content recursively if a folder is denoted.
recursive?: boolean;

/// Ignore the operation if the file doesn't exist.
ignoreIfNotExists?: boolean;
}

/// Delete file operation
export interface DeleteFile
extends
  ResourceOperation {

/// A delete
kind: 'delete';

/// The file to delete.
uri: DocumentUri;

/// Delete options.
options?: DeleteFileOptions;
}

/// A workspace edit represents changes to many resources managed in the workspace. The edit
/// should either provide `changes` or `documentChanges`. If documentChanges are present
/// they are preferred over `changes` if the client can handle versioned document edits.
///
/// Since version 3.13.0 a workspace edit can contain resource operations as well. If resource
/// operations are present clients need to execute the operations in the order in which they
/// are provided. So a workspace edit for example can consist of the following two changes:
/// (1) a create file a.txt and (2) a text document edit which insert text into file a.txt.
///
/// An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will
/// cause failure of the operation. How the client recovers from the failure is described by
/// the client capability: `workspace.workspaceEdit.failureHandling`
export interface WorkspaceEdit {
/// Holds changes to existing resources.
changes?: { [uri: DocumentUri]: TextEdit[] };

/// Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes
/// are either an array of `TextDocumentEdit`s to express changes to n different text documents
/// where each text document edit addresses a specific version of a text document. Or it can contain
/// above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.
///
/// Whether a client supports versioned document edits is expressed via
/// `workspace.workspaceEdit.documentChanges` client capability.
///
/// If a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then
/// only plain `TextEdit`s using the `changes` property are supported.
documentChanges?: (TextDocumentEdit | CreateFile | RenameFile | DeleteFile)[];

/// A map of change annotations that can be referenced in `AnnotatedTextEdit`s or create, rename and
/// delete file / folder operations.
///
/// Whether clients honor this property depends on the client capability `workspace.changeAnnotationSupport`.
changeAnnotations?: {
  [id: ChangeAnnotationIdentifier]: ChangeAnnotation;
};
}

/// A text document identifier to optionally denote a specific version of a text document.
export interface OptionalVersionedTextDocumentIdentifier
extends
  TextDocumentIdentifier {

/// The version number of this document. If a versioned text document identifier
/// is sent from the server to the client and the file is not open in the editor
/// (the server has not received an open notification before) the server can send
/// `null` to indicate that the version is unknown and the content on disk is the
/// truth (as specified with document content ownership).
version: integer | null;
}


/// The definition of a symbol represented as one or many {@link Location locations}.
/// For most programming languages there is only one location at which a symbol is
/// defined.
///
/// Servers should prefer returning `DefinitionLink` over `Definition` if supported
/// by the client.
export type Definition = Location | Location[];

/// Information about where a symbol is defined.
///
/// Provides additional metadata over normal {@link Location location} definitions, including the range of
/// the defining symbol
export type DefinitionLink = LocationLink;

/// The declaration of a symbol representation as one or many {@link Location locations}.
export type Declaration = Location | Location[];

/// Information about where a symbol is declared.
///
/// Provides additional metadata over normal {@link Location location} declarations, including the range of
/// the declaring symbol.
///
/// Servers should prefer returning `DeclarationLink` over `Declaration` if supported
/// by the client.
export type DeclarationLink = LocationLink;

/// Value-object that contains additional information when
/// requesting references.
export interface ReferenceContext {
/// Include the declaration of the current symbol.
includeDeclaration: boolean;
}




/// A symbol kind.
export namespace SymbolKind {
export const File: 1 = 1;
export const Module: 2 = 2;
export const Namespace: 3 = 3;
export const Package: 4 = 4;
export const Class: 5 = 5;
export const Method: 6 = 6;
export const Property: 7 = 7;
export const Field: 8 = 8;
export const Constructor: 9 = 9;
export const Enum: 10 = 10;
export const Interface: 11 = 11;
export const Function: 12 = 12;
export const Variable: 13 = 13;
export const Constant: 14 = 14;
export const String: 15 = 15;
export const Number: 16 = 16;
export const Boolean: 17 = 17;
export const Array: 18 = 18;
export const Object: 19 = 19;
export const Key: 20 = 20;
export const Null: 21 = 21;
export const EnumMember: 22 = 22;
export const Struct: 23 = 23;
export const Event: 24 = 24;
export const Operator: 25 = 25;
export const TypeParameter: 26 = 26;
}
export type SymbolKind = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26;

/// Symbol tags are extra annotations that tweak the rendering of a symbol.
export namespace SymbolTag {
/// Render a symbol as obsolete, usually using a strike-out.
export const Deprecated: 1 = 1;
}
export type SymbolTag = 1;


/// A base for all symbol information.
export interface BaseSymbolInformation {
/// The name of this symbol.
name: string;

/// The kind of this symbol.
kind: SymbolKind;

/// Tags for this symbol.
tags?: SymbolTag[];

/// The name of the symbol containing this symbol. This information is for
/// user interface purposes (e.g. to render a qualifier in the user interface
/// if necessary). It can't be used to re-infer a hierarchy for the document
/// symbols.
containerName?: string;
}

/// Represents information about programming constructs like variables, classes,
/// interfaces etc.
export interface SymbolInformation
extends
  BaseSymbolInformation {

/// The location of this symbol. The location's range is used by a tool
/// to reveal the location in the editor. If the symbol is selected in the
/// tool the range's start information is used to position the cursor. So
/// the range usually spans more than the actual symbol's name and does
/// normally include things like visibility modifiers.
///
/// The range doesn't have to denote a node range in the sense of an abstract
/// syntax tree. It can therefore not be used to re-construct a hierarchy of
/// the symbols.
location: Location;
}






/// A workspace folder inside a client.
export interface WorkspaceFolder {
/// The associated URI for this workspace folder.
uri: URI;

/// The name of the workspace folder. Used to refer to this
/// workspace folder in the user interface.
name: string;
}




export interface WorkDoneProgressParams {
/// An optional token that a server can use to report work done progress.
workDoneToken?: ProgressToken;
}
export interface WorkDoneProgressOptions {
workDoneProgress?: boolean;
}

export interface PartialResultParams {
/// An optional token that a server can use to report partial results (e.g. streaming) to
/// the client.
partialResultToken?: ProgressToken;
}









/// A notebook document filter where `scheme` is required field.
///
/// @proposed
export interface NotebookDocumentFilterScheme {
/// The type of the enclosing notebook.
notebookType?: string;

/// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
scheme: string;

/// A glob pattern.
pattern?: string;
}

/// A notebook document filter where `pattern` is required field.
///
/// @proposed
export interface NotebookDocumentFilterPattern {
/// The type of the enclosing notebook.
notebookType?: string;

/// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
scheme?: string;

/// A glob pattern.
pattern: string;
}

/// A notebook document filter denotes a notebook document by
/// different properties. The properties will be match
/// against the notebook's URI (same as with documents)
export type NotebookDocumentFilter = NotebookDocumentFilterScheme | NotebookDocumentFilterPattern;


/// A notebook cell text document filter denotes a cell text
/// document by different properties.
export type NotebookCellTextDocumentFilter = {
/// A filter that matches against the notebook
/// containing the notebook cell. If a string
/// value is provided it matches against the
/// notebook type. '*' matches every notebook.
notebook: string | NotebookDocumentFilter;

/// A language id like `python`.
/// Will be matched against the language id of the
/// notebook cell document. '*' matches every language.
language?: string;
};


*)