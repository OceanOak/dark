// Actually communicating with the client.

module Darklang.LanguageServerProtocol


type IncomingMessage =
  // lifecycle
  | InitializeRequest // TODO add requestId and params
  | Initialized
  | Shutdown // TODO is this a notification or a request?
  // | Exit TODO

  // utility
  | SetTrace // TODO is this a notification or a request?

  // doc sync
  | TextDocumentDidOpenNotification of
    DocumentSync.TextDocument.DidOpenTextDocumentNotification.DidOpenTextDocumentParams.DidOpenTextDocumentParams

  | TextDocumentDidChangeNotification of
    DocumentSync.TextDocument.DidChangeTextDocumentNotification.DidChangeTextDocumentParams.DidChangeTextDocumentParams

  | TextDocumentDidSaveNotification of
    DocumentSync.TextDocument.DidSaveTextDocumentNotification.DidSaveTextDocumentParams.DidSaveTextDocumentParams

  | TextDocumentDidCloseNotification of
    DocumentSync.TextDocument.DidCloseTextDocumentNotification.DidCloseTextDocumentParams.DidCloseTextDocumentParams

  // completions
  | TextDocumentCompletionRequest of
    requestId: JsonRPC.RequestId *
    Completions.CompletionRequest.CompletionParams.CompletionParams

  // semantic tokens
  | TextDocumentSemanticTokensRequest of
    requestId: JsonRPC.RequestId *
    SemanticTokens.SemanticTokensRequest.SemanticTokensParams.SemanticTokensParams

  // hover
  | TextDocumentHoverRequest of
    requestId: JsonRPC.RequestId *
    Hover.HoverRequest.HoverParams.HoverParams

  // diagnostics
  // | PublishDiagnostics of
  //   LanguageServerProtocol.Messages.PublishDiagnostics.PublishDiagnosticsParams.PublishDiagnosticsParams

  | Other of JsonRPC.Request.Request


let parseIncomingMessage (r: JsonRPC.Request.Request) : IncomingMessage =
  match (r.method, r.id, r.params) with
  | ("initialize", None, _) -> IncomingMessage.InitializeRequest
  | ("initialized", None, Some(Object params)) -> IncomingMessage.Initialized
  | ("$/setTrace", None, _) -> IncomingMessage.SetTrace
  | ("shutdown", None, _) -> IncomingMessage.Shutdown

  // -- textDocument synchronization
  | ("textDocument/didOpen", None, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> DocumentSync.TextDocument.DidOpenTextDocumentNotification.DidOpenTextDocumentParams.fromJson
    |> Builtin.unwrap
    |> IncomingMessage.TextDocumentDidOpenNotification

  | ("textDocument/didChange", None, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> DocumentSync.TextDocument.DidChangeTextDocumentNotification.DidChangeTextDocumentParams.fromJson
    |> Builtin.unwrap
    |> IncomingMessage.TextDocumentDidChangeNotification

  | ("textDocument/didSave", None, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> DocumentSync.TextDocument.DidSaveTextDocumentNotification.DidSaveTextDocumentParams.fromJson
    |> Builtin.unwrap
    |> IncomingMessage.TextDocumentDidSaveNotification

  | ("textDocument/didClose", None, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> DocumentSync.TextDocument.DidCloseTextDocumentNotification.DidCloseTextDocumentParams.fromJson
    |> Builtin.unwrap
    |> IncomingMessage.TextDocumentDidCloseNotification

  // -- completion (autocomplete)
  | ("textDocument/completion", Some requestId, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> Completions.CompletionRequest.CompletionParams.fromJson
    |> Builtin.unwrap
    |> fun p -> IncomingMessage.TextDocumentCompletionRequest(requestId, p)

  // -- semantic tokens (which provides syntax highlighting)
  | ("textDocument/semanticTokens/full", Some requestId, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> SemanticTokens.SemanticTokensRequest.SemanticTokensParams.fromJson
    |> Builtin.unwrap
    |> fun p -> IncomingMessage.TextDocumentSemanticTokensRequest(requestId, p)

  | ("textDocument/hover", Some requestId, Some(Object p)) ->
    (Stdlib.AltJson.Json.Object p)
    |> Hover.HoverRequest.HoverParams.fromJson
    |> Builtin.unwrap
    |> fun p -> IncomingMessage.TextDocumentHoverRequest(requestId, p)


  // // -- diagnostics
  // | ("textDocument/diagnostic", None, Some(Object p)) ->
  //   (Stdlib.AltJson.Json.Object p)
  //   |> LanguageServerProtocol.Messages.PublishDiagnostics.PublishDiagnosticsParams.fromJson
  //   |> Builtin.unwrap
  //   |> IncomingMessage.PublishDiagnostics


  | _other -> IncomingMessage.Other r