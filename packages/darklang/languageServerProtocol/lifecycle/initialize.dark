/// The initialize request is the first request of a client-server relationship.
/// It is sent once, from the client to the server.
module Darklang.LanguageServerProtocol.Lifecycle.InitializeRequest


let method = "initialize"

module ClientInfo =
  /// Information about the client, provided by the client
  type ClientInfo =
    {
      /// The name of the client as defined by the client.
      name: String

      /// The client's version as defined by the client.
      version: Stdlib.Option.Option<String>
    }

  let fromJson (json: Json) : Stdlib.Result.Result<ClientInfo, Unit> =
    match json with
    | Object fields ->
      let name = // Result<String, Unit>
        match
          Stdlib.List.findFirst (fun (key, _) -> key = "name") fields
        with
        | Some(_, String name) -> Stdlib.Result.Result.Ok name
        | _ -> Stdlib.Result.Result.Error()

      let version = // Result<Option<String>, Unit>
        match
          Stdlib.List.findFirst (fun (key, _) -> key = "version") fields
        with
        | Some(_, String version) -> Stdlib.Result.Result.Ok(Some version)
        | _ -> Stdlib.Result.Result.Error()

      match (name, version) with
      | (Ok name, Ok version) ->
        (ClientInfo { name = name, version = version })
        |> Stdlib.Result.Result.Ok
      | _ -> Stdlib.Result.Result.Error()
    | _ -> Stdlib.Result.Result.Error()



module WindowClientCapabilities =
  type WindowClientCapabilities =
    {
      // /// It indicates whether the client supports server initiated
      // /// progress using the `window/workDoneProgress/create` request.
      // /// The capability also controls Whether client supports handling
      // /// of progress notifications. If set servers are allowed to report a
      // /// `workDoneProgress` property in the request specific server
      // /// capabilities.
      // workDoneProgress?: boolean;

      /// Capabilities specific to the showMessage request.
      showMessage:
        Stdlib.Option.Option<Window.ShowMessageRequest.ShowMessageRequestClientCapabilities>

    // /// Capabilities specific to the showDocument request.
    // showDocument?: ShowDocumentClientCapabilities;
    }

// /// Client capabilities specific to regular expressions.
// export interface RegularExpressionsClientCapabilities {
//   /// The engine's name.
//   engine: string;

//   /// The engine's version.
//   version?: string;
// }


// /// Capabilities specific to the notebook document support.
// export interface NotebookDocumentClientCapabilities {
//   /// Capabilities specific to notebook document synchronization
//   synchronization: NotebookDocumentSyncClientCapabilities;
// }


// /// A set of predefined position encoding kinds.
// export namespace PositionEncodingKind {
//   /// Character offsets count UTF-8 code units (e.g. bytes).
//   export const UTF8: PositionEncodingKind = 'utf-8';

//   /// Character offsets count UTF-16 code units.
//   /// This is the default and must always be supported by servers
//   export const UTF16: PositionEncodingKind = 'utf-16';

//   /// Character offsets count UTF-32 code units.
//   /// Implementation note: these are the same as Unicode codepoints,
//   /// so this `PositionEncodingKind` may also be used for an
//   /// encoding-agnostic representation of character offsets.
//   export const UTF32: PositionEncodingKind = 'utf-32';
// }
// /// A type indicating how positions are encoded,
// /// specifically what column offsets mean.
// export type PositionEncodingKind = string;



// /// @proposed
// export interface StaleRequestSupportOptions {
//   /// The client will actively cancel the request.
//   cancel: boolean;

//   /// The list of requests for which the client
//   /// will retry the request if it receives a
//   /// response with error code `ContentModified`
//   retryOnContentModified: string[];
// }


// /// General client capabilities.
// export interface GeneralClientCapabilities {
//   /// Client capability that signals how the client handles stale requests
//   /// (e.g. a request for which the client will not process the response
//   /// anymore since the information is outdated).
//   staleRequestSupport?: StaleRequestSupportOptions;

//   /// Client capabilities specific to regular expressions.
//   regularExpressions?: RegularExpressionsClientCapabilities;

//   /// Client capabilities specific to the client's markdown parser.
//   markdown?: MarkdownClientCapabilities;

//   /// The position encodings supported by the client. Client and server have to
//   /// agree on the same position encoding to ensure that offsets (e.g. character
//   /// position in a line) are interpreted the same on both sides.
//   ///
//   /// To keep the protocol backwards-compatible the following applies:
//   /// if the value 'utf-16' is missing from the array of position encodings
//   /// servers can assume that the client supports UTF-16. UTF-16 is therefore a
//   /// mandatory encoding.
//   ///
//   /// If omitted it defaults to ['utf-16'].
//   ///
//   /// Implementation considerations: since the conversion from one encoding into
//   /// another requires the content of the file / line the conversion is best done
//   /// where the file is read which is usually on the server side.
//   positionEncodings?: PositionEncodingKind[];
// }



// /// Workspace specific client capabilities.
// export interface WorkspaceClientCapabilities {
//   /// The client supports applying batch edits
//   /// to the workspace by supporting the request
//   /// 'workspace/applyEdit'
//   applyEdit?: boolean;

//   /// Capabilities specific to `WorkspaceEdit`s.
//   workspaceEdit?: WorkspaceEditClientCapabilities;

//   /// Capabilities specific to the `workspace/didChangeConfiguration` notification.
//   didChangeConfiguration?: DidChangeConfigurationClientCapabilities;

//   /// Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
//   didChangeWatchedFiles?: DidChangeWatchedFilesClientCapabilities;

//   /// Capabilities specific to the `workspace/symbol` request.
//   symbol?: WorkspaceSymbolClientCapabilities;

//   /// Capabilities specific to the `workspace/executeCommand` request.
//   executeCommand?: ExecuteCommandClientCapabilities;

//   /// The client has support for workspace folders.
//   workspaceFolders?: boolean;

//   /// The client supports `workspace/configuration` requests.
//   configuration?: boolean;

//   /// Capabilities specific to the semantic token requests scoped to the
//   /// workspace.
//   semanticTokens?: SemanticTokensWorkspaceClientCapabilities;

//   /// Capabilities specific to the code lens requests scoped to the
//   /// workspace.
//   codeLens?: CodeLensWorkspaceClientCapabilities;

//   /// The client has support for file notifications/requests for user operations on files.
//   fileOperations?: FileOperationClientCapabilities;

//   /// Capabilities specific to the inline values requests scoped to the
//   /// workspace.
//   inlineValue?: InlineValueWorkspaceClientCapabilities;

//   /// Capabilities specific to the inlay hint requests scoped to the
//   /// workspace.
//   inlayHint?: InlayHintWorkspaceClientCapabilities;

//   /// Capabilities specific to the diagnostic requests scoped to the
//   /// workspace.
//   diagnostics?: DiagnosticWorkspaceClientCapabilities;

//   /// Capabilities specific to the folding range requests scoped to the workspace.
//   /// @proposed
//   foldingRange?: FoldingRangeWorkspaceClientCapabilities;
// }


// /// Client capabilities specific to the used markdown parser.
// export interface MarkdownClientCapabilities {
//   /// The name of the parser.
//   parser: string;

//   /// The version of the parser.
//   version?: string;

//   /// A list of HTML tags that the client allows / supports in
//   /// Markdown.
//   allowedTags?: string[];
// }


// /// Text document specific client capabilities.
// export interface TextDocumentClientCapabilities {
//   /// Defines which synchronization capabilities the client supports.
//   synchronization?: TextDocumentSyncClientCapabilities;

//   /// Capabilities specific to the `textDocument/completion` request.
//   completion?: CompletionClientCapabilities;

//   /// Capabilities specific to the `textDocument/hover` request.
//   hover?: HoverClientCapabilities;

//   /// Capabilities specific to the `textDocument/signatureHelp` request.
//   signatureHelp?: SignatureHelpClientCapabilities;

//   /// Capabilities specific to the `textDocument/declaration` request.
//   declaration?: DeclarationClientCapabilities;

//   /// Capabilities specific to the `textDocument/definition` request.
//   definition?: DefinitionClientCapabilities;

//   /// Capabilities specific to the `textDocument/typeDefinition` request.
//   typeDefinition?: TypeDefinitionClientCapabilities;

//   /// Capabilities specific to the `textDocument/implementation` request.
//   implementation?: ImplementationClientCapabilities;

//   /// Capabilities specific to the `textDocument/references` request.
//   references?: ReferenceClientCapabilities;

//   /// Capabilities specific to the `textDocument/documentHighlight` request.
//   documentHighlight?: DocumentHighlightClientCapabilities;

//   /// Capabilities specific to the `textDocument/documentSymbol` request.
//   documentSymbol?: DocumentSymbolClientCapabilities;

//   /// Capabilities specific to the `textDocument/codeAction` request.
//   codeAction?: CodeActionClientCapabilities;

//   /// Capabilities specific to the `textDocument/codeLens` request.
//   codeLens?: CodeLensClientCapabilities;

//   /// Capabilities specific to the `textDocument/documentLink` request.
//   documentLink?: DocumentLinkClientCapabilities;

//   /// Capabilities specific to the `textDocument/documentColor` and the
//   /// `textDocument/colorPresentation` request.
//   colorProvider?: DocumentColorClientCapabilities;

//   /// Capabilities specific to the `textDocument/formatting` request.
//   formatting?: DocumentFormattingClientCapabilities;

//   /// Capabilities specific to the `textDocument/rangeFormatting` request.
//   rangeFormatting?: DocumentRangeFormattingClientCapabilities;

//   /// Capabilities specific to the `textDocument/onTypeFormatting` request.
//   onTypeFormatting?: DocumentOnTypeFormattingClientCapabilities;

//   /// Capabilities specific to the `textDocument/rename` request.
//   rename?: RenameClientCapabilities;

//   /// Capabilities specific to the `textDocument/foldingRange` request.
//   foldingRange?: FoldingRangeClientCapabilities;

//   /// Capabilities specific to the `textDocument/selectionRange` request.
//   selectionRange?: SelectionRangeClientCapabilities;

//   /// Capabilities specific to the `textDocument/publishDiagnostics` notification.
//   publishDiagnostics?: PublishDiagnosticsClientCapabilities;

//   /// Capabilities specific to the various call hierarchy requests.
//   callHierarchy?: CallHierarchyClientCapabilities;

//   /// Capabilities specific to the various semantic token request.
//   semanticTokens?: SemanticTokensClientCapabilities;

//   /// Capabilities specific to the `textDocument/linkedEditingRange` request.
//   linkedEditingRange?: LinkedEditingRangeClientCapabilities;

//   /// Client capabilities specific to the `textDocument/moniker` request.
//   moniker?: MonikerClientCapabilities;

//   /// Capabilities specific to the various type hierarchy requests.
//   typeHierarchy?: TypeHierarchyClientCapabilities;

//   /// Capabilities specific to the `textDocument/inlineValue` request.
//   inlineValue?: InlineValueClientCapabilities;

//   /// Capabilities specific to the `textDocument/inlayHint` request.
//   inlayHint?: InlayHintClientCapabilities;

//   /// Capabilities specific to the diagnostic pull model.
//   diagnostic?: DiagnosticClientCapabilities;

//   /// Client capabilities specific to inline completions.
//   ///
//   * @proposed
//   inlineCompletion?: InlineCompletionClientCapabilities;
// }



/// Defines the capabilities provided by the client.
type ClientCapabilities =
  {
    // /// Workspace specific client capabilities.
    // workspace?: WorkspaceClientCapabilities;

    // /// Text document specific client capabilities.
    // textDocument?: TextDocumentClientCapabilities;

    // /// Capabilities specific to the notebook document support.
    // notebookDocument?: NotebookDocumentClientCapabilities;

    // /// Window specific client capabilities.
    // window?: WindowClientCapabilities;

    // /// General client capabilities.
    // general?: GeneralClientCapabilities;

    /// Experimental client capabilities.
    experimental: Stdlib.Option.Option<Json>
  }


module InitializeParams =
  /// The initialize parameters
  ///
  /// TODO: extends
  /// - WorkDoneProgressParams
  type InitializeParams =
    {
      // /// The process Id of the parent process that started the server.
      // /// Is `null` if the process has not been started by another process.
      // /// If the parent process is not alive then the server should exit.
      // processId: integer | null;

      /// Information about the client
      clientInfo: Stdlib.Option.Option<ClientInfo.ClientInfo>

    // /// The locale the client is currently showing the user interface in.
    // /// This must not necessarily be the locale of the operating system.
    // /// Uses IETF language tags as the value's syntax
    // /// (See https://en.wikipedia.org/wiki/IETF_language_tag)
    // locale?: string;

    // /// The rootUri of the workspace.Is null if no folder is open.
    // /// If both `rootPath` and `rootUri` are set, `rootUri` wins.
    // /// @deprecated in favour of workspaceFolders.
    // rootUri: DocumentUri | null;

    // /// The capabilities provided by the client (editor or tool)
    // capabilities: ClientCapabilities;

    // /// User-provided initialization options.
    // initializationOptions?: LSPAny;

    // /// The initial trace setting. If omitted trace is disabled ('off').
    // trace?: TraceValues;

    // /// The workspace folders configured in the client when the server starts.
    // ///
    // /// This property is only available if the client supports workspace folders.
    // /// It can be `null` if the client supports workspace folders but none are
    // /// configured.
    // workspaceFolders?: WorkspaceFolder[] | null;
    }

  let fromJson (json: Json) : Stdlib.Result.Result<InitializeParams, Unit> =
    match json with
    | Object fields ->
      let clientInfo = // Result<Option<ClientInfo>, Unit>
        match Json.Object.get fields "clientInfo" with
        | Some clientInfo -> ClientInfo.fromJson clientInfo
        | None -> Stdlib.Result.Result.Ok()

      match clientInfo with
      | Ok clientInfo ->
        (InitializeParams { clientInfo = clientInfo })
        |> Stdlib.Result.Result.Ok
      | Error _ -> Stdlib.Result.Result.Error()
    | _ -> Stdlib.Result.Result.Error()


// --- </`initialize` request params from client>



// --- <`initialize` request result from server>

// /// Defines workspace specific capabilities of the server.
// ///
// /// @proposed
// export interface WorkspaceOptions {
//   /// The server supports workspace folder.
//   workspaceFolders?: WorkspaceFoldersServerCapabilities;

//   * The server is interested in notifications/requests for operations on files.
//   fileOperations?: FileOperationOptions;
// }


// note: this doesn't directly map to a single type in the spec
module TextDocumentSyncServerCapabilities =
  type TextDocumentSyncServerCapabilities =
    | TextDocumentSyncOptions of
      DocumentSync.TextDocument.TextDocumentSyncOptions.TextDocumentSyncOptions
    | TextDocumentSyncKind of
      DocumentSync.TextDocument.TextDocumentSyncKind.TextDocumentSyncKind

  // Note: we intentionally don't include any extra json representing this wrapper union type
  // (i.e. we don't indicate the 'case' of the union)
  let toJson (capabilities: TextDocumentSyncServerCapabilities) : Json =
    match capabilities with
    | TextDocumentSyncOptions o ->
      DocumentSync.TextDocument.TextDocumentSyncOptions.toJson o
    | TextDocumentSyncKind kind -> TextDocumentSyncKind.toJson kind




module ServerCapabilities =
  /// Defines the capabilities provided by a language server.
  type ServerCapabilities =
    {
      // /// The position encoding the server picked from the encodings offered
      // /// by the client via the client capability `general.positionEncodings`.
      // /// If the client didn't provide any position encodings the only valid
      // /// value that a server can return is 'utf-16'.
      // /// If omitted it defaults to 'utf-16'.
      // positionEncoding?: PositionEncodingKind;

      /// Defines how text documents are synced. Is either a detailed structure
      /// defining each notification or for backwards compatibility the
      /// TextDocumentSyncKind number.
      textDocumentSync:
        Stdlib.Option.Option<TextDocumentSyncServerCapabilities.TextDocumentSyncServerCapabilities>

      // /// Defines how notebook documents are synced.
      // notebookDocumentSync?: NotebookDocumentSyncOptions | NotebookDocumentSyncRegistrationOptions;

      /// The server provides completion support.
      completionProvider:
        Stdlib.Option.Option<Completions.CompletionOptions.CompletionOptions>

      // /// The server provides hover support.
      // hoverProvider?: boolean | HoverOptions;
      hoverProvider: Stdlib.Option.Option<Bool>

      // /// The server provides signature help support.
      // signatureHelpProvider?: SignatureHelpOptions;

      // /// The server provides Goto Declaration support.
      // declarationProvider?: boolean | DeclarationOptions | DeclarationRegistrationOptions;

      // /// The server provides goto definition support.
      // definitionProvider?: boolean | DefinitionOptions;

      // /// The server provides Goto Type Definition support.
      // typeDefinitionProvider?: boolean | TypeDefinitionOptions | TypeDefinitionRegistrationOptions;

      // /// The server provides Goto Implementation support.
      // implementationProvider?: boolean | ImplementationOptions | ImplementationRegistrationOptions;

      // /// The server provides find references support.
      // referencesProvider?: boolean | ReferenceOptions;

      // /// The server provides document highlight support.
      // documentHighlightProvider?: boolean | DocumentHighlightOptions;

      // /// The server provides document symbol support.
      // documentSymbolProvider?: boolean | DocumentSymbolOptions;

      // /// The server provides code actions. CodeActionOptions may only be
      // /// specified if the client states that it supports
      // /// `codeActionLiteralSupport` in its initial `initialize` request.
      // codeActionProvider?: boolean | CodeActionOptions;

      // /// The server provides code lens.
      // codeLensProvider?: CodeLensOptions;

      // /// The server provides document link support.
      // documentLinkProvider?: DocumentLinkOptions;

      // /// The server provides color provider support.
      // colorProvider?: boolean | DocumentColorOptions | DocumentColorRegistrationOptions;

      // /// The server provides workspace symbol support.
      // workspaceSymbolProvider?: boolean | WorkspaceSymbolOptions;

      // /// The server provides document formatting.
      // documentFormattingProvider?: boolean | DocumentFormattingOptions;

      // /// The server provides document range formatting.
      // documentRangeFormattingProvider?: boolean | DocumentRangeFormattingOptions;

      // /// The server provides document formatting on typing.
      // documentOnTypeFormattingProvider?: DocumentOnTypeFormattingOptions;

      // /// The server provides rename support. RenameOptions may only be
      // /// specified if the client states that it supports
      // /// `prepareSupport` in its initial `initialize` request.
      // renameProvider?: boolean | RenameOptions;

      // /// The server provides folding provider support.
      // foldingRangeProvider?: boolean | FoldingRangeOptions | FoldingRangeRegistrationOptions;

      // /// The server provides selection range support.
      // selectionRangeProvider?: boolean | SelectionRangeOptions | SelectionRangeRegistrationOptions;

      // /// The server provides execute command support.
      // executeCommandProvider?: ExecuteCommandOptions;

      // /// The server provides call hierarchy support.
      // callHierarchyProvider?: boolean | CallHierarchyOptions | CallHierarchyRegistrationOptions;

      // /// The server provides linked editing range support.
      // linkedEditingRangeProvider?: boolean | LinkedEditingRangeOptions | LinkedEditingRangeRegistrationOptions;

      /// The server provides semantic tokens support.
      semanticTokensProvider:
        Stdlib.Option.Option<SemanticTokens.SemanticTokenProviderOptions.SemanticTokenProviderOptions>

    // /// The server provides moniker support.
    // monikerProvider?: boolean | MonikerOptions | MonikerRegistrationOptions;

    // /// The server provides type hierarchy support.
    // typeHierarchyProvider?: boolean | TypeHierarchyOptions | TypeHierarchyRegistrationOptions;

    // /// The server provides inline values.
    // inlineValueProvider?: boolean | InlineValueOptions | InlineValueRegistrationOptions;

    // /// The server provides inlay hints.
    // inlayHintProvider?: boolean | InlayHintOptions | InlayHintRegistrationOptions;

    // /// The server has support for pull model diagnostics.
    // diagnosticProvider?: DiagnosticOptions | DiagnosticRegistrationOptions;
    // diagnosticProvider:
    //   Stdlib.Option.Option<DiagnosticOptions.DiagnosticOptions>

    // /// Inline completion options used during static registration.
    // ///
    // /// @proposed
    // inlineCompletionProvider?: boolean | InlineCompletionOptions;

    // /// Workspace specific server capabilities.
    // workspace?: WorkspaceOptions;

    // /// Experimental server capabilities.
    // experimental: Stdlib.Option.Option<Json>
    }

  let toJson (capabilities: ServerCapabilities) : Json =
    [ capabilities.textDocumentSync
      |> Stdlib.Option.map (fun sync ->
        ("textDocumentSync", TextDocumentSyncServerCapabilities.toJson sync))

      capabilities.completionProvider
      |> Stdlib.Option.map (fun p ->
        ("completionProvider", Completions.CompletionOptions.toJson p))

      capabilities.semanticTokensProvider
      |> Stdlib.Option.map (fun p ->
        ("semanticTokensProvider",
          SemanticTokens.SemanticTokenProviderOptions.toJson p))

      capabilities.hoverProvider
      |> Stdlib.Option.map (fun p -> ("hoverProvider", Json.Bool p)) ]

    |> Stdlib.Option.values
    |> Json.Object


/// Information about the server
module ServerInfo =
  /// Information about the server
  type ServerInfo =
    {
      /// The name of the server as defined by the server.
      name: String

      /// The server's version as defined by the server.
      version: Stdlib.Option.Option<String>
    }

  let toJson (serverInfo: ServerInfo) : Json =
    let fields =
      [ Some(("name", Json.String serverInfo.name))

        (serverInfo.version
          |> Stdlib.Option.map (fun v -> ("version", Json.String v))) ]
      |> Stdlib.Option.values

    Json.Object fields


module InitializeResult =
  /// The result returned from an `initialize` request.
  type InitializeResult =
    {
      /// The capabilities the language server provides.
      capabilities: ServerCapabilities.ServerCapabilities

      /// Information about the server.
      serverInfo: Stdlib.Option.Option<ServerInfo.ServerInfo>

    // /// Custom initialization results.
    // [custom: string]: LSPAny | ServerCapabilities<T> | undefined; /** undefined is needed since serverInfo is optional */
    }

  let toJson (result: InitializeResult) : Json =
    [ Stdlib.Option.Option.Some(
        ("capabilities", ServerCapabilities.toJson result.capabilities)
      )

      (result.serverInfo
        |> Stdlib.Option.map (fun info ->
          ("serverInfo", ServerInfo.toJson info))) ]

    |> Stdlib.Option.values
    |> Json.Object


module InitializeError =
  /// The data type of the ResponseError if the initialize request fails.
  type InitializeError =
    {
      /// Indicates whether the client execute the following retry logic:
      /// (1) show the message provided by the ResponseError to the user
      /// (2) user selects retry or cancel
      /// (3) if user selected retry the initialize method is sent again.
      retry: Bool
    }

  let toJson (error: InitializeError) : Json =
    Json.Object [ ("retry", Json.Bool error.retry) ]