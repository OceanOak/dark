module Darklang =
  module Cli =
    type Command =
      | RunScript of String * List<String>
      | Help
      | Show of String
      | Infer of String
      | Invalid of List<String>


    let showFn (name: String) (owner: String) (modules: List<String>) : Int =
      let fns =
        CLI.HttpClient.request
          "GET"
          ("http://dark-packages.dlio.localhost:11003/functions/")
          []
          Bytes.empty

      let statusCode =
        fns
        |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.statusCode)
        |> unwrap

      let parsedFns =
        if statusCode == 200 then
          fns
          |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
          |> unwrap
          |> String.fromBytes
          |> Json.parse<List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.T>>
          |> unwrap
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some
        else
          PACKAGE.Darklang.Stdlib.Option.Option.None

      match parsedFns with
      | None ->
        print "Error getting functions"
        1
      | Some fn ->
        let packageSpecificFunction =
          (List.filter fn (fun f ->
            f.name.name
            == PACKAGE.Darklang.LanguageTools.ProgramTypes.FnName.Name.FnName(name)
            && f.name.owner == owner
            && f.name.modules == modules))
          |> List.head

        let result =
          match packageSpecificFunction with
          | Some f ->
            print (PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageFn f)
            0
          | None ->
            print "Function not found"
            1

        result

    let showType (name: String) (owner: String) (modules: List<String>) : Int =
      let types =
        CLI.HttpClient.request
          "GET"
          ("http://dark-packages.dlio.localhost:11003/types/")
          []
          Bytes.empty

      let statusCode =
        types
        |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.statusCode)
        |> unwrap

      let parsedTypes =
        if statusCode == 200 then
          types
          |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
          |> unwrap
          |> String.fromBytes
          |> Json.parse<List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType.T>>
          |> unwrap
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some
        else
          PACKAGE.Darklang.Stdlib.Option.Option.None

      match parsedTypes with
      | None ->
        print "Error getting types"
        1
      | Some types ->
        let packageSpecificType =
          (List.filter types (fun t ->
            t.name.name
            == PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeName.Name.TypeName(
              name
            )
            && t.name.owner == owner
            && t.name.modules == modules))
          |> List.head

        let result =
          match packageSpecificType with
          | Some t ->
            print (PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageType t)
            0
          | None ->
            print "Type not found"
            1

        result

    let showConstant (name: String) (owner: String) (modules: List<String>) : Int =
      let constants =
        CLI.HttpClient.request
          "GET"
          ("http://dark-packages.dlio.localhost:11003/constants/")
          []
          Bytes.empty

      let statusCode =
        constants
        |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.statusCode)
        |> unwrap

      let parsedConstants =
        if statusCode == 200 then
          constants
          |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
          |> unwrap
          |> String.fromBytes
          |> Json.parse<List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant.T>>
          |> unwrap
          |> PACKAGE.Darklang.Stdlib.Option.Option.Some
        else
          PACKAGE.Darklang.Stdlib.Option.Option.None

      match parsedConstants with
      | None ->
        print "Error getting constants"
        1
      | Some constants ->
        let packageSpecificConstant =
          (List.filter constants (fun c ->
            c.name.name
            == PACKAGE
              .Darklang
              .LanguageTools
              .ProgramTypes
              .ConstantName
              .Name
              .ConstantName(name)
            && c.name.owner == owner
            && c.name.modules == modules))
          |> List.head

        let result =
          match packageSpecificConstant with
          | Some c ->
            print (PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageConstant c)
            0
          | None ->
            print "Constant not found"
            1

        result


    let parseArguments (args: List<String>) : PACKAGE.Darklang.Cli.Command =
      match args with
      | [ "-h" ] -> PACKAGE.Darklang.Cli.Command.Help
      | [ "--help" ] -> PACKAGE.Darklang.Cli.Command.Help
      | [ "--prompt"; prompt ] -> PACKAGE.Darklang.Cli.Command.Infer prompt
      | [ "--show"; fnName ] ->
        if String.startsWith fnName "@" then
          PACKAGE.Darklang.Cli.Command.Show fnName
        else
          PACKAGE.Darklang.Cli.Command.Invalid [ "Invalid package name" ]
      | scriptPath :: args ->
        PACKAGE.Darklang.Cli.Command.RunScript(scriptPath, args)
      | _ -> PACKAGE.Darklang.Cli.Command.Invalid [ "Invalid arguments" ]


    let executeCommand (command: PACKAGE.Darklang.Cli.Command) : Int =
      match command with
      | RunScript(scriptPath, args) ->
        match File.read scriptPath with
        | Error e ->
          print e
          1
        | Ok script ->
          let script = String.fromBytes script

          match
            Cli.parseAndExecuteScript scriptPath script (Dict { args = args })
          with
          | Ok i -> i
          | Error e ->
            print $"Error executing script {scriptPath}"
            print e.msg
            e.metadata |> Dict.iter (fun (k, v) -> print $"  {k}: {v}")
            1


      | Help ->
        let helpText =
          """Usage: darklang [options] [SCRIPT]
Options:
  -h, --help          Show this help message and exit
  --show              Show a package, function, type, constant, or module
  --prompt PROMPT     Infer a script from the given prompt using OpenAI"""

        print helpText
        0


      | Show(name) ->

        let fullName = name |> String.dropFirst_v0 1

        let owner = fullName |> String.split "." |> List.head |> unwrap

        let modules =
          fullName
          |> String.split "."
          |> (List.drop 1)
          |> PACKAGE.Darklang.Stdlib.List.dropLast

        let name =
          name |> String.dropFirst_v0 1 |> String.split "." |> List.last |> unwrap

        let whatIsIt =
          CLI.HttpClient.request
            "GET"
            ("http://dark-packages.dlio.localhost:11003/byName/" ++ fullName)
            []
            Bytes.empty

        let statusCode =
          whatIsIt
          |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.statusCode)
          |> unwrap

        let whatIsIt =
          if statusCode == 200 then
            whatIsIt
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
            |> unwrap
            |> String.fromBytes
          else
            "Error" |> String.toBytes

        match whatIsIt with
        | "fn" -> PACKAGE.Darklang.Cli.showFn name owner modules
        | "type" -> PACKAGE.Darklang.Cli.showType name owner modules
        | "constant" -> PACKAGE.Darklang.Cli.showConstant name owner modules
        | _ ->
          print "Not found"
          1



      | Infer(prompt, scriptPath) ->
        // let script = System.IO.File.ReadAllText scriptPath
        // Call OpenAI API with the prompt and script to generate a new script
        // let generatedScript = callOpenAI(prompt, script)
        // Execute the generated script here
        1

      | Invalid args ->
        let args = args |> String.join " "
        print $"Invalid command {args}. Use --help for more information."
        1


    let executeCliCommand (args: List<String>) : Int =
      args
      |> PACKAGE.Darklang.Cli.parseArguments
      |> PACKAGE.Darklang.Cli.executeCommand