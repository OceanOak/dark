module Darklang =
  module Cli =
    type Command =
      | RunScript of String * List<String>
      | Help
      | Show of String
      | Infer of String
      | Invalid of List<String>


    let parseArguments (args: List<String>) : PACKAGE.Darklang.Cli.Command =
      match args with
      | [ "-h" ] -> PACKAGE.Darklang.Cli.Command.Help
      | [ "--help" ] -> PACKAGE.Darklang.Cli.Command.Help
      | [ "--prompt"; prompt ] -> PACKAGE.Darklang.Cli.Command.Infer prompt
      | [ "--show"; fnName ] ->
        if String.startsWith fnName "@" then
          PACKAGE.Darklang.Cli.Command.Show fnName
        else
          PACKAGE.Darklang.Cli.Command.Invalid [ "Invalid package name" ]
      | scriptPath :: args ->
        PACKAGE.Darklang.Cli.Command.RunScript(scriptPath, args)
      | _ -> PACKAGE.Darklang.Cli.Command.Invalid [ "Invalid arguments" ]


    let executeCommand (command: PACKAGE.Darklang.Cli.Command) : Int =
      match command with
      | RunScript(scriptPath, args) ->
        match File.read scriptPath with
        | Error e ->
          print e
          1
        | Ok script ->
          let script = String.fromBytes script

          match
            Cli.parseAndExecuteScript scriptPath script (Dict { args = args })
          with
          | Ok i -> i
          | Error e ->
            print $"Error executing script {scriptPath}"
            print e.msg
            e.metadata |> Dict.iter (fun (k, v) -> print $"  {k}: {v}")
            1


      | Help ->
        let helpText =
          """Usage: darklang [options] [SCRIPT]
Options:
  -h, --help          Show this help message and exit
  --show              Show a package, function, type, constant, or module
  --prompt PROMPT     Infer a script from the given prompt using OpenAI"""

        print helpText
        0


      | Show(name) ->

        let fullName = name |> String.dropFirst_v0 1

        let whatIsIt =
          CLI.HttpClient.request
            "GET"
            ("http://dark-packages.dlio.localhost:11003/byName/" ++ fullName)
            []
            Bytes.empty


        let statusCode =
          whatIsIt
          |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.statusCode)
          |> unwrap

        let whatIsIt =
          if statusCode == 200 then
            whatIsIt
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
            |> unwrap
            |> String.fromBytes
          else
            "Error" |> String.toBytes

        let result = whatIsIt |> Json.parse<Tuple<String, String>> |> unwrap

        match result with
        | ("function", fn) ->
          print fn
          0
        | ("type", t) ->
          print t
          0
        | ("constant", c) ->
          print c
          0
        | ("modules", m) ->
          let result =
            CLI.HttpClient.request
              "GET"
              ("http://dark-packages.dlio.localhost:11003/modules/" ++ m)
              []
              Bytes.empty

          let statusCode =
            result
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response ->
              response.statusCode)
            |> unwrap

          let modules =
            if statusCode == 200 then
              result
              |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
              |> unwrap
              |> String.fromBytes
            else
              $"Error getting module {m}. Received status code: {statusCode |> Int.toString}"

          print modules
          0

        | ("owner", o) ->
          let result =
            CLI.HttpClient.request
              "GET"
              ("http://dark-packages.dlio.localhost:11003/owner/" ++ o)
              []
              Bytes.empty

          let statusCode =
            result
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response ->
              response.statusCode)
            |> unwrap


          let owner =
            if statusCode == 200 then
              result
              |> PACKAGE.Darklang.Stdlib.Result.map (fun response -> response.body)
              |> unwrap
              |> String.fromBytes

            else
              $"Error getting owner {o}. Received status code: {statusCode |> Int.toString}"

          print owner
          0


      | Infer(prompt, scriptPath) ->
        // let script = System.IO.File.ReadAllText scriptPath
        // Call OpenAI API with the prompt and script to generate a new script
        // let generatedScript = callOpenAI(prompt, script)
        // Execute the generated script here
        1

      | Invalid args ->
        let args = args |> String.join " "
        print $"Invalid command {args}. Use --help for more information."
        1


    let executeCliCommand (args: List<String>) : Int =
      args
      |> PACKAGE.Darklang.Cli.parseArguments
      |> PACKAGE.Darklang.Cli.executeCommand